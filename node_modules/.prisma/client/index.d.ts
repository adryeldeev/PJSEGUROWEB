
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/binary.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Vitima
 * 
 */
export type Vitima = $Result.DefaultSelection<Prisma.$VitimaPayload>
/**
 * Model Processo
 * 
 */
export type Processo = $Result.DefaultSelection<Prisma.$ProcessoPayload>
/**
 * Model TiposDeProcesso
 * 
 */
export type TiposDeProcesso = $Result.DefaultSelection<Prisma.$TiposDeProcessoPayload>
/**
 * Model Documento
 * 
 */
export type Documento = $Result.DefaultSelection<Prisma.$DocumentoPayload>
/**
 * Model FaseProcesso
 * 
 */
export type FaseProcesso = $Result.DefaultSelection<Prisma.$FaseProcessoPayload>
/**
 * Model Prioridades
 * 
 */
export type Prioridades = $Result.DefaultSelection<Prisma.$PrioridadesPayload>
/**
 * Model Parceiro
 * 
 */
export type Parceiro = $Result.DefaultSelection<Prisma.$ParceiroPayload>
/**
 * Model Cliente
 * 
 */
export type Cliente = $Result.DefaultSelection<Prisma.$ClientePayload>
/**
 * Model Banco
 * 
 */
export type Banco = $Result.DefaultSelection<Prisma.$BancoPayload>
/**
 * Model Seguradora
 * 
 */
export type Seguradora = $Result.DefaultSelection<Prisma.$SeguradoraPayload>
/**
 * Model TipoDeVeiculo
 * 
 */
export type TipoDeVeiculo = $Result.DefaultSelection<Prisma.$TipoDeVeiculoPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => $Utils.JsPromise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.vitima`: Exposes CRUD operations for the **Vitima** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vitimas
    * const vitimas = await prisma.vitima.findMany()
    * ```
    */
  get vitima(): Prisma.VitimaDelegate<ExtArgs>;

  /**
   * `prisma.processo`: Exposes CRUD operations for the **Processo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Processos
    * const processos = await prisma.processo.findMany()
    * ```
    */
  get processo(): Prisma.ProcessoDelegate<ExtArgs>;

  /**
   * `prisma.tiposDeProcesso`: Exposes CRUD operations for the **TiposDeProcesso** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TiposDeProcessos
    * const tiposDeProcessos = await prisma.tiposDeProcesso.findMany()
    * ```
    */
  get tiposDeProcesso(): Prisma.TiposDeProcessoDelegate<ExtArgs>;

  /**
   * `prisma.documento`: Exposes CRUD operations for the **Documento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Documentos
    * const documentos = await prisma.documento.findMany()
    * ```
    */
  get documento(): Prisma.DocumentoDelegate<ExtArgs>;

  /**
   * `prisma.faseProcesso`: Exposes CRUD operations for the **FaseProcesso** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FaseProcessos
    * const faseProcessos = await prisma.faseProcesso.findMany()
    * ```
    */
  get faseProcesso(): Prisma.FaseProcessoDelegate<ExtArgs>;

  /**
   * `prisma.prioridades`: Exposes CRUD operations for the **Prioridades** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Prioridades
    * const prioridades = await prisma.prioridades.findMany()
    * ```
    */
  get prioridades(): Prisma.PrioridadesDelegate<ExtArgs>;

  /**
   * `prisma.parceiro`: Exposes CRUD operations for the **Parceiro** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Parceiros
    * const parceiros = await prisma.parceiro.findMany()
    * ```
    */
  get parceiro(): Prisma.ParceiroDelegate<ExtArgs>;

  /**
   * `prisma.cliente`: Exposes CRUD operations for the **Cliente** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clientes
    * const clientes = await prisma.cliente.findMany()
    * ```
    */
  get cliente(): Prisma.ClienteDelegate<ExtArgs>;

  /**
   * `prisma.banco`: Exposes CRUD operations for the **Banco** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bancos
    * const bancos = await prisma.banco.findMany()
    * ```
    */
  get banco(): Prisma.BancoDelegate<ExtArgs>;

  /**
   * `prisma.seguradora`: Exposes CRUD operations for the **Seguradora** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Seguradoras
    * const seguradoras = await prisma.seguradora.findMany()
    * ```
    */
  get seguradora(): Prisma.SeguradoraDelegate<ExtArgs>;

  /**
   * `prisma.tipoDeVeiculo`: Exposes CRUD operations for the **TipoDeVeiculo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TipoDeVeiculos
    * const tipoDeVeiculos = await prisma.tipoDeVeiculo.findMany()
    * ```
    */
  get tipoDeVeiculo(): Prisma.TipoDeVeiculoDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Vitima: 'Vitima',
    Processo: 'Processo',
    TiposDeProcesso: 'TiposDeProcesso',
    Documento: 'Documento',
    FaseProcesso: 'FaseProcesso',
    Prioridades: 'Prioridades',
    Parceiro: 'Parceiro',
    Cliente: 'Cliente',
    Banco: 'Banco',
    Seguradora: 'Seguradora',
    TipoDeVeiculo: 'TipoDeVeiculo'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "vitima" | "processo" | "tiposDeProcesso" | "documento" | "faseProcesso" | "prioridades" | "parceiro" | "cliente" | "banco" | "seguradora" | "tipoDeVeiculo"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Vitima: {
        payload: Prisma.$VitimaPayload<ExtArgs>
        fields: Prisma.VitimaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VitimaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VitimaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VitimaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VitimaPayload>
          }
          findFirst: {
            args: Prisma.VitimaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VitimaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VitimaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VitimaPayload>
          }
          findMany: {
            args: Prisma.VitimaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VitimaPayload>[]
          }
          create: {
            args: Prisma.VitimaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VitimaPayload>
          }
          createMany: {
            args: Prisma.VitimaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.VitimaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VitimaPayload>
          }
          update: {
            args: Prisma.VitimaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VitimaPayload>
          }
          deleteMany: {
            args: Prisma.VitimaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VitimaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VitimaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VitimaPayload>
          }
          aggregate: {
            args: Prisma.VitimaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVitima>
          }
          groupBy: {
            args: Prisma.VitimaGroupByArgs<ExtArgs>
            result: $Utils.Optional<VitimaGroupByOutputType>[]
          }
          count: {
            args: Prisma.VitimaCountArgs<ExtArgs>
            result: $Utils.Optional<VitimaCountAggregateOutputType> | number
          }
        }
      }
      Processo: {
        payload: Prisma.$ProcessoPayload<ExtArgs>
        fields: Prisma.ProcessoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProcessoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProcessoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessoPayload>
          }
          findFirst: {
            args: Prisma.ProcessoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProcessoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessoPayload>
          }
          findMany: {
            args: Prisma.ProcessoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessoPayload>[]
          }
          create: {
            args: Prisma.ProcessoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessoPayload>
          }
          createMany: {
            args: Prisma.ProcessoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProcessoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessoPayload>
          }
          update: {
            args: Prisma.ProcessoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessoPayload>
          }
          deleteMany: {
            args: Prisma.ProcessoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProcessoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProcessoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessoPayload>
          }
          aggregate: {
            args: Prisma.ProcessoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProcesso>
          }
          groupBy: {
            args: Prisma.ProcessoGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProcessoGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProcessoCountArgs<ExtArgs>
            result: $Utils.Optional<ProcessoCountAggregateOutputType> | number
          }
        }
      }
      TiposDeProcesso: {
        payload: Prisma.$TiposDeProcessoPayload<ExtArgs>
        fields: Prisma.TiposDeProcessoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TiposDeProcessoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TiposDeProcessoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TiposDeProcessoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TiposDeProcessoPayload>
          }
          findFirst: {
            args: Prisma.TiposDeProcessoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TiposDeProcessoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TiposDeProcessoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TiposDeProcessoPayload>
          }
          findMany: {
            args: Prisma.TiposDeProcessoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TiposDeProcessoPayload>[]
          }
          create: {
            args: Prisma.TiposDeProcessoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TiposDeProcessoPayload>
          }
          createMany: {
            args: Prisma.TiposDeProcessoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TiposDeProcessoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TiposDeProcessoPayload>
          }
          update: {
            args: Prisma.TiposDeProcessoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TiposDeProcessoPayload>
          }
          deleteMany: {
            args: Prisma.TiposDeProcessoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TiposDeProcessoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TiposDeProcessoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TiposDeProcessoPayload>
          }
          aggregate: {
            args: Prisma.TiposDeProcessoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTiposDeProcesso>
          }
          groupBy: {
            args: Prisma.TiposDeProcessoGroupByArgs<ExtArgs>
            result: $Utils.Optional<TiposDeProcessoGroupByOutputType>[]
          }
          count: {
            args: Prisma.TiposDeProcessoCountArgs<ExtArgs>
            result: $Utils.Optional<TiposDeProcessoCountAggregateOutputType> | number
          }
        }
      }
      Documento: {
        payload: Prisma.$DocumentoPayload<ExtArgs>
        fields: Prisma.DocumentoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoPayload>
          }
          findFirst: {
            args: Prisma.DocumentoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoPayload>
          }
          findMany: {
            args: Prisma.DocumentoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoPayload>[]
          }
          create: {
            args: Prisma.DocumentoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoPayload>
          }
          createMany: {
            args: Prisma.DocumentoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.DocumentoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoPayload>
          }
          update: {
            args: Prisma.DocumentoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoPayload>
          }
          deleteMany: {
            args: Prisma.DocumentoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DocumentoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoPayload>
          }
          aggregate: {
            args: Prisma.DocumentoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocumento>
          }
          groupBy: {
            args: Prisma.DocumentoGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentoGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentoCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentoCountAggregateOutputType> | number
          }
        }
      }
      FaseProcesso: {
        payload: Prisma.$FaseProcessoPayload<ExtArgs>
        fields: Prisma.FaseProcessoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FaseProcessoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaseProcessoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FaseProcessoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaseProcessoPayload>
          }
          findFirst: {
            args: Prisma.FaseProcessoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaseProcessoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FaseProcessoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaseProcessoPayload>
          }
          findMany: {
            args: Prisma.FaseProcessoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaseProcessoPayload>[]
          }
          create: {
            args: Prisma.FaseProcessoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaseProcessoPayload>
          }
          createMany: {
            args: Prisma.FaseProcessoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.FaseProcessoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaseProcessoPayload>
          }
          update: {
            args: Prisma.FaseProcessoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaseProcessoPayload>
          }
          deleteMany: {
            args: Prisma.FaseProcessoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FaseProcessoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FaseProcessoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaseProcessoPayload>
          }
          aggregate: {
            args: Prisma.FaseProcessoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFaseProcesso>
          }
          groupBy: {
            args: Prisma.FaseProcessoGroupByArgs<ExtArgs>
            result: $Utils.Optional<FaseProcessoGroupByOutputType>[]
          }
          count: {
            args: Prisma.FaseProcessoCountArgs<ExtArgs>
            result: $Utils.Optional<FaseProcessoCountAggregateOutputType> | number
          }
        }
      }
      Prioridades: {
        payload: Prisma.$PrioridadesPayload<ExtArgs>
        fields: Prisma.PrioridadesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PrioridadesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrioridadesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PrioridadesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrioridadesPayload>
          }
          findFirst: {
            args: Prisma.PrioridadesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrioridadesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PrioridadesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrioridadesPayload>
          }
          findMany: {
            args: Prisma.PrioridadesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrioridadesPayload>[]
          }
          create: {
            args: Prisma.PrioridadesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrioridadesPayload>
          }
          createMany: {
            args: Prisma.PrioridadesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PrioridadesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrioridadesPayload>
          }
          update: {
            args: Prisma.PrioridadesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrioridadesPayload>
          }
          deleteMany: {
            args: Prisma.PrioridadesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PrioridadesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PrioridadesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrioridadesPayload>
          }
          aggregate: {
            args: Prisma.PrioridadesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePrioridades>
          }
          groupBy: {
            args: Prisma.PrioridadesGroupByArgs<ExtArgs>
            result: $Utils.Optional<PrioridadesGroupByOutputType>[]
          }
          count: {
            args: Prisma.PrioridadesCountArgs<ExtArgs>
            result: $Utils.Optional<PrioridadesCountAggregateOutputType> | number
          }
        }
      }
      Parceiro: {
        payload: Prisma.$ParceiroPayload<ExtArgs>
        fields: Prisma.ParceiroFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ParceiroFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParceiroPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ParceiroFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParceiroPayload>
          }
          findFirst: {
            args: Prisma.ParceiroFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParceiroPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ParceiroFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParceiroPayload>
          }
          findMany: {
            args: Prisma.ParceiroFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParceiroPayload>[]
          }
          create: {
            args: Prisma.ParceiroCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParceiroPayload>
          }
          createMany: {
            args: Prisma.ParceiroCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ParceiroDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParceiroPayload>
          }
          update: {
            args: Prisma.ParceiroUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParceiroPayload>
          }
          deleteMany: {
            args: Prisma.ParceiroDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ParceiroUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ParceiroUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParceiroPayload>
          }
          aggregate: {
            args: Prisma.ParceiroAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateParceiro>
          }
          groupBy: {
            args: Prisma.ParceiroGroupByArgs<ExtArgs>
            result: $Utils.Optional<ParceiroGroupByOutputType>[]
          }
          count: {
            args: Prisma.ParceiroCountArgs<ExtArgs>
            result: $Utils.Optional<ParceiroCountAggregateOutputType> | number
          }
        }
      }
      Cliente: {
        payload: Prisma.$ClientePayload<ExtArgs>
        fields: Prisma.ClienteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClienteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClienteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          findFirst: {
            args: Prisma.ClienteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClienteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          findMany: {
            args: Prisma.ClienteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>[]
          }
          create: {
            args: Prisma.ClienteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          createMany: {
            args: Prisma.ClienteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ClienteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          update: {
            args: Prisma.ClienteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          deleteMany: {
            args: Prisma.ClienteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClienteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClienteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          aggregate: {
            args: Prisma.ClienteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCliente>
          }
          groupBy: {
            args: Prisma.ClienteGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClienteGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClienteCountArgs<ExtArgs>
            result: $Utils.Optional<ClienteCountAggregateOutputType> | number
          }
        }
      }
      Banco: {
        payload: Prisma.$BancoPayload<ExtArgs>
        fields: Prisma.BancoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BancoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BancoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancoPayload>
          }
          findFirst: {
            args: Prisma.BancoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BancoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancoPayload>
          }
          findMany: {
            args: Prisma.BancoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancoPayload>[]
          }
          create: {
            args: Prisma.BancoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancoPayload>
          }
          createMany: {
            args: Prisma.BancoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BancoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancoPayload>
          }
          update: {
            args: Prisma.BancoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancoPayload>
          }
          deleteMany: {
            args: Prisma.BancoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BancoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BancoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BancoPayload>
          }
          aggregate: {
            args: Prisma.BancoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBanco>
          }
          groupBy: {
            args: Prisma.BancoGroupByArgs<ExtArgs>
            result: $Utils.Optional<BancoGroupByOutputType>[]
          }
          count: {
            args: Prisma.BancoCountArgs<ExtArgs>
            result: $Utils.Optional<BancoCountAggregateOutputType> | number
          }
        }
      }
      Seguradora: {
        payload: Prisma.$SeguradoraPayload<ExtArgs>
        fields: Prisma.SeguradoraFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SeguradoraFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeguradoraPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SeguradoraFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeguradoraPayload>
          }
          findFirst: {
            args: Prisma.SeguradoraFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeguradoraPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SeguradoraFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeguradoraPayload>
          }
          findMany: {
            args: Prisma.SeguradoraFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeguradoraPayload>[]
          }
          create: {
            args: Prisma.SeguradoraCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeguradoraPayload>
          }
          createMany: {
            args: Prisma.SeguradoraCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SeguradoraDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeguradoraPayload>
          }
          update: {
            args: Prisma.SeguradoraUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeguradoraPayload>
          }
          deleteMany: {
            args: Prisma.SeguradoraDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SeguradoraUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SeguradoraUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeguradoraPayload>
          }
          aggregate: {
            args: Prisma.SeguradoraAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSeguradora>
          }
          groupBy: {
            args: Prisma.SeguradoraGroupByArgs<ExtArgs>
            result: $Utils.Optional<SeguradoraGroupByOutputType>[]
          }
          count: {
            args: Prisma.SeguradoraCountArgs<ExtArgs>
            result: $Utils.Optional<SeguradoraCountAggregateOutputType> | number
          }
        }
      }
      TipoDeVeiculo: {
        payload: Prisma.$TipoDeVeiculoPayload<ExtArgs>
        fields: Prisma.TipoDeVeiculoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TipoDeVeiculoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoDeVeiculoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TipoDeVeiculoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoDeVeiculoPayload>
          }
          findFirst: {
            args: Prisma.TipoDeVeiculoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoDeVeiculoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TipoDeVeiculoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoDeVeiculoPayload>
          }
          findMany: {
            args: Prisma.TipoDeVeiculoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoDeVeiculoPayload>[]
          }
          create: {
            args: Prisma.TipoDeVeiculoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoDeVeiculoPayload>
          }
          createMany: {
            args: Prisma.TipoDeVeiculoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TipoDeVeiculoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoDeVeiculoPayload>
          }
          update: {
            args: Prisma.TipoDeVeiculoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoDeVeiculoPayload>
          }
          deleteMany: {
            args: Prisma.TipoDeVeiculoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TipoDeVeiculoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TipoDeVeiculoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoDeVeiculoPayload>
          }
          aggregate: {
            args: Prisma.TipoDeVeiculoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTipoDeVeiculo>
          }
          groupBy: {
            args: Prisma.TipoDeVeiculoGroupByArgs<ExtArgs>
            result: $Utils.Optional<TipoDeVeiculoGroupByOutputType>[]
          }
          count: {
            args: Prisma.TipoDeVeiculoCountArgs<ExtArgs>
            result: $Utils.Optional<TipoDeVeiculoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    vitimas: number
    processos: number
    fasesProcesso: number
    tiposDeProcesso: number
    prioridades: number
    parceiro: number
    cliente: number
    banco: number
    seguradora: number
    tipoDeVeiculo: number
    documento: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    vitimas?: boolean | UserCountOutputTypeCountVitimasArgs
    processos?: boolean | UserCountOutputTypeCountProcessosArgs
    fasesProcesso?: boolean | UserCountOutputTypeCountFasesProcessoArgs
    tiposDeProcesso?: boolean | UserCountOutputTypeCountTiposDeProcessoArgs
    prioridades?: boolean | UserCountOutputTypeCountPrioridadesArgs
    parceiro?: boolean | UserCountOutputTypeCountParceiroArgs
    cliente?: boolean | UserCountOutputTypeCountClienteArgs
    banco?: boolean | UserCountOutputTypeCountBancoArgs
    seguradora?: boolean | UserCountOutputTypeCountSeguradoraArgs
    tipoDeVeiculo?: boolean | UserCountOutputTypeCountTipoDeVeiculoArgs
    documento?: boolean | UserCountOutputTypeCountDocumentoArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountVitimasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VitimaWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProcessosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProcessoWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFasesProcessoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FaseProcessoWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTiposDeProcessoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TiposDeProcessoWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPrioridadesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PrioridadesWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountParceiroArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParceiroWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountClienteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClienteWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBancoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BancoWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSeguradoraArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeguradoraWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTipoDeVeiculoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TipoDeVeiculoWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDocumentoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentoWhereInput
  }


  /**
   * Count Type VitimaCountOutputType
   */

  export type VitimaCountOutputType = {
    processos: number
  }

  export type VitimaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    processos?: boolean | VitimaCountOutputTypeCountProcessosArgs
  }

  // Custom InputTypes
  /**
   * VitimaCountOutputType without action
   */
  export type VitimaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VitimaCountOutputType
     */
    select?: VitimaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VitimaCountOutputType without action
   */
  export type VitimaCountOutputTypeCountProcessosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProcessoWhereInput
  }


  /**
   * Count Type TiposDeProcessoCountOutputType
   */

  export type TiposDeProcessoCountOutputType = {
    processo: number
  }

  export type TiposDeProcessoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    processo?: boolean | TiposDeProcessoCountOutputTypeCountProcessoArgs
  }

  // Custom InputTypes
  /**
   * TiposDeProcessoCountOutputType without action
   */
  export type TiposDeProcessoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TiposDeProcessoCountOutputType
     */
    select?: TiposDeProcessoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TiposDeProcessoCountOutputType without action
   */
  export type TiposDeProcessoCountOutputTypeCountProcessoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProcessoWhereInput
  }


  /**
   * Count Type FaseProcessoCountOutputType
   */

  export type FaseProcessoCountOutputType = {
    processo: number
  }

  export type FaseProcessoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    processo?: boolean | FaseProcessoCountOutputTypeCountProcessoArgs
  }

  // Custom InputTypes
  /**
   * FaseProcessoCountOutputType without action
   */
  export type FaseProcessoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaseProcessoCountOutputType
     */
    select?: FaseProcessoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FaseProcessoCountOutputType without action
   */
  export type FaseProcessoCountOutputTypeCountProcessoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProcessoWhereInput
  }


  /**
   * Count Type ClienteCountOutputType
   */

  export type ClienteCountOutputType = {
    documento: number
  }

  export type ClienteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documento?: boolean | ClienteCountOutputTypeCountDocumentoArgs
  }

  // Custom InputTypes
  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteCountOutputType
     */
    select?: ClienteCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeCountDocumentoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentoWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    username: string | null
    email: string | null
    password: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    username: string | null
    email: string | null
    password: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    email: number
    password: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    username: string
    email: string
    password: string
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    vitimas?: boolean | User$vitimasArgs<ExtArgs>
    processos?: boolean | User$processosArgs<ExtArgs>
    fasesProcesso?: boolean | User$fasesProcessoArgs<ExtArgs>
    tiposDeProcesso?: boolean | User$tiposDeProcessoArgs<ExtArgs>
    prioridades?: boolean | User$prioridadesArgs<ExtArgs>
    parceiro?: boolean | User$parceiroArgs<ExtArgs>
    cliente?: boolean | User$clienteArgs<ExtArgs>
    banco?: boolean | User$bancoArgs<ExtArgs>
    seguradora?: boolean | User$seguradoraArgs<ExtArgs>
    tipoDeVeiculo?: boolean | User$tipoDeVeiculoArgs<ExtArgs>
    documento?: boolean | User$documentoArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>


  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    vitimas?: boolean | User$vitimasArgs<ExtArgs>
    processos?: boolean | User$processosArgs<ExtArgs>
    fasesProcesso?: boolean | User$fasesProcessoArgs<ExtArgs>
    tiposDeProcesso?: boolean | User$tiposDeProcessoArgs<ExtArgs>
    prioridades?: boolean | User$prioridadesArgs<ExtArgs>
    parceiro?: boolean | User$parceiroArgs<ExtArgs>
    cliente?: boolean | User$clienteArgs<ExtArgs>
    banco?: boolean | User$bancoArgs<ExtArgs>
    seguradora?: boolean | User$seguradoraArgs<ExtArgs>
    tipoDeVeiculo?: boolean | User$tipoDeVeiculoArgs<ExtArgs>
    documento?: boolean | User$documentoArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      vitimas: Prisma.$VitimaPayload<ExtArgs>[]
      processos: Prisma.$ProcessoPayload<ExtArgs>[]
      fasesProcesso: Prisma.$FaseProcessoPayload<ExtArgs>[]
      tiposDeProcesso: Prisma.$TiposDeProcessoPayload<ExtArgs>[]
      prioridades: Prisma.$PrioridadesPayload<ExtArgs>[]
      parceiro: Prisma.$ParceiroPayload<ExtArgs>[]
      cliente: Prisma.$ClientePayload<ExtArgs>[]
      banco: Prisma.$BancoPayload<ExtArgs>[]
      seguradora: Prisma.$SeguradoraPayload<ExtArgs>[]
      tipoDeVeiculo: Prisma.$TipoDeVeiculoPayload<ExtArgs>[]
      documento: Prisma.$DocumentoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      email: string
      password: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    vitimas<T extends User$vitimasArgs<ExtArgs> = {}>(args?: Subset<T, User$vitimasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VitimaPayload<ExtArgs>, T, "findMany"> | Null>
    processos<T extends User$processosArgs<ExtArgs> = {}>(args?: Subset<T, User$processosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcessoPayload<ExtArgs>, T, "findMany"> | Null>
    fasesProcesso<T extends User$fasesProcessoArgs<ExtArgs> = {}>(args?: Subset<T, User$fasesProcessoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FaseProcessoPayload<ExtArgs>, T, "findMany"> | Null>
    tiposDeProcesso<T extends User$tiposDeProcessoArgs<ExtArgs> = {}>(args?: Subset<T, User$tiposDeProcessoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TiposDeProcessoPayload<ExtArgs>, T, "findMany"> | Null>
    prioridades<T extends User$prioridadesArgs<ExtArgs> = {}>(args?: Subset<T, User$prioridadesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrioridadesPayload<ExtArgs>, T, "findMany"> | Null>
    parceiro<T extends User$parceiroArgs<ExtArgs> = {}>(args?: Subset<T, User$parceiroArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParceiroPayload<ExtArgs>, T, "findMany"> | Null>
    cliente<T extends User$clienteArgs<ExtArgs> = {}>(args?: Subset<T, User$clienteArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findMany"> | Null>
    banco<T extends User$bancoArgs<ExtArgs> = {}>(args?: Subset<T, User$bancoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BancoPayload<ExtArgs>, T, "findMany"> | Null>
    seguradora<T extends User$seguradoraArgs<ExtArgs> = {}>(args?: Subset<T, User$seguradoraArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeguradoraPayload<ExtArgs>, T, "findMany"> | Null>
    tipoDeVeiculo<T extends User$tipoDeVeiculoArgs<ExtArgs> = {}>(args?: Subset<T, User$tipoDeVeiculoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TipoDeVeiculoPayload<ExtArgs>, T, "findMany"> | Null>
    documento<T extends User$documentoArgs<ExtArgs> = {}>(args?: Subset<T, User$documentoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.vitimas
   */
  export type User$vitimasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vitima
     */
    select?: VitimaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VitimaInclude<ExtArgs> | null
    where?: VitimaWhereInput
    orderBy?: VitimaOrderByWithRelationInput | VitimaOrderByWithRelationInput[]
    cursor?: VitimaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VitimaScalarFieldEnum | VitimaScalarFieldEnum[]
  }

  /**
   * User.processos
   */
  export type User$processosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Processo
     */
    select?: ProcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessoInclude<ExtArgs> | null
    where?: ProcessoWhereInput
    orderBy?: ProcessoOrderByWithRelationInput | ProcessoOrderByWithRelationInput[]
    cursor?: ProcessoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProcessoScalarFieldEnum | ProcessoScalarFieldEnum[]
  }

  /**
   * User.fasesProcesso
   */
  export type User$fasesProcessoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaseProcesso
     */
    select?: FaseProcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaseProcessoInclude<ExtArgs> | null
    where?: FaseProcessoWhereInput
    orderBy?: FaseProcessoOrderByWithRelationInput | FaseProcessoOrderByWithRelationInput[]
    cursor?: FaseProcessoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FaseProcessoScalarFieldEnum | FaseProcessoScalarFieldEnum[]
  }

  /**
   * User.tiposDeProcesso
   */
  export type User$tiposDeProcessoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TiposDeProcesso
     */
    select?: TiposDeProcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TiposDeProcessoInclude<ExtArgs> | null
    where?: TiposDeProcessoWhereInput
    orderBy?: TiposDeProcessoOrderByWithRelationInput | TiposDeProcessoOrderByWithRelationInput[]
    cursor?: TiposDeProcessoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TiposDeProcessoScalarFieldEnum | TiposDeProcessoScalarFieldEnum[]
  }

  /**
   * User.prioridades
   */
  export type User$prioridadesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prioridades
     */
    select?: PrioridadesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrioridadesInclude<ExtArgs> | null
    where?: PrioridadesWhereInput
    orderBy?: PrioridadesOrderByWithRelationInput | PrioridadesOrderByWithRelationInput[]
    cursor?: PrioridadesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PrioridadesScalarFieldEnum | PrioridadesScalarFieldEnum[]
  }

  /**
   * User.parceiro
   */
  export type User$parceiroArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parceiro
     */
    select?: ParceiroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParceiroInclude<ExtArgs> | null
    where?: ParceiroWhereInput
    orderBy?: ParceiroOrderByWithRelationInput | ParceiroOrderByWithRelationInput[]
    cursor?: ParceiroWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ParceiroScalarFieldEnum | ParceiroScalarFieldEnum[]
  }

  /**
   * User.cliente
   */
  export type User$clienteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    where?: ClienteWhereInput
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    cursor?: ClienteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * User.banco
   */
  export type User$bancoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banco
     */
    select?: BancoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancoInclude<ExtArgs> | null
    where?: BancoWhereInput
    orderBy?: BancoOrderByWithRelationInput | BancoOrderByWithRelationInput[]
    cursor?: BancoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BancoScalarFieldEnum | BancoScalarFieldEnum[]
  }

  /**
   * User.seguradora
   */
  export type User$seguradoraArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seguradora
     */
    select?: SeguradoraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeguradoraInclude<ExtArgs> | null
    where?: SeguradoraWhereInput
    orderBy?: SeguradoraOrderByWithRelationInput | SeguradoraOrderByWithRelationInput[]
    cursor?: SeguradoraWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SeguradoraScalarFieldEnum | SeguradoraScalarFieldEnum[]
  }

  /**
   * User.tipoDeVeiculo
   */
  export type User$tipoDeVeiculoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoDeVeiculo
     */
    select?: TipoDeVeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoDeVeiculoInclude<ExtArgs> | null
    where?: TipoDeVeiculoWhereInput
    orderBy?: TipoDeVeiculoOrderByWithRelationInput | TipoDeVeiculoOrderByWithRelationInput[]
    cursor?: TipoDeVeiculoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TipoDeVeiculoScalarFieldEnum | TipoDeVeiculoScalarFieldEnum[]
  }

  /**
   * User.documento
   */
  export type User$documentoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoInclude<ExtArgs> | null
    where?: DocumentoWhereInput
    orderBy?: DocumentoOrderByWithRelationInput | DocumentoOrderByWithRelationInput[]
    cursor?: DocumentoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentoScalarFieldEnum | DocumentoScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Vitima
   */

  export type AggregateVitima = {
    _count: VitimaCountAggregateOutputType | null
    _avg: VitimaAvgAggregateOutputType | null
    _sum: VitimaSumAggregateOutputType | null
    _min: VitimaMinAggregateOutputType | null
    _max: VitimaMaxAggregateOutputType | null
  }

  export type VitimaAvgAggregateOutputType = {
    id: number | null
    cpf: number | null
    rg: number | null
    renda_mensal: number | null
    cep: number | null
    numero: number | null
    telefone01: number | null
    telefone02: number | null
  }

  export type VitimaSumAggregateOutputType = {
    id: number | null
    cpf: number | null
    rg: number | null
    renda_mensal: number | null
    cep: number | null
    numero: number | null
    telefone01: number | null
    telefone02: number | null
  }

  export type VitimaMinAggregateOutputType = {
    id: number | null
    nome: string | null
    cpf: number | null
    rg: number | null
    data_nascimento: Date | null
    data_emissao: Date | null
    orgao_expedidor: string | null
    activo: boolean | null
    profissao: string | null
    renda_mensal: number | null
    cep: number | null
    uf: string | null
    endereco: string | null
    numero: number | null
    sexo: string | null
    complemento: string | null
    bairro: string | null
    cidade: string | null
    email: string | null
    telefone01: number | null
    telefone02: number | null
    userId: string | null
  }

  export type VitimaMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    cpf: number | null
    rg: number | null
    data_nascimento: Date | null
    data_emissao: Date | null
    orgao_expedidor: string | null
    activo: boolean | null
    profissao: string | null
    renda_mensal: number | null
    cep: number | null
    uf: string | null
    endereco: string | null
    numero: number | null
    sexo: string | null
    complemento: string | null
    bairro: string | null
    cidade: string | null
    email: string | null
    telefone01: number | null
    telefone02: number | null
    userId: string | null
  }

  export type VitimaCountAggregateOutputType = {
    id: number
    nome: number
    cpf: number
    rg: number
    data_nascimento: number
    data_emissao: number
    orgao_expedidor: number
    activo: number
    profissao: number
    renda_mensal: number
    cep: number
    uf: number
    endereco: number
    numero: number
    sexo: number
    complemento: number
    bairro: number
    cidade: number
    email: number
    telefone01: number
    telefone02: number
    userId: number
    _all: number
  }


  export type VitimaAvgAggregateInputType = {
    id?: true
    cpf?: true
    rg?: true
    renda_mensal?: true
    cep?: true
    numero?: true
    telefone01?: true
    telefone02?: true
  }

  export type VitimaSumAggregateInputType = {
    id?: true
    cpf?: true
    rg?: true
    renda_mensal?: true
    cep?: true
    numero?: true
    telefone01?: true
    telefone02?: true
  }

  export type VitimaMinAggregateInputType = {
    id?: true
    nome?: true
    cpf?: true
    rg?: true
    data_nascimento?: true
    data_emissao?: true
    orgao_expedidor?: true
    activo?: true
    profissao?: true
    renda_mensal?: true
    cep?: true
    uf?: true
    endereco?: true
    numero?: true
    sexo?: true
    complemento?: true
    bairro?: true
    cidade?: true
    email?: true
    telefone01?: true
    telefone02?: true
    userId?: true
  }

  export type VitimaMaxAggregateInputType = {
    id?: true
    nome?: true
    cpf?: true
    rg?: true
    data_nascimento?: true
    data_emissao?: true
    orgao_expedidor?: true
    activo?: true
    profissao?: true
    renda_mensal?: true
    cep?: true
    uf?: true
    endereco?: true
    numero?: true
    sexo?: true
    complemento?: true
    bairro?: true
    cidade?: true
    email?: true
    telefone01?: true
    telefone02?: true
    userId?: true
  }

  export type VitimaCountAggregateInputType = {
    id?: true
    nome?: true
    cpf?: true
    rg?: true
    data_nascimento?: true
    data_emissao?: true
    orgao_expedidor?: true
    activo?: true
    profissao?: true
    renda_mensal?: true
    cep?: true
    uf?: true
    endereco?: true
    numero?: true
    sexo?: true
    complemento?: true
    bairro?: true
    cidade?: true
    email?: true
    telefone01?: true
    telefone02?: true
    userId?: true
    _all?: true
  }

  export type VitimaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vitima to aggregate.
     */
    where?: VitimaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vitimas to fetch.
     */
    orderBy?: VitimaOrderByWithRelationInput | VitimaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VitimaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vitimas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vitimas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Vitimas
    **/
    _count?: true | VitimaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VitimaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VitimaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VitimaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VitimaMaxAggregateInputType
  }

  export type GetVitimaAggregateType<T extends VitimaAggregateArgs> = {
        [P in keyof T & keyof AggregateVitima]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVitima[P]>
      : GetScalarType<T[P], AggregateVitima[P]>
  }




  export type VitimaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VitimaWhereInput
    orderBy?: VitimaOrderByWithAggregationInput | VitimaOrderByWithAggregationInput[]
    by: VitimaScalarFieldEnum[] | VitimaScalarFieldEnum
    having?: VitimaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VitimaCountAggregateInputType | true
    _avg?: VitimaAvgAggregateInputType
    _sum?: VitimaSumAggregateInputType
    _min?: VitimaMinAggregateInputType
    _max?: VitimaMaxAggregateInputType
  }

  export type VitimaGroupByOutputType = {
    id: number
    nome: string
    cpf: number
    rg: number
    data_nascimento: Date
    data_emissao: Date
    orgao_expedidor: string
    activo: boolean
    profissao: string
    renda_mensal: number
    cep: number
    uf: string
    endereco: string
    numero: number
    sexo: string
    complemento: string
    bairro: string
    cidade: string
    email: string
    telefone01: number
    telefone02: number
    userId: string
    _count: VitimaCountAggregateOutputType | null
    _avg: VitimaAvgAggregateOutputType | null
    _sum: VitimaSumAggregateOutputType | null
    _min: VitimaMinAggregateOutputType | null
    _max: VitimaMaxAggregateOutputType | null
  }

  type GetVitimaGroupByPayload<T extends VitimaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VitimaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VitimaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VitimaGroupByOutputType[P]>
            : GetScalarType<T[P], VitimaGroupByOutputType[P]>
        }
      >
    >


  export type VitimaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    cpf?: boolean
    rg?: boolean
    data_nascimento?: boolean
    data_emissao?: boolean
    orgao_expedidor?: boolean
    activo?: boolean
    profissao?: boolean
    renda_mensal?: boolean
    cep?: boolean
    uf?: boolean
    endereco?: boolean
    numero?: boolean
    sexo?: boolean
    complemento?: boolean
    bairro?: boolean
    cidade?: boolean
    email?: boolean
    telefone01?: boolean
    telefone02?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    processos?: boolean | Vitima$processosArgs<ExtArgs>
    _count?: boolean | VitimaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vitima"]>


  export type VitimaSelectScalar = {
    id?: boolean
    nome?: boolean
    cpf?: boolean
    rg?: boolean
    data_nascimento?: boolean
    data_emissao?: boolean
    orgao_expedidor?: boolean
    activo?: boolean
    profissao?: boolean
    renda_mensal?: boolean
    cep?: boolean
    uf?: boolean
    endereco?: boolean
    numero?: boolean
    sexo?: boolean
    complemento?: boolean
    bairro?: boolean
    cidade?: boolean
    email?: boolean
    telefone01?: boolean
    telefone02?: boolean
    userId?: boolean
  }

  export type VitimaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    processos?: boolean | Vitima$processosArgs<ExtArgs>
    _count?: boolean | VitimaCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $VitimaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Vitima"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      processos: Prisma.$ProcessoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      cpf: number
      rg: number
      data_nascimento: Date
      data_emissao: Date
      orgao_expedidor: string
      activo: boolean
      profissao: string
      renda_mensal: number
      cep: number
      uf: string
      endereco: string
      numero: number
      sexo: string
      complemento: string
      bairro: string
      cidade: string
      email: string
      telefone01: number
      telefone02: number
      userId: string
    }, ExtArgs["result"]["vitima"]>
    composites: {}
  }

  type VitimaGetPayload<S extends boolean | null | undefined | VitimaDefaultArgs> = $Result.GetResult<Prisma.$VitimaPayload, S>

  type VitimaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VitimaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VitimaCountAggregateInputType | true
    }

  export interface VitimaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Vitima'], meta: { name: 'Vitima' } }
    /**
     * Find zero or one Vitima that matches the filter.
     * @param {VitimaFindUniqueArgs} args - Arguments to find a Vitima
     * @example
     * // Get one Vitima
     * const vitima = await prisma.vitima.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VitimaFindUniqueArgs>(args: SelectSubset<T, VitimaFindUniqueArgs<ExtArgs>>): Prisma__VitimaClient<$Result.GetResult<Prisma.$VitimaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Vitima that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VitimaFindUniqueOrThrowArgs} args - Arguments to find a Vitima
     * @example
     * // Get one Vitima
     * const vitima = await prisma.vitima.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VitimaFindUniqueOrThrowArgs>(args: SelectSubset<T, VitimaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VitimaClient<$Result.GetResult<Prisma.$VitimaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Vitima that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VitimaFindFirstArgs} args - Arguments to find a Vitima
     * @example
     * // Get one Vitima
     * const vitima = await prisma.vitima.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VitimaFindFirstArgs>(args?: SelectSubset<T, VitimaFindFirstArgs<ExtArgs>>): Prisma__VitimaClient<$Result.GetResult<Prisma.$VitimaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Vitima that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VitimaFindFirstOrThrowArgs} args - Arguments to find a Vitima
     * @example
     * // Get one Vitima
     * const vitima = await prisma.vitima.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VitimaFindFirstOrThrowArgs>(args?: SelectSubset<T, VitimaFindFirstOrThrowArgs<ExtArgs>>): Prisma__VitimaClient<$Result.GetResult<Prisma.$VitimaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Vitimas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VitimaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vitimas
     * const vitimas = await prisma.vitima.findMany()
     * 
     * // Get first 10 Vitimas
     * const vitimas = await prisma.vitima.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vitimaWithIdOnly = await prisma.vitima.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VitimaFindManyArgs>(args?: SelectSubset<T, VitimaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VitimaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Vitima.
     * @param {VitimaCreateArgs} args - Arguments to create a Vitima.
     * @example
     * // Create one Vitima
     * const Vitima = await prisma.vitima.create({
     *   data: {
     *     // ... data to create a Vitima
     *   }
     * })
     * 
     */
    create<T extends VitimaCreateArgs>(args: SelectSubset<T, VitimaCreateArgs<ExtArgs>>): Prisma__VitimaClient<$Result.GetResult<Prisma.$VitimaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Vitimas.
     * @param {VitimaCreateManyArgs} args - Arguments to create many Vitimas.
     * @example
     * // Create many Vitimas
     * const vitima = await prisma.vitima.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VitimaCreateManyArgs>(args?: SelectSubset<T, VitimaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Vitima.
     * @param {VitimaDeleteArgs} args - Arguments to delete one Vitima.
     * @example
     * // Delete one Vitima
     * const Vitima = await prisma.vitima.delete({
     *   where: {
     *     // ... filter to delete one Vitima
     *   }
     * })
     * 
     */
    delete<T extends VitimaDeleteArgs>(args: SelectSubset<T, VitimaDeleteArgs<ExtArgs>>): Prisma__VitimaClient<$Result.GetResult<Prisma.$VitimaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Vitima.
     * @param {VitimaUpdateArgs} args - Arguments to update one Vitima.
     * @example
     * // Update one Vitima
     * const vitima = await prisma.vitima.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VitimaUpdateArgs>(args: SelectSubset<T, VitimaUpdateArgs<ExtArgs>>): Prisma__VitimaClient<$Result.GetResult<Prisma.$VitimaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Vitimas.
     * @param {VitimaDeleteManyArgs} args - Arguments to filter Vitimas to delete.
     * @example
     * // Delete a few Vitimas
     * const { count } = await prisma.vitima.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VitimaDeleteManyArgs>(args?: SelectSubset<T, VitimaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vitimas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VitimaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vitimas
     * const vitima = await prisma.vitima.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VitimaUpdateManyArgs>(args: SelectSubset<T, VitimaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Vitima.
     * @param {VitimaUpsertArgs} args - Arguments to update or create a Vitima.
     * @example
     * // Update or create a Vitima
     * const vitima = await prisma.vitima.upsert({
     *   create: {
     *     // ... data to create a Vitima
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vitima we want to update
     *   }
     * })
     */
    upsert<T extends VitimaUpsertArgs>(args: SelectSubset<T, VitimaUpsertArgs<ExtArgs>>): Prisma__VitimaClient<$Result.GetResult<Prisma.$VitimaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Vitimas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VitimaCountArgs} args - Arguments to filter Vitimas to count.
     * @example
     * // Count the number of Vitimas
     * const count = await prisma.vitima.count({
     *   where: {
     *     // ... the filter for the Vitimas we want to count
     *   }
     * })
    **/
    count<T extends VitimaCountArgs>(
      args?: Subset<T, VitimaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VitimaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vitima.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VitimaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VitimaAggregateArgs>(args: Subset<T, VitimaAggregateArgs>): Prisma.PrismaPromise<GetVitimaAggregateType<T>>

    /**
     * Group by Vitima.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VitimaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VitimaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VitimaGroupByArgs['orderBy'] }
        : { orderBy?: VitimaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VitimaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVitimaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Vitima model
   */
  readonly fields: VitimaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Vitima.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VitimaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    processos<T extends Vitima$processosArgs<ExtArgs> = {}>(args?: Subset<T, Vitima$processosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcessoPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Vitima model
   */ 
  interface VitimaFieldRefs {
    readonly id: FieldRef<"Vitima", 'Int'>
    readonly nome: FieldRef<"Vitima", 'String'>
    readonly cpf: FieldRef<"Vitima", 'Int'>
    readonly rg: FieldRef<"Vitima", 'Int'>
    readonly data_nascimento: FieldRef<"Vitima", 'DateTime'>
    readonly data_emissao: FieldRef<"Vitima", 'DateTime'>
    readonly orgao_expedidor: FieldRef<"Vitima", 'String'>
    readonly activo: FieldRef<"Vitima", 'Boolean'>
    readonly profissao: FieldRef<"Vitima", 'String'>
    readonly renda_mensal: FieldRef<"Vitima", 'Int'>
    readonly cep: FieldRef<"Vitima", 'Int'>
    readonly uf: FieldRef<"Vitima", 'String'>
    readonly endereco: FieldRef<"Vitima", 'String'>
    readonly numero: FieldRef<"Vitima", 'Int'>
    readonly sexo: FieldRef<"Vitima", 'String'>
    readonly complemento: FieldRef<"Vitima", 'String'>
    readonly bairro: FieldRef<"Vitima", 'String'>
    readonly cidade: FieldRef<"Vitima", 'String'>
    readonly email: FieldRef<"Vitima", 'String'>
    readonly telefone01: FieldRef<"Vitima", 'Int'>
    readonly telefone02: FieldRef<"Vitima", 'Int'>
    readonly userId: FieldRef<"Vitima", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Vitima findUnique
   */
  export type VitimaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vitima
     */
    select?: VitimaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VitimaInclude<ExtArgs> | null
    /**
     * Filter, which Vitima to fetch.
     */
    where: VitimaWhereUniqueInput
  }

  /**
   * Vitima findUniqueOrThrow
   */
  export type VitimaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vitima
     */
    select?: VitimaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VitimaInclude<ExtArgs> | null
    /**
     * Filter, which Vitima to fetch.
     */
    where: VitimaWhereUniqueInput
  }

  /**
   * Vitima findFirst
   */
  export type VitimaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vitima
     */
    select?: VitimaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VitimaInclude<ExtArgs> | null
    /**
     * Filter, which Vitima to fetch.
     */
    where?: VitimaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vitimas to fetch.
     */
    orderBy?: VitimaOrderByWithRelationInput | VitimaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vitimas.
     */
    cursor?: VitimaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vitimas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vitimas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vitimas.
     */
    distinct?: VitimaScalarFieldEnum | VitimaScalarFieldEnum[]
  }

  /**
   * Vitima findFirstOrThrow
   */
  export type VitimaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vitima
     */
    select?: VitimaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VitimaInclude<ExtArgs> | null
    /**
     * Filter, which Vitima to fetch.
     */
    where?: VitimaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vitimas to fetch.
     */
    orderBy?: VitimaOrderByWithRelationInput | VitimaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vitimas.
     */
    cursor?: VitimaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vitimas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vitimas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vitimas.
     */
    distinct?: VitimaScalarFieldEnum | VitimaScalarFieldEnum[]
  }

  /**
   * Vitima findMany
   */
  export type VitimaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vitima
     */
    select?: VitimaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VitimaInclude<ExtArgs> | null
    /**
     * Filter, which Vitimas to fetch.
     */
    where?: VitimaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vitimas to fetch.
     */
    orderBy?: VitimaOrderByWithRelationInput | VitimaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Vitimas.
     */
    cursor?: VitimaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vitimas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vitimas.
     */
    skip?: number
    distinct?: VitimaScalarFieldEnum | VitimaScalarFieldEnum[]
  }

  /**
   * Vitima create
   */
  export type VitimaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vitima
     */
    select?: VitimaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VitimaInclude<ExtArgs> | null
    /**
     * The data needed to create a Vitima.
     */
    data: XOR<VitimaCreateInput, VitimaUncheckedCreateInput>
  }

  /**
   * Vitima createMany
   */
  export type VitimaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Vitimas.
     */
    data: VitimaCreateManyInput | VitimaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Vitima update
   */
  export type VitimaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vitima
     */
    select?: VitimaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VitimaInclude<ExtArgs> | null
    /**
     * The data needed to update a Vitima.
     */
    data: XOR<VitimaUpdateInput, VitimaUncheckedUpdateInput>
    /**
     * Choose, which Vitima to update.
     */
    where: VitimaWhereUniqueInput
  }

  /**
   * Vitima updateMany
   */
  export type VitimaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Vitimas.
     */
    data: XOR<VitimaUpdateManyMutationInput, VitimaUncheckedUpdateManyInput>
    /**
     * Filter which Vitimas to update
     */
    where?: VitimaWhereInput
  }

  /**
   * Vitima upsert
   */
  export type VitimaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vitima
     */
    select?: VitimaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VitimaInclude<ExtArgs> | null
    /**
     * The filter to search for the Vitima to update in case it exists.
     */
    where: VitimaWhereUniqueInput
    /**
     * In case the Vitima found by the `where` argument doesn't exist, create a new Vitima with this data.
     */
    create: XOR<VitimaCreateInput, VitimaUncheckedCreateInput>
    /**
     * In case the Vitima was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VitimaUpdateInput, VitimaUncheckedUpdateInput>
  }

  /**
   * Vitima delete
   */
  export type VitimaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vitima
     */
    select?: VitimaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VitimaInclude<ExtArgs> | null
    /**
     * Filter which Vitima to delete.
     */
    where: VitimaWhereUniqueInput
  }

  /**
   * Vitima deleteMany
   */
  export type VitimaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vitimas to delete
     */
    where?: VitimaWhereInput
  }

  /**
   * Vitima.processos
   */
  export type Vitima$processosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Processo
     */
    select?: ProcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessoInclude<ExtArgs> | null
    where?: ProcessoWhereInput
    orderBy?: ProcessoOrderByWithRelationInput | ProcessoOrderByWithRelationInput[]
    cursor?: ProcessoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProcessoScalarFieldEnum | ProcessoScalarFieldEnum[]
  }

  /**
   * Vitima without action
   */
  export type VitimaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vitima
     */
    select?: VitimaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VitimaInclude<ExtArgs> | null
  }


  /**
   * Model Processo
   */

  export type AggregateProcesso = {
    _count: ProcessoCountAggregateOutputType | null
    _avg: ProcessoAvgAggregateOutputType | null
    _sum: ProcessoSumAggregateOutputType | null
    _min: ProcessoMinAggregateOutputType | null
    _max: ProcessoMaxAggregateOutputType | null
  }

  export type ProcessoAvgAggregateOutputType = {
    id: number | null
    tipoProcessoId: number | null
    faseProcessoId: number | null
    vitimaId: number | null
  }

  export type ProcessoSumAggregateOutputType = {
    id: number | null
    tipoProcessoId: number | null
    faseProcessoId: number | null
    vitimaId: number | null
  }

  export type ProcessoMinAggregateOutputType = {
    id: number | null
    numero: string | null
    tipoProcessoId: number | null
    faseProcessoId: number | null
    vitimaId: number | null
    userId: string | null
    status: string | null
    criado_em: Date | null
    atualizado_em: Date | null
  }

  export type ProcessoMaxAggregateOutputType = {
    id: number | null
    numero: string | null
    tipoProcessoId: number | null
    faseProcessoId: number | null
    vitimaId: number | null
    userId: string | null
    status: string | null
    criado_em: Date | null
    atualizado_em: Date | null
  }

  export type ProcessoCountAggregateOutputType = {
    id: number
    numero: number
    tipoProcessoId: number
    faseProcessoId: number
    vitimaId: number
    userId: number
    status: number
    criado_em: number
    atualizado_em: number
    _all: number
  }


  export type ProcessoAvgAggregateInputType = {
    id?: true
    tipoProcessoId?: true
    faseProcessoId?: true
    vitimaId?: true
  }

  export type ProcessoSumAggregateInputType = {
    id?: true
    tipoProcessoId?: true
    faseProcessoId?: true
    vitimaId?: true
  }

  export type ProcessoMinAggregateInputType = {
    id?: true
    numero?: true
    tipoProcessoId?: true
    faseProcessoId?: true
    vitimaId?: true
    userId?: true
    status?: true
    criado_em?: true
    atualizado_em?: true
  }

  export type ProcessoMaxAggregateInputType = {
    id?: true
    numero?: true
    tipoProcessoId?: true
    faseProcessoId?: true
    vitimaId?: true
    userId?: true
    status?: true
    criado_em?: true
    atualizado_em?: true
  }

  export type ProcessoCountAggregateInputType = {
    id?: true
    numero?: true
    tipoProcessoId?: true
    faseProcessoId?: true
    vitimaId?: true
    userId?: true
    status?: true
    criado_em?: true
    atualizado_em?: true
    _all?: true
  }

  export type ProcessoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Processo to aggregate.
     */
    where?: ProcessoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Processos to fetch.
     */
    orderBy?: ProcessoOrderByWithRelationInput | ProcessoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProcessoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Processos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Processos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Processos
    **/
    _count?: true | ProcessoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProcessoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProcessoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProcessoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProcessoMaxAggregateInputType
  }

  export type GetProcessoAggregateType<T extends ProcessoAggregateArgs> = {
        [P in keyof T & keyof AggregateProcesso]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProcesso[P]>
      : GetScalarType<T[P], AggregateProcesso[P]>
  }




  export type ProcessoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProcessoWhereInput
    orderBy?: ProcessoOrderByWithAggregationInput | ProcessoOrderByWithAggregationInput[]
    by: ProcessoScalarFieldEnum[] | ProcessoScalarFieldEnum
    having?: ProcessoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProcessoCountAggregateInputType | true
    _avg?: ProcessoAvgAggregateInputType
    _sum?: ProcessoSumAggregateInputType
    _min?: ProcessoMinAggregateInputType
    _max?: ProcessoMaxAggregateInputType
  }

  export type ProcessoGroupByOutputType = {
    id: number
    numero: string
    tipoProcessoId: number
    faseProcessoId: number
    vitimaId: number
    userId: string
    status: string
    criado_em: Date
    atualizado_em: Date
    _count: ProcessoCountAggregateOutputType | null
    _avg: ProcessoAvgAggregateOutputType | null
    _sum: ProcessoSumAggregateOutputType | null
    _min: ProcessoMinAggregateOutputType | null
    _max: ProcessoMaxAggregateOutputType | null
  }

  type GetProcessoGroupByPayload<T extends ProcessoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProcessoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProcessoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProcessoGroupByOutputType[P]>
            : GetScalarType<T[P], ProcessoGroupByOutputType[P]>
        }
      >
    >


  export type ProcessoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    numero?: boolean
    tipoProcessoId?: boolean
    faseProcessoId?: boolean
    vitimaId?: boolean
    userId?: boolean
    status?: boolean
    criado_em?: boolean
    atualizado_em?: boolean
    tipoProcesso?: boolean | TiposDeProcessoDefaultArgs<ExtArgs>
    faseProcesso?: boolean | FaseProcessoDefaultArgs<ExtArgs>
    vitima?: boolean | VitimaDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["processo"]>


  export type ProcessoSelectScalar = {
    id?: boolean
    numero?: boolean
    tipoProcessoId?: boolean
    faseProcessoId?: boolean
    vitimaId?: boolean
    userId?: boolean
    status?: boolean
    criado_em?: boolean
    atualizado_em?: boolean
  }

  export type ProcessoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tipoProcesso?: boolean | TiposDeProcessoDefaultArgs<ExtArgs>
    faseProcesso?: boolean | FaseProcessoDefaultArgs<ExtArgs>
    vitima?: boolean | VitimaDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ProcessoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Processo"
    objects: {
      tipoProcesso: Prisma.$TiposDeProcessoPayload<ExtArgs>
      faseProcesso: Prisma.$FaseProcessoPayload<ExtArgs>
      vitima: Prisma.$VitimaPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      numero: string
      tipoProcessoId: number
      faseProcessoId: number
      vitimaId: number
      userId: string
      status: string
      criado_em: Date
      atualizado_em: Date
    }, ExtArgs["result"]["processo"]>
    composites: {}
  }

  type ProcessoGetPayload<S extends boolean | null | undefined | ProcessoDefaultArgs> = $Result.GetResult<Prisma.$ProcessoPayload, S>

  type ProcessoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProcessoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProcessoCountAggregateInputType | true
    }

  export interface ProcessoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Processo'], meta: { name: 'Processo' } }
    /**
     * Find zero or one Processo that matches the filter.
     * @param {ProcessoFindUniqueArgs} args - Arguments to find a Processo
     * @example
     * // Get one Processo
     * const processo = await prisma.processo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProcessoFindUniqueArgs>(args: SelectSubset<T, ProcessoFindUniqueArgs<ExtArgs>>): Prisma__ProcessoClient<$Result.GetResult<Prisma.$ProcessoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Processo that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProcessoFindUniqueOrThrowArgs} args - Arguments to find a Processo
     * @example
     * // Get one Processo
     * const processo = await prisma.processo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProcessoFindUniqueOrThrowArgs>(args: SelectSubset<T, ProcessoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProcessoClient<$Result.GetResult<Prisma.$ProcessoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Processo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessoFindFirstArgs} args - Arguments to find a Processo
     * @example
     * // Get one Processo
     * const processo = await prisma.processo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProcessoFindFirstArgs>(args?: SelectSubset<T, ProcessoFindFirstArgs<ExtArgs>>): Prisma__ProcessoClient<$Result.GetResult<Prisma.$ProcessoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Processo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessoFindFirstOrThrowArgs} args - Arguments to find a Processo
     * @example
     * // Get one Processo
     * const processo = await prisma.processo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProcessoFindFirstOrThrowArgs>(args?: SelectSubset<T, ProcessoFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProcessoClient<$Result.GetResult<Prisma.$ProcessoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Processos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Processos
     * const processos = await prisma.processo.findMany()
     * 
     * // Get first 10 Processos
     * const processos = await prisma.processo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const processoWithIdOnly = await prisma.processo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProcessoFindManyArgs>(args?: SelectSubset<T, ProcessoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcessoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Processo.
     * @param {ProcessoCreateArgs} args - Arguments to create a Processo.
     * @example
     * // Create one Processo
     * const Processo = await prisma.processo.create({
     *   data: {
     *     // ... data to create a Processo
     *   }
     * })
     * 
     */
    create<T extends ProcessoCreateArgs>(args: SelectSubset<T, ProcessoCreateArgs<ExtArgs>>): Prisma__ProcessoClient<$Result.GetResult<Prisma.$ProcessoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Processos.
     * @param {ProcessoCreateManyArgs} args - Arguments to create many Processos.
     * @example
     * // Create many Processos
     * const processo = await prisma.processo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProcessoCreateManyArgs>(args?: SelectSubset<T, ProcessoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Processo.
     * @param {ProcessoDeleteArgs} args - Arguments to delete one Processo.
     * @example
     * // Delete one Processo
     * const Processo = await prisma.processo.delete({
     *   where: {
     *     // ... filter to delete one Processo
     *   }
     * })
     * 
     */
    delete<T extends ProcessoDeleteArgs>(args: SelectSubset<T, ProcessoDeleteArgs<ExtArgs>>): Prisma__ProcessoClient<$Result.GetResult<Prisma.$ProcessoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Processo.
     * @param {ProcessoUpdateArgs} args - Arguments to update one Processo.
     * @example
     * // Update one Processo
     * const processo = await prisma.processo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProcessoUpdateArgs>(args: SelectSubset<T, ProcessoUpdateArgs<ExtArgs>>): Prisma__ProcessoClient<$Result.GetResult<Prisma.$ProcessoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Processos.
     * @param {ProcessoDeleteManyArgs} args - Arguments to filter Processos to delete.
     * @example
     * // Delete a few Processos
     * const { count } = await prisma.processo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProcessoDeleteManyArgs>(args?: SelectSubset<T, ProcessoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Processos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Processos
     * const processo = await prisma.processo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProcessoUpdateManyArgs>(args: SelectSubset<T, ProcessoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Processo.
     * @param {ProcessoUpsertArgs} args - Arguments to update or create a Processo.
     * @example
     * // Update or create a Processo
     * const processo = await prisma.processo.upsert({
     *   create: {
     *     // ... data to create a Processo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Processo we want to update
     *   }
     * })
     */
    upsert<T extends ProcessoUpsertArgs>(args: SelectSubset<T, ProcessoUpsertArgs<ExtArgs>>): Prisma__ProcessoClient<$Result.GetResult<Prisma.$ProcessoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Processos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessoCountArgs} args - Arguments to filter Processos to count.
     * @example
     * // Count the number of Processos
     * const count = await prisma.processo.count({
     *   where: {
     *     // ... the filter for the Processos we want to count
     *   }
     * })
    **/
    count<T extends ProcessoCountArgs>(
      args?: Subset<T, ProcessoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProcessoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Processo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProcessoAggregateArgs>(args: Subset<T, ProcessoAggregateArgs>): Prisma.PrismaPromise<GetProcessoAggregateType<T>>

    /**
     * Group by Processo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProcessoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProcessoGroupByArgs['orderBy'] }
        : { orderBy?: ProcessoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProcessoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProcessoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Processo model
   */
  readonly fields: ProcessoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Processo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProcessoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tipoProcesso<T extends TiposDeProcessoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TiposDeProcessoDefaultArgs<ExtArgs>>): Prisma__TiposDeProcessoClient<$Result.GetResult<Prisma.$TiposDeProcessoPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    faseProcesso<T extends FaseProcessoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FaseProcessoDefaultArgs<ExtArgs>>): Prisma__FaseProcessoClient<$Result.GetResult<Prisma.$FaseProcessoPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    vitima<T extends VitimaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VitimaDefaultArgs<ExtArgs>>): Prisma__VitimaClient<$Result.GetResult<Prisma.$VitimaPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Processo model
   */ 
  interface ProcessoFieldRefs {
    readonly id: FieldRef<"Processo", 'Int'>
    readonly numero: FieldRef<"Processo", 'String'>
    readonly tipoProcessoId: FieldRef<"Processo", 'Int'>
    readonly faseProcessoId: FieldRef<"Processo", 'Int'>
    readonly vitimaId: FieldRef<"Processo", 'Int'>
    readonly userId: FieldRef<"Processo", 'String'>
    readonly status: FieldRef<"Processo", 'String'>
    readonly criado_em: FieldRef<"Processo", 'DateTime'>
    readonly atualizado_em: FieldRef<"Processo", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Processo findUnique
   */
  export type ProcessoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Processo
     */
    select?: ProcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessoInclude<ExtArgs> | null
    /**
     * Filter, which Processo to fetch.
     */
    where: ProcessoWhereUniqueInput
  }

  /**
   * Processo findUniqueOrThrow
   */
  export type ProcessoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Processo
     */
    select?: ProcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessoInclude<ExtArgs> | null
    /**
     * Filter, which Processo to fetch.
     */
    where: ProcessoWhereUniqueInput
  }

  /**
   * Processo findFirst
   */
  export type ProcessoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Processo
     */
    select?: ProcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessoInclude<ExtArgs> | null
    /**
     * Filter, which Processo to fetch.
     */
    where?: ProcessoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Processos to fetch.
     */
    orderBy?: ProcessoOrderByWithRelationInput | ProcessoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Processos.
     */
    cursor?: ProcessoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Processos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Processos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Processos.
     */
    distinct?: ProcessoScalarFieldEnum | ProcessoScalarFieldEnum[]
  }

  /**
   * Processo findFirstOrThrow
   */
  export type ProcessoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Processo
     */
    select?: ProcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessoInclude<ExtArgs> | null
    /**
     * Filter, which Processo to fetch.
     */
    where?: ProcessoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Processos to fetch.
     */
    orderBy?: ProcessoOrderByWithRelationInput | ProcessoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Processos.
     */
    cursor?: ProcessoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Processos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Processos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Processos.
     */
    distinct?: ProcessoScalarFieldEnum | ProcessoScalarFieldEnum[]
  }

  /**
   * Processo findMany
   */
  export type ProcessoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Processo
     */
    select?: ProcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessoInclude<ExtArgs> | null
    /**
     * Filter, which Processos to fetch.
     */
    where?: ProcessoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Processos to fetch.
     */
    orderBy?: ProcessoOrderByWithRelationInput | ProcessoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Processos.
     */
    cursor?: ProcessoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Processos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Processos.
     */
    skip?: number
    distinct?: ProcessoScalarFieldEnum | ProcessoScalarFieldEnum[]
  }

  /**
   * Processo create
   */
  export type ProcessoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Processo
     */
    select?: ProcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessoInclude<ExtArgs> | null
    /**
     * The data needed to create a Processo.
     */
    data: XOR<ProcessoCreateInput, ProcessoUncheckedCreateInput>
  }

  /**
   * Processo createMany
   */
  export type ProcessoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Processos.
     */
    data: ProcessoCreateManyInput | ProcessoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Processo update
   */
  export type ProcessoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Processo
     */
    select?: ProcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessoInclude<ExtArgs> | null
    /**
     * The data needed to update a Processo.
     */
    data: XOR<ProcessoUpdateInput, ProcessoUncheckedUpdateInput>
    /**
     * Choose, which Processo to update.
     */
    where: ProcessoWhereUniqueInput
  }

  /**
   * Processo updateMany
   */
  export type ProcessoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Processos.
     */
    data: XOR<ProcessoUpdateManyMutationInput, ProcessoUncheckedUpdateManyInput>
    /**
     * Filter which Processos to update
     */
    where?: ProcessoWhereInput
  }

  /**
   * Processo upsert
   */
  export type ProcessoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Processo
     */
    select?: ProcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessoInclude<ExtArgs> | null
    /**
     * The filter to search for the Processo to update in case it exists.
     */
    where: ProcessoWhereUniqueInput
    /**
     * In case the Processo found by the `where` argument doesn't exist, create a new Processo with this data.
     */
    create: XOR<ProcessoCreateInput, ProcessoUncheckedCreateInput>
    /**
     * In case the Processo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProcessoUpdateInput, ProcessoUncheckedUpdateInput>
  }

  /**
   * Processo delete
   */
  export type ProcessoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Processo
     */
    select?: ProcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessoInclude<ExtArgs> | null
    /**
     * Filter which Processo to delete.
     */
    where: ProcessoWhereUniqueInput
  }

  /**
   * Processo deleteMany
   */
  export type ProcessoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Processos to delete
     */
    where?: ProcessoWhereInput
  }

  /**
   * Processo without action
   */
  export type ProcessoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Processo
     */
    select?: ProcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessoInclude<ExtArgs> | null
  }


  /**
   * Model TiposDeProcesso
   */

  export type AggregateTiposDeProcesso = {
    _count: TiposDeProcessoCountAggregateOutputType | null
    _avg: TiposDeProcessoAvgAggregateOutputType | null
    _sum: TiposDeProcessoSumAggregateOutputType | null
    _min: TiposDeProcessoMinAggregateOutputType | null
    _max: TiposDeProcessoMaxAggregateOutputType | null
  }

  export type TiposDeProcessoAvgAggregateOutputType = {
    id: number | null
  }

  export type TiposDeProcessoSumAggregateOutputType = {
    id: number | null
  }

  export type TiposDeProcessoMinAggregateOutputType = {
    id: number | null
    nome: string | null
    activo: boolean | null
    userId: string | null
  }

  export type TiposDeProcessoMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    activo: boolean | null
    userId: string | null
  }

  export type TiposDeProcessoCountAggregateOutputType = {
    id: number
    nome: number
    activo: number
    userId: number
    _all: number
  }


  export type TiposDeProcessoAvgAggregateInputType = {
    id?: true
  }

  export type TiposDeProcessoSumAggregateInputType = {
    id?: true
  }

  export type TiposDeProcessoMinAggregateInputType = {
    id?: true
    nome?: true
    activo?: true
    userId?: true
  }

  export type TiposDeProcessoMaxAggregateInputType = {
    id?: true
    nome?: true
    activo?: true
    userId?: true
  }

  export type TiposDeProcessoCountAggregateInputType = {
    id?: true
    nome?: true
    activo?: true
    userId?: true
    _all?: true
  }

  export type TiposDeProcessoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TiposDeProcesso to aggregate.
     */
    where?: TiposDeProcessoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TiposDeProcessos to fetch.
     */
    orderBy?: TiposDeProcessoOrderByWithRelationInput | TiposDeProcessoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TiposDeProcessoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TiposDeProcessos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TiposDeProcessos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TiposDeProcessos
    **/
    _count?: true | TiposDeProcessoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TiposDeProcessoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TiposDeProcessoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TiposDeProcessoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TiposDeProcessoMaxAggregateInputType
  }

  export type GetTiposDeProcessoAggregateType<T extends TiposDeProcessoAggregateArgs> = {
        [P in keyof T & keyof AggregateTiposDeProcesso]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTiposDeProcesso[P]>
      : GetScalarType<T[P], AggregateTiposDeProcesso[P]>
  }




  export type TiposDeProcessoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TiposDeProcessoWhereInput
    orderBy?: TiposDeProcessoOrderByWithAggregationInput | TiposDeProcessoOrderByWithAggregationInput[]
    by: TiposDeProcessoScalarFieldEnum[] | TiposDeProcessoScalarFieldEnum
    having?: TiposDeProcessoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TiposDeProcessoCountAggregateInputType | true
    _avg?: TiposDeProcessoAvgAggregateInputType
    _sum?: TiposDeProcessoSumAggregateInputType
    _min?: TiposDeProcessoMinAggregateInputType
    _max?: TiposDeProcessoMaxAggregateInputType
  }

  export type TiposDeProcessoGroupByOutputType = {
    id: number
    nome: string
    activo: boolean
    userId: string
    _count: TiposDeProcessoCountAggregateOutputType | null
    _avg: TiposDeProcessoAvgAggregateOutputType | null
    _sum: TiposDeProcessoSumAggregateOutputType | null
    _min: TiposDeProcessoMinAggregateOutputType | null
    _max: TiposDeProcessoMaxAggregateOutputType | null
  }

  type GetTiposDeProcessoGroupByPayload<T extends TiposDeProcessoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TiposDeProcessoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TiposDeProcessoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TiposDeProcessoGroupByOutputType[P]>
            : GetScalarType<T[P], TiposDeProcessoGroupByOutputType[P]>
        }
      >
    >


  export type TiposDeProcessoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    activo?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    processo?: boolean | TiposDeProcesso$processoArgs<ExtArgs>
    _count?: boolean | TiposDeProcessoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tiposDeProcesso"]>


  export type TiposDeProcessoSelectScalar = {
    id?: boolean
    nome?: boolean
    activo?: boolean
    userId?: boolean
  }

  export type TiposDeProcessoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    processo?: boolean | TiposDeProcesso$processoArgs<ExtArgs>
    _count?: boolean | TiposDeProcessoCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $TiposDeProcessoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TiposDeProcesso"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      processo: Prisma.$ProcessoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      activo: boolean
      userId: string
    }, ExtArgs["result"]["tiposDeProcesso"]>
    composites: {}
  }

  type TiposDeProcessoGetPayload<S extends boolean | null | undefined | TiposDeProcessoDefaultArgs> = $Result.GetResult<Prisma.$TiposDeProcessoPayload, S>

  type TiposDeProcessoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TiposDeProcessoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TiposDeProcessoCountAggregateInputType | true
    }

  export interface TiposDeProcessoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TiposDeProcesso'], meta: { name: 'TiposDeProcesso' } }
    /**
     * Find zero or one TiposDeProcesso that matches the filter.
     * @param {TiposDeProcessoFindUniqueArgs} args - Arguments to find a TiposDeProcesso
     * @example
     * // Get one TiposDeProcesso
     * const tiposDeProcesso = await prisma.tiposDeProcesso.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TiposDeProcessoFindUniqueArgs>(args: SelectSubset<T, TiposDeProcessoFindUniqueArgs<ExtArgs>>): Prisma__TiposDeProcessoClient<$Result.GetResult<Prisma.$TiposDeProcessoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TiposDeProcesso that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TiposDeProcessoFindUniqueOrThrowArgs} args - Arguments to find a TiposDeProcesso
     * @example
     * // Get one TiposDeProcesso
     * const tiposDeProcesso = await prisma.tiposDeProcesso.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TiposDeProcessoFindUniqueOrThrowArgs>(args: SelectSubset<T, TiposDeProcessoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TiposDeProcessoClient<$Result.GetResult<Prisma.$TiposDeProcessoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TiposDeProcesso that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TiposDeProcessoFindFirstArgs} args - Arguments to find a TiposDeProcesso
     * @example
     * // Get one TiposDeProcesso
     * const tiposDeProcesso = await prisma.tiposDeProcesso.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TiposDeProcessoFindFirstArgs>(args?: SelectSubset<T, TiposDeProcessoFindFirstArgs<ExtArgs>>): Prisma__TiposDeProcessoClient<$Result.GetResult<Prisma.$TiposDeProcessoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TiposDeProcesso that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TiposDeProcessoFindFirstOrThrowArgs} args - Arguments to find a TiposDeProcesso
     * @example
     * // Get one TiposDeProcesso
     * const tiposDeProcesso = await prisma.tiposDeProcesso.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TiposDeProcessoFindFirstOrThrowArgs>(args?: SelectSubset<T, TiposDeProcessoFindFirstOrThrowArgs<ExtArgs>>): Prisma__TiposDeProcessoClient<$Result.GetResult<Prisma.$TiposDeProcessoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TiposDeProcessos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TiposDeProcessoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TiposDeProcessos
     * const tiposDeProcessos = await prisma.tiposDeProcesso.findMany()
     * 
     * // Get first 10 TiposDeProcessos
     * const tiposDeProcessos = await prisma.tiposDeProcesso.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tiposDeProcessoWithIdOnly = await prisma.tiposDeProcesso.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TiposDeProcessoFindManyArgs>(args?: SelectSubset<T, TiposDeProcessoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TiposDeProcessoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TiposDeProcesso.
     * @param {TiposDeProcessoCreateArgs} args - Arguments to create a TiposDeProcesso.
     * @example
     * // Create one TiposDeProcesso
     * const TiposDeProcesso = await prisma.tiposDeProcesso.create({
     *   data: {
     *     // ... data to create a TiposDeProcesso
     *   }
     * })
     * 
     */
    create<T extends TiposDeProcessoCreateArgs>(args: SelectSubset<T, TiposDeProcessoCreateArgs<ExtArgs>>): Prisma__TiposDeProcessoClient<$Result.GetResult<Prisma.$TiposDeProcessoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TiposDeProcessos.
     * @param {TiposDeProcessoCreateManyArgs} args - Arguments to create many TiposDeProcessos.
     * @example
     * // Create many TiposDeProcessos
     * const tiposDeProcesso = await prisma.tiposDeProcesso.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TiposDeProcessoCreateManyArgs>(args?: SelectSubset<T, TiposDeProcessoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TiposDeProcesso.
     * @param {TiposDeProcessoDeleteArgs} args - Arguments to delete one TiposDeProcesso.
     * @example
     * // Delete one TiposDeProcesso
     * const TiposDeProcesso = await prisma.tiposDeProcesso.delete({
     *   where: {
     *     // ... filter to delete one TiposDeProcesso
     *   }
     * })
     * 
     */
    delete<T extends TiposDeProcessoDeleteArgs>(args: SelectSubset<T, TiposDeProcessoDeleteArgs<ExtArgs>>): Prisma__TiposDeProcessoClient<$Result.GetResult<Prisma.$TiposDeProcessoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TiposDeProcesso.
     * @param {TiposDeProcessoUpdateArgs} args - Arguments to update one TiposDeProcesso.
     * @example
     * // Update one TiposDeProcesso
     * const tiposDeProcesso = await prisma.tiposDeProcesso.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TiposDeProcessoUpdateArgs>(args: SelectSubset<T, TiposDeProcessoUpdateArgs<ExtArgs>>): Prisma__TiposDeProcessoClient<$Result.GetResult<Prisma.$TiposDeProcessoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TiposDeProcessos.
     * @param {TiposDeProcessoDeleteManyArgs} args - Arguments to filter TiposDeProcessos to delete.
     * @example
     * // Delete a few TiposDeProcessos
     * const { count } = await prisma.tiposDeProcesso.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TiposDeProcessoDeleteManyArgs>(args?: SelectSubset<T, TiposDeProcessoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TiposDeProcessos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TiposDeProcessoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TiposDeProcessos
     * const tiposDeProcesso = await prisma.tiposDeProcesso.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TiposDeProcessoUpdateManyArgs>(args: SelectSubset<T, TiposDeProcessoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TiposDeProcesso.
     * @param {TiposDeProcessoUpsertArgs} args - Arguments to update or create a TiposDeProcesso.
     * @example
     * // Update or create a TiposDeProcesso
     * const tiposDeProcesso = await prisma.tiposDeProcesso.upsert({
     *   create: {
     *     // ... data to create a TiposDeProcesso
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TiposDeProcesso we want to update
     *   }
     * })
     */
    upsert<T extends TiposDeProcessoUpsertArgs>(args: SelectSubset<T, TiposDeProcessoUpsertArgs<ExtArgs>>): Prisma__TiposDeProcessoClient<$Result.GetResult<Prisma.$TiposDeProcessoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TiposDeProcessos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TiposDeProcessoCountArgs} args - Arguments to filter TiposDeProcessos to count.
     * @example
     * // Count the number of TiposDeProcessos
     * const count = await prisma.tiposDeProcesso.count({
     *   where: {
     *     // ... the filter for the TiposDeProcessos we want to count
     *   }
     * })
    **/
    count<T extends TiposDeProcessoCountArgs>(
      args?: Subset<T, TiposDeProcessoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TiposDeProcessoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TiposDeProcesso.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TiposDeProcessoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TiposDeProcessoAggregateArgs>(args: Subset<T, TiposDeProcessoAggregateArgs>): Prisma.PrismaPromise<GetTiposDeProcessoAggregateType<T>>

    /**
     * Group by TiposDeProcesso.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TiposDeProcessoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TiposDeProcessoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TiposDeProcessoGroupByArgs['orderBy'] }
        : { orderBy?: TiposDeProcessoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TiposDeProcessoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTiposDeProcessoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TiposDeProcesso model
   */
  readonly fields: TiposDeProcessoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TiposDeProcesso.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TiposDeProcessoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    processo<T extends TiposDeProcesso$processoArgs<ExtArgs> = {}>(args?: Subset<T, TiposDeProcesso$processoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcessoPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TiposDeProcesso model
   */ 
  interface TiposDeProcessoFieldRefs {
    readonly id: FieldRef<"TiposDeProcesso", 'Int'>
    readonly nome: FieldRef<"TiposDeProcesso", 'String'>
    readonly activo: FieldRef<"TiposDeProcesso", 'Boolean'>
    readonly userId: FieldRef<"TiposDeProcesso", 'String'>
  }
    

  // Custom InputTypes
  /**
   * TiposDeProcesso findUnique
   */
  export type TiposDeProcessoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TiposDeProcesso
     */
    select?: TiposDeProcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TiposDeProcessoInclude<ExtArgs> | null
    /**
     * Filter, which TiposDeProcesso to fetch.
     */
    where: TiposDeProcessoWhereUniqueInput
  }

  /**
   * TiposDeProcesso findUniqueOrThrow
   */
  export type TiposDeProcessoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TiposDeProcesso
     */
    select?: TiposDeProcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TiposDeProcessoInclude<ExtArgs> | null
    /**
     * Filter, which TiposDeProcesso to fetch.
     */
    where: TiposDeProcessoWhereUniqueInput
  }

  /**
   * TiposDeProcesso findFirst
   */
  export type TiposDeProcessoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TiposDeProcesso
     */
    select?: TiposDeProcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TiposDeProcessoInclude<ExtArgs> | null
    /**
     * Filter, which TiposDeProcesso to fetch.
     */
    where?: TiposDeProcessoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TiposDeProcessos to fetch.
     */
    orderBy?: TiposDeProcessoOrderByWithRelationInput | TiposDeProcessoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TiposDeProcessos.
     */
    cursor?: TiposDeProcessoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TiposDeProcessos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TiposDeProcessos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TiposDeProcessos.
     */
    distinct?: TiposDeProcessoScalarFieldEnum | TiposDeProcessoScalarFieldEnum[]
  }

  /**
   * TiposDeProcesso findFirstOrThrow
   */
  export type TiposDeProcessoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TiposDeProcesso
     */
    select?: TiposDeProcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TiposDeProcessoInclude<ExtArgs> | null
    /**
     * Filter, which TiposDeProcesso to fetch.
     */
    where?: TiposDeProcessoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TiposDeProcessos to fetch.
     */
    orderBy?: TiposDeProcessoOrderByWithRelationInput | TiposDeProcessoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TiposDeProcessos.
     */
    cursor?: TiposDeProcessoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TiposDeProcessos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TiposDeProcessos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TiposDeProcessos.
     */
    distinct?: TiposDeProcessoScalarFieldEnum | TiposDeProcessoScalarFieldEnum[]
  }

  /**
   * TiposDeProcesso findMany
   */
  export type TiposDeProcessoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TiposDeProcesso
     */
    select?: TiposDeProcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TiposDeProcessoInclude<ExtArgs> | null
    /**
     * Filter, which TiposDeProcessos to fetch.
     */
    where?: TiposDeProcessoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TiposDeProcessos to fetch.
     */
    orderBy?: TiposDeProcessoOrderByWithRelationInput | TiposDeProcessoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TiposDeProcessos.
     */
    cursor?: TiposDeProcessoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TiposDeProcessos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TiposDeProcessos.
     */
    skip?: number
    distinct?: TiposDeProcessoScalarFieldEnum | TiposDeProcessoScalarFieldEnum[]
  }

  /**
   * TiposDeProcesso create
   */
  export type TiposDeProcessoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TiposDeProcesso
     */
    select?: TiposDeProcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TiposDeProcessoInclude<ExtArgs> | null
    /**
     * The data needed to create a TiposDeProcesso.
     */
    data: XOR<TiposDeProcessoCreateInput, TiposDeProcessoUncheckedCreateInput>
  }

  /**
   * TiposDeProcesso createMany
   */
  export type TiposDeProcessoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TiposDeProcessos.
     */
    data: TiposDeProcessoCreateManyInput | TiposDeProcessoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TiposDeProcesso update
   */
  export type TiposDeProcessoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TiposDeProcesso
     */
    select?: TiposDeProcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TiposDeProcessoInclude<ExtArgs> | null
    /**
     * The data needed to update a TiposDeProcesso.
     */
    data: XOR<TiposDeProcessoUpdateInput, TiposDeProcessoUncheckedUpdateInput>
    /**
     * Choose, which TiposDeProcesso to update.
     */
    where: TiposDeProcessoWhereUniqueInput
  }

  /**
   * TiposDeProcesso updateMany
   */
  export type TiposDeProcessoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TiposDeProcessos.
     */
    data: XOR<TiposDeProcessoUpdateManyMutationInput, TiposDeProcessoUncheckedUpdateManyInput>
    /**
     * Filter which TiposDeProcessos to update
     */
    where?: TiposDeProcessoWhereInput
  }

  /**
   * TiposDeProcesso upsert
   */
  export type TiposDeProcessoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TiposDeProcesso
     */
    select?: TiposDeProcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TiposDeProcessoInclude<ExtArgs> | null
    /**
     * The filter to search for the TiposDeProcesso to update in case it exists.
     */
    where: TiposDeProcessoWhereUniqueInput
    /**
     * In case the TiposDeProcesso found by the `where` argument doesn't exist, create a new TiposDeProcesso with this data.
     */
    create: XOR<TiposDeProcessoCreateInput, TiposDeProcessoUncheckedCreateInput>
    /**
     * In case the TiposDeProcesso was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TiposDeProcessoUpdateInput, TiposDeProcessoUncheckedUpdateInput>
  }

  /**
   * TiposDeProcesso delete
   */
  export type TiposDeProcessoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TiposDeProcesso
     */
    select?: TiposDeProcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TiposDeProcessoInclude<ExtArgs> | null
    /**
     * Filter which TiposDeProcesso to delete.
     */
    where: TiposDeProcessoWhereUniqueInput
  }

  /**
   * TiposDeProcesso deleteMany
   */
  export type TiposDeProcessoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TiposDeProcessos to delete
     */
    where?: TiposDeProcessoWhereInput
  }

  /**
   * TiposDeProcesso.processo
   */
  export type TiposDeProcesso$processoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Processo
     */
    select?: ProcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessoInclude<ExtArgs> | null
    where?: ProcessoWhereInput
    orderBy?: ProcessoOrderByWithRelationInput | ProcessoOrderByWithRelationInput[]
    cursor?: ProcessoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProcessoScalarFieldEnum | ProcessoScalarFieldEnum[]
  }

  /**
   * TiposDeProcesso without action
   */
  export type TiposDeProcessoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TiposDeProcesso
     */
    select?: TiposDeProcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TiposDeProcessoInclude<ExtArgs> | null
  }


  /**
   * Model Documento
   */

  export type AggregateDocumento = {
    _count: DocumentoCountAggregateOutputType | null
    _avg: DocumentoAvgAggregateOutputType | null
    _sum: DocumentoSumAggregateOutputType | null
    _min: DocumentoMinAggregateOutputType | null
    _max: DocumentoMaxAggregateOutputType | null
  }

  export type DocumentoAvgAggregateOutputType = {
    id: number | null
    clienteId: number | null
  }

  export type DocumentoSumAggregateOutputType = {
    id: number | null
    clienteId: number | null
  }

  export type DocumentoMinAggregateOutputType = {
    id: number | null
    tipo: string | null
    descricao: string | null
    arquivoUrl: string | null
    clienteId: number | null
    userId: string | null
    criadoEm: Date | null
  }

  export type DocumentoMaxAggregateOutputType = {
    id: number | null
    tipo: string | null
    descricao: string | null
    arquivoUrl: string | null
    clienteId: number | null
    userId: string | null
    criadoEm: Date | null
  }

  export type DocumentoCountAggregateOutputType = {
    id: number
    tipo: number
    descricao: number
    arquivoUrl: number
    metadata: number
    clienteId: number
    userId: number
    criadoEm: number
    _all: number
  }


  export type DocumentoAvgAggregateInputType = {
    id?: true
    clienteId?: true
  }

  export type DocumentoSumAggregateInputType = {
    id?: true
    clienteId?: true
  }

  export type DocumentoMinAggregateInputType = {
    id?: true
    tipo?: true
    descricao?: true
    arquivoUrl?: true
    clienteId?: true
    userId?: true
    criadoEm?: true
  }

  export type DocumentoMaxAggregateInputType = {
    id?: true
    tipo?: true
    descricao?: true
    arquivoUrl?: true
    clienteId?: true
    userId?: true
    criadoEm?: true
  }

  export type DocumentoCountAggregateInputType = {
    id?: true
    tipo?: true
    descricao?: true
    arquivoUrl?: true
    metadata?: true
    clienteId?: true
    userId?: true
    criadoEm?: true
    _all?: true
  }

  export type DocumentoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Documento to aggregate.
     */
    where?: DocumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documentos to fetch.
     */
    orderBy?: DocumentoOrderByWithRelationInput | DocumentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Documentos
    **/
    _count?: true | DocumentoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DocumentoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DocumentoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentoMaxAggregateInputType
  }

  export type GetDocumentoAggregateType<T extends DocumentoAggregateArgs> = {
        [P in keyof T & keyof AggregateDocumento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocumento[P]>
      : GetScalarType<T[P], AggregateDocumento[P]>
  }




  export type DocumentoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentoWhereInput
    orderBy?: DocumentoOrderByWithAggregationInput | DocumentoOrderByWithAggregationInput[]
    by: DocumentoScalarFieldEnum[] | DocumentoScalarFieldEnum
    having?: DocumentoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentoCountAggregateInputType | true
    _avg?: DocumentoAvgAggregateInputType
    _sum?: DocumentoSumAggregateInputType
    _min?: DocumentoMinAggregateInputType
    _max?: DocumentoMaxAggregateInputType
  }

  export type DocumentoGroupByOutputType = {
    id: number
    tipo: string
    descricao: string | null
    arquivoUrl: string
    metadata: JsonValue | null
    clienteId: number
    userId: string
    criadoEm: Date
    _count: DocumentoCountAggregateOutputType | null
    _avg: DocumentoAvgAggregateOutputType | null
    _sum: DocumentoSumAggregateOutputType | null
    _min: DocumentoMinAggregateOutputType | null
    _max: DocumentoMaxAggregateOutputType | null
  }

  type GetDocumentoGroupByPayload<T extends DocumentoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentoGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentoGroupByOutputType[P]>
        }
      >
    >


  export type DocumentoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tipo?: boolean
    descricao?: boolean
    arquivoUrl?: boolean
    metadata?: boolean
    clienteId?: boolean
    userId?: boolean
    criadoEm?: boolean
    cliente?: boolean | ClienteDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documento"]>


  export type DocumentoSelectScalar = {
    id?: boolean
    tipo?: boolean
    descricao?: boolean
    arquivoUrl?: boolean
    metadata?: boolean
    clienteId?: boolean
    userId?: boolean
    criadoEm?: boolean
  }

  export type DocumentoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cliente?: boolean | ClienteDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DocumentoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Documento"
    objects: {
      cliente: Prisma.$ClientePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      tipo: string
      descricao: string | null
      arquivoUrl: string
      metadata: Prisma.JsonValue | null
      clienteId: number
      userId: string
      criadoEm: Date
    }, ExtArgs["result"]["documento"]>
    composites: {}
  }

  type DocumentoGetPayload<S extends boolean | null | undefined | DocumentoDefaultArgs> = $Result.GetResult<Prisma.$DocumentoPayload, S>

  type DocumentoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DocumentoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DocumentoCountAggregateInputType | true
    }

  export interface DocumentoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Documento'], meta: { name: 'Documento' } }
    /**
     * Find zero or one Documento that matches the filter.
     * @param {DocumentoFindUniqueArgs} args - Arguments to find a Documento
     * @example
     * // Get one Documento
     * const documento = await prisma.documento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentoFindUniqueArgs>(args: SelectSubset<T, DocumentoFindUniqueArgs<ExtArgs>>): Prisma__DocumentoClient<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Documento that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DocumentoFindUniqueOrThrowArgs} args - Arguments to find a Documento
     * @example
     * // Get one Documento
     * const documento = await prisma.documento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentoFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentoClient<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Documento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoFindFirstArgs} args - Arguments to find a Documento
     * @example
     * // Get one Documento
     * const documento = await prisma.documento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentoFindFirstArgs>(args?: SelectSubset<T, DocumentoFindFirstArgs<ExtArgs>>): Prisma__DocumentoClient<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Documento that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoFindFirstOrThrowArgs} args - Arguments to find a Documento
     * @example
     * // Get one Documento
     * const documento = await prisma.documento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentoFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentoFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentoClient<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Documentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Documentos
     * const documentos = await prisma.documento.findMany()
     * 
     * // Get first 10 Documentos
     * const documentos = await prisma.documento.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentoWithIdOnly = await prisma.documento.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DocumentoFindManyArgs>(args?: SelectSubset<T, DocumentoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Documento.
     * @param {DocumentoCreateArgs} args - Arguments to create a Documento.
     * @example
     * // Create one Documento
     * const Documento = await prisma.documento.create({
     *   data: {
     *     // ... data to create a Documento
     *   }
     * })
     * 
     */
    create<T extends DocumentoCreateArgs>(args: SelectSubset<T, DocumentoCreateArgs<ExtArgs>>): Prisma__DocumentoClient<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Documentos.
     * @param {DocumentoCreateManyArgs} args - Arguments to create many Documentos.
     * @example
     * // Create many Documentos
     * const documento = await prisma.documento.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentoCreateManyArgs>(args?: SelectSubset<T, DocumentoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Documento.
     * @param {DocumentoDeleteArgs} args - Arguments to delete one Documento.
     * @example
     * // Delete one Documento
     * const Documento = await prisma.documento.delete({
     *   where: {
     *     // ... filter to delete one Documento
     *   }
     * })
     * 
     */
    delete<T extends DocumentoDeleteArgs>(args: SelectSubset<T, DocumentoDeleteArgs<ExtArgs>>): Prisma__DocumentoClient<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Documento.
     * @param {DocumentoUpdateArgs} args - Arguments to update one Documento.
     * @example
     * // Update one Documento
     * const documento = await prisma.documento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentoUpdateArgs>(args: SelectSubset<T, DocumentoUpdateArgs<ExtArgs>>): Prisma__DocumentoClient<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Documentos.
     * @param {DocumentoDeleteManyArgs} args - Arguments to filter Documentos to delete.
     * @example
     * // Delete a few Documentos
     * const { count } = await prisma.documento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentoDeleteManyArgs>(args?: SelectSubset<T, DocumentoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Documentos
     * const documento = await prisma.documento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentoUpdateManyArgs>(args: SelectSubset<T, DocumentoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Documento.
     * @param {DocumentoUpsertArgs} args - Arguments to update or create a Documento.
     * @example
     * // Update or create a Documento
     * const documento = await prisma.documento.upsert({
     *   create: {
     *     // ... data to create a Documento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Documento we want to update
     *   }
     * })
     */
    upsert<T extends DocumentoUpsertArgs>(args: SelectSubset<T, DocumentoUpsertArgs<ExtArgs>>): Prisma__DocumentoClient<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Documentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoCountArgs} args - Arguments to filter Documentos to count.
     * @example
     * // Count the number of Documentos
     * const count = await prisma.documento.count({
     *   where: {
     *     // ... the filter for the Documentos we want to count
     *   }
     * })
    **/
    count<T extends DocumentoCountArgs>(
      args?: Subset<T, DocumentoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Documento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentoAggregateArgs>(args: Subset<T, DocumentoAggregateArgs>): Prisma.PrismaPromise<GetDocumentoAggregateType<T>>

    /**
     * Group by Documento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentoGroupByArgs['orderBy'] }
        : { orderBy?: DocumentoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Documento model
   */
  readonly fields: DocumentoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Documento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cliente<T extends ClienteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClienteDefaultArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Documento model
   */ 
  interface DocumentoFieldRefs {
    readonly id: FieldRef<"Documento", 'Int'>
    readonly tipo: FieldRef<"Documento", 'String'>
    readonly descricao: FieldRef<"Documento", 'String'>
    readonly arquivoUrl: FieldRef<"Documento", 'String'>
    readonly metadata: FieldRef<"Documento", 'Json'>
    readonly clienteId: FieldRef<"Documento", 'Int'>
    readonly userId: FieldRef<"Documento", 'String'>
    readonly criadoEm: FieldRef<"Documento", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Documento findUnique
   */
  export type DocumentoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * Filter, which Documento to fetch.
     */
    where: DocumentoWhereUniqueInput
  }

  /**
   * Documento findUniqueOrThrow
   */
  export type DocumentoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * Filter, which Documento to fetch.
     */
    where: DocumentoWhereUniqueInput
  }

  /**
   * Documento findFirst
   */
  export type DocumentoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * Filter, which Documento to fetch.
     */
    where?: DocumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documentos to fetch.
     */
    orderBy?: DocumentoOrderByWithRelationInput | DocumentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documentos.
     */
    cursor?: DocumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documentos.
     */
    distinct?: DocumentoScalarFieldEnum | DocumentoScalarFieldEnum[]
  }

  /**
   * Documento findFirstOrThrow
   */
  export type DocumentoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * Filter, which Documento to fetch.
     */
    where?: DocumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documentos to fetch.
     */
    orderBy?: DocumentoOrderByWithRelationInput | DocumentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documentos.
     */
    cursor?: DocumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documentos.
     */
    distinct?: DocumentoScalarFieldEnum | DocumentoScalarFieldEnum[]
  }

  /**
   * Documento findMany
   */
  export type DocumentoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * Filter, which Documentos to fetch.
     */
    where?: DocumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documentos to fetch.
     */
    orderBy?: DocumentoOrderByWithRelationInput | DocumentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Documentos.
     */
    cursor?: DocumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documentos.
     */
    skip?: number
    distinct?: DocumentoScalarFieldEnum | DocumentoScalarFieldEnum[]
  }

  /**
   * Documento create
   */
  export type DocumentoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * The data needed to create a Documento.
     */
    data: XOR<DocumentoCreateInput, DocumentoUncheckedCreateInput>
  }

  /**
   * Documento createMany
   */
  export type DocumentoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Documentos.
     */
    data: DocumentoCreateManyInput | DocumentoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Documento update
   */
  export type DocumentoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * The data needed to update a Documento.
     */
    data: XOR<DocumentoUpdateInput, DocumentoUncheckedUpdateInput>
    /**
     * Choose, which Documento to update.
     */
    where: DocumentoWhereUniqueInput
  }

  /**
   * Documento updateMany
   */
  export type DocumentoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Documentos.
     */
    data: XOR<DocumentoUpdateManyMutationInput, DocumentoUncheckedUpdateManyInput>
    /**
     * Filter which Documentos to update
     */
    where?: DocumentoWhereInput
  }

  /**
   * Documento upsert
   */
  export type DocumentoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * The filter to search for the Documento to update in case it exists.
     */
    where: DocumentoWhereUniqueInput
    /**
     * In case the Documento found by the `where` argument doesn't exist, create a new Documento with this data.
     */
    create: XOR<DocumentoCreateInput, DocumentoUncheckedCreateInput>
    /**
     * In case the Documento was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentoUpdateInput, DocumentoUncheckedUpdateInput>
  }

  /**
   * Documento delete
   */
  export type DocumentoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * Filter which Documento to delete.
     */
    where: DocumentoWhereUniqueInput
  }

  /**
   * Documento deleteMany
   */
  export type DocumentoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Documentos to delete
     */
    where?: DocumentoWhereInput
  }

  /**
   * Documento without action
   */
  export type DocumentoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoInclude<ExtArgs> | null
  }


  /**
   * Model FaseProcesso
   */

  export type AggregateFaseProcesso = {
    _count: FaseProcessoCountAggregateOutputType | null
    _avg: FaseProcessoAvgAggregateOutputType | null
    _sum: FaseProcessoSumAggregateOutputType | null
    _min: FaseProcessoMinAggregateOutputType | null
    _max: FaseProcessoMaxAggregateOutputType | null
  }

  export type FaseProcessoAvgAggregateOutputType = {
    id: number | null
  }

  export type FaseProcessoSumAggregateOutputType = {
    id: number | null
  }

  export type FaseProcessoMinAggregateOutputType = {
    id: number | null
    nome: string | null
    cor_fundo: string | null
    cor_fonte: string | null
    pendencia: boolean | null
    muda_fase: boolean | null
    activo: boolean | null
    criado_em: Date | null
    atualizado_em: Date | null
    userId: string | null
  }

  export type FaseProcessoMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    cor_fundo: string | null
    cor_fonte: string | null
    pendencia: boolean | null
    muda_fase: boolean | null
    activo: boolean | null
    criado_em: Date | null
    atualizado_em: Date | null
    userId: string | null
  }

  export type FaseProcessoCountAggregateOutputType = {
    id: number
    nome: number
    cor_fundo: number
    cor_fonte: number
    pendencia: number
    muda_fase: number
    activo: number
    criado_em: number
    atualizado_em: number
    userId: number
    _all: number
  }


  export type FaseProcessoAvgAggregateInputType = {
    id?: true
  }

  export type FaseProcessoSumAggregateInputType = {
    id?: true
  }

  export type FaseProcessoMinAggregateInputType = {
    id?: true
    nome?: true
    cor_fundo?: true
    cor_fonte?: true
    pendencia?: true
    muda_fase?: true
    activo?: true
    criado_em?: true
    atualizado_em?: true
    userId?: true
  }

  export type FaseProcessoMaxAggregateInputType = {
    id?: true
    nome?: true
    cor_fundo?: true
    cor_fonte?: true
    pendencia?: true
    muda_fase?: true
    activo?: true
    criado_em?: true
    atualizado_em?: true
    userId?: true
  }

  export type FaseProcessoCountAggregateInputType = {
    id?: true
    nome?: true
    cor_fundo?: true
    cor_fonte?: true
    pendencia?: true
    muda_fase?: true
    activo?: true
    criado_em?: true
    atualizado_em?: true
    userId?: true
    _all?: true
  }

  export type FaseProcessoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FaseProcesso to aggregate.
     */
    where?: FaseProcessoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FaseProcessos to fetch.
     */
    orderBy?: FaseProcessoOrderByWithRelationInput | FaseProcessoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FaseProcessoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FaseProcessos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FaseProcessos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FaseProcessos
    **/
    _count?: true | FaseProcessoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FaseProcessoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FaseProcessoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FaseProcessoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FaseProcessoMaxAggregateInputType
  }

  export type GetFaseProcessoAggregateType<T extends FaseProcessoAggregateArgs> = {
        [P in keyof T & keyof AggregateFaseProcesso]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFaseProcesso[P]>
      : GetScalarType<T[P], AggregateFaseProcesso[P]>
  }




  export type FaseProcessoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FaseProcessoWhereInput
    orderBy?: FaseProcessoOrderByWithAggregationInput | FaseProcessoOrderByWithAggregationInput[]
    by: FaseProcessoScalarFieldEnum[] | FaseProcessoScalarFieldEnum
    having?: FaseProcessoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FaseProcessoCountAggregateInputType | true
    _avg?: FaseProcessoAvgAggregateInputType
    _sum?: FaseProcessoSumAggregateInputType
    _min?: FaseProcessoMinAggregateInputType
    _max?: FaseProcessoMaxAggregateInputType
  }

  export type FaseProcessoGroupByOutputType = {
    id: number
    nome: string
    cor_fundo: string
    cor_fonte: string
    pendencia: boolean
    muda_fase: boolean
    activo: boolean
    criado_em: Date
    atualizado_em: Date
    userId: string
    _count: FaseProcessoCountAggregateOutputType | null
    _avg: FaseProcessoAvgAggregateOutputType | null
    _sum: FaseProcessoSumAggregateOutputType | null
    _min: FaseProcessoMinAggregateOutputType | null
    _max: FaseProcessoMaxAggregateOutputType | null
  }

  type GetFaseProcessoGroupByPayload<T extends FaseProcessoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FaseProcessoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FaseProcessoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FaseProcessoGroupByOutputType[P]>
            : GetScalarType<T[P], FaseProcessoGroupByOutputType[P]>
        }
      >
    >


  export type FaseProcessoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    cor_fundo?: boolean
    cor_fonte?: boolean
    pendencia?: boolean
    muda_fase?: boolean
    activo?: boolean
    criado_em?: boolean
    atualizado_em?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    processo?: boolean | FaseProcesso$processoArgs<ExtArgs>
    _count?: boolean | FaseProcessoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["faseProcesso"]>


  export type FaseProcessoSelectScalar = {
    id?: boolean
    nome?: boolean
    cor_fundo?: boolean
    cor_fonte?: boolean
    pendencia?: boolean
    muda_fase?: boolean
    activo?: boolean
    criado_em?: boolean
    atualizado_em?: boolean
    userId?: boolean
  }

  export type FaseProcessoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    processo?: boolean | FaseProcesso$processoArgs<ExtArgs>
    _count?: boolean | FaseProcessoCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $FaseProcessoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FaseProcesso"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      processo: Prisma.$ProcessoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      cor_fundo: string
      cor_fonte: string
      pendencia: boolean
      muda_fase: boolean
      activo: boolean
      criado_em: Date
      atualizado_em: Date
      userId: string
    }, ExtArgs["result"]["faseProcesso"]>
    composites: {}
  }

  type FaseProcessoGetPayload<S extends boolean | null | undefined | FaseProcessoDefaultArgs> = $Result.GetResult<Prisma.$FaseProcessoPayload, S>

  type FaseProcessoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FaseProcessoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FaseProcessoCountAggregateInputType | true
    }

  export interface FaseProcessoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FaseProcesso'], meta: { name: 'FaseProcesso' } }
    /**
     * Find zero or one FaseProcesso that matches the filter.
     * @param {FaseProcessoFindUniqueArgs} args - Arguments to find a FaseProcesso
     * @example
     * // Get one FaseProcesso
     * const faseProcesso = await prisma.faseProcesso.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FaseProcessoFindUniqueArgs>(args: SelectSubset<T, FaseProcessoFindUniqueArgs<ExtArgs>>): Prisma__FaseProcessoClient<$Result.GetResult<Prisma.$FaseProcessoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one FaseProcesso that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FaseProcessoFindUniqueOrThrowArgs} args - Arguments to find a FaseProcesso
     * @example
     * // Get one FaseProcesso
     * const faseProcesso = await prisma.faseProcesso.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FaseProcessoFindUniqueOrThrowArgs>(args: SelectSubset<T, FaseProcessoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FaseProcessoClient<$Result.GetResult<Prisma.$FaseProcessoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first FaseProcesso that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaseProcessoFindFirstArgs} args - Arguments to find a FaseProcesso
     * @example
     * // Get one FaseProcesso
     * const faseProcesso = await prisma.faseProcesso.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FaseProcessoFindFirstArgs>(args?: SelectSubset<T, FaseProcessoFindFirstArgs<ExtArgs>>): Prisma__FaseProcessoClient<$Result.GetResult<Prisma.$FaseProcessoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first FaseProcesso that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaseProcessoFindFirstOrThrowArgs} args - Arguments to find a FaseProcesso
     * @example
     * // Get one FaseProcesso
     * const faseProcesso = await prisma.faseProcesso.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FaseProcessoFindFirstOrThrowArgs>(args?: SelectSubset<T, FaseProcessoFindFirstOrThrowArgs<ExtArgs>>): Prisma__FaseProcessoClient<$Result.GetResult<Prisma.$FaseProcessoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more FaseProcessos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaseProcessoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FaseProcessos
     * const faseProcessos = await prisma.faseProcesso.findMany()
     * 
     * // Get first 10 FaseProcessos
     * const faseProcessos = await prisma.faseProcesso.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const faseProcessoWithIdOnly = await prisma.faseProcesso.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FaseProcessoFindManyArgs>(args?: SelectSubset<T, FaseProcessoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FaseProcessoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a FaseProcesso.
     * @param {FaseProcessoCreateArgs} args - Arguments to create a FaseProcesso.
     * @example
     * // Create one FaseProcesso
     * const FaseProcesso = await prisma.faseProcesso.create({
     *   data: {
     *     // ... data to create a FaseProcesso
     *   }
     * })
     * 
     */
    create<T extends FaseProcessoCreateArgs>(args: SelectSubset<T, FaseProcessoCreateArgs<ExtArgs>>): Prisma__FaseProcessoClient<$Result.GetResult<Prisma.$FaseProcessoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many FaseProcessos.
     * @param {FaseProcessoCreateManyArgs} args - Arguments to create many FaseProcessos.
     * @example
     * // Create many FaseProcessos
     * const faseProcesso = await prisma.faseProcesso.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FaseProcessoCreateManyArgs>(args?: SelectSubset<T, FaseProcessoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FaseProcesso.
     * @param {FaseProcessoDeleteArgs} args - Arguments to delete one FaseProcesso.
     * @example
     * // Delete one FaseProcesso
     * const FaseProcesso = await prisma.faseProcesso.delete({
     *   where: {
     *     // ... filter to delete one FaseProcesso
     *   }
     * })
     * 
     */
    delete<T extends FaseProcessoDeleteArgs>(args: SelectSubset<T, FaseProcessoDeleteArgs<ExtArgs>>): Prisma__FaseProcessoClient<$Result.GetResult<Prisma.$FaseProcessoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one FaseProcesso.
     * @param {FaseProcessoUpdateArgs} args - Arguments to update one FaseProcesso.
     * @example
     * // Update one FaseProcesso
     * const faseProcesso = await prisma.faseProcesso.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FaseProcessoUpdateArgs>(args: SelectSubset<T, FaseProcessoUpdateArgs<ExtArgs>>): Prisma__FaseProcessoClient<$Result.GetResult<Prisma.$FaseProcessoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more FaseProcessos.
     * @param {FaseProcessoDeleteManyArgs} args - Arguments to filter FaseProcessos to delete.
     * @example
     * // Delete a few FaseProcessos
     * const { count } = await prisma.faseProcesso.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FaseProcessoDeleteManyArgs>(args?: SelectSubset<T, FaseProcessoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FaseProcessos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaseProcessoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FaseProcessos
     * const faseProcesso = await prisma.faseProcesso.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FaseProcessoUpdateManyArgs>(args: SelectSubset<T, FaseProcessoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FaseProcesso.
     * @param {FaseProcessoUpsertArgs} args - Arguments to update or create a FaseProcesso.
     * @example
     * // Update or create a FaseProcesso
     * const faseProcesso = await prisma.faseProcesso.upsert({
     *   create: {
     *     // ... data to create a FaseProcesso
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FaseProcesso we want to update
     *   }
     * })
     */
    upsert<T extends FaseProcessoUpsertArgs>(args: SelectSubset<T, FaseProcessoUpsertArgs<ExtArgs>>): Prisma__FaseProcessoClient<$Result.GetResult<Prisma.$FaseProcessoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of FaseProcessos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaseProcessoCountArgs} args - Arguments to filter FaseProcessos to count.
     * @example
     * // Count the number of FaseProcessos
     * const count = await prisma.faseProcesso.count({
     *   where: {
     *     // ... the filter for the FaseProcessos we want to count
     *   }
     * })
    **/
    count<T extends FaseProcessoCountArgs>(
      args?: Subset<T, FaseProcessoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FaseProcessoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FaseProcesso.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaseProcessoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FaseProcessoAggregateArgs>(args: Subset<T, FaseProcessoAggregateArgs>): Prisma.PrismaPromise<GetFaseProcessoAggregateType<T>>

    /**
     * Group by FaseProcesso.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaseProcessoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FaseProcessoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FaseProcessoGroupByArgs['orderBy'] }
        : { orderBy?: FaseProcessoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FaseProcessoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFaseProcessoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FaseProcesso model
   */
  readonly fields: FaseProcessoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FaseProcesso.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FaseProcessoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    processo<T extends FaseProcesso$processoArgs<ExtArgs> = {}>(args?: Subset<T, FaseProcesso$processoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcessoPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FaseProcesso model
   */ 
  interface FaseProcessoFieldRefs {
    readonly id: FieldRef<"FaseProcesso", 'Int'>
    readonly nome: FieldRef<"FaseProcesso", 'String'>
    readonly cor_fundo: FieldRef<"FaseProcesso", 'String'>
    readonly cor_fonte: FieldRef<"FaseProcesso", 'String'>
    readonly pendencia: FieldRef<"FaseProcesso", 'Boolean'>
    readonly muda_fase: FieldRef<"FaseProcesso", 'Boolean'>
    readonly activo: FieldRef<"FaseProcesso", 'Boolean'>
    readonly criado_em: FieldRef<"FaseProcesso", 'DateTime'>
    readonly atualizado_em: FieldRef<"FaseProcesso", 'DateTime'>
    readonly userId: FieldRef<"FaseProcesso", 'String'>
  }
    

  // Custom InputTypes
  /**
   * FaseProcesso findUnique
   */
  export type FaseProcessoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaseProcesso
     */
    select?: FaseProcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaseProcessoInclude<ExtArgs> | null
    /**
     * Filter, which FaseProcesso to fetch.
     */
    where: FaseProcessoWhereUniqueInput
  }

  /**
   * FaseProcesso findUniqueOrThrow
   */
  export type FaseProcessoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaseProcesso
     */
    select?: FaseProcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaseProcessoInclude<ExtArgs> | null
    /**
     * Filter, which FaseProcesso to fetch.
     */
    where: FaseProcessoWhereUniqueInput
  }

  /**
   * FaseProcesso findFirst
   */
  export type FaseProcessoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaseProcesso
     */
    select?: FaseProcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaseProcessoInclude<ExtArgs> | null
    /**
     * Filter, which FaseProcesso to fetch.
     */
    where?: FaseProcessoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FaseProcessos to fetch.
     */
    orderBy?: FaseProcessoOrderByWithRelationInput | FaseProcessoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FaseProcessos.
     */
    cursor?: FaseProcessoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FaseProcessos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FaseProcessos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FaseProcessos.
     */
    distinct?: FaseProcessoScalarFieldEnum | FaseProcessoScalarFieldEnum[]
  }

  /**
   * FaseProcesso findFirstOrThrow
   */
  export type FaseProcessoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaseProcesso
     */
    select?: FaseProcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaseProcessoInclude<ExtArgs> | null
    /**
     * Filter, which FaseProcesso to fetch.
     */
    where?: FaseProcessoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FaseProcessos to fetch.
     */
    orderBy?: FaseProcessoOrderByWithRelationInput | FaseProcessoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FaseProcessos.
     */
    cursor?: FaseProcessoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FaseProcessos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FaseProcessos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FaseProcessos.
     */
    distinct?: FaseProcessoScalarFieldEnum | FaseProcessoScalarFieldEnum[]
  }

  /**
   * FaseProcesso findMany
   */
  export type FaseProcessoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaseProcesso
     */
    select?: FaseProcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaseProcessoInclude<ExtArgs> | null
    /**
     * Filter, which FaseProcessos to fetch.
     */
    where?: FaseProcessoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FaseProcessos to fetch.
     */
    orderBy?: FaseProcessoOrderByWithRelationInput | FaseProcessoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FaseProcessos.
     */
    cursor?: FaseProcessoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FaseProcessos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FaseProcessos.
     */
    skip?: number
    distinct?: FaseProcessoScalarFieldEnum | FaseProcessoScalarFieldEnum[]
  }

  /**
   * FaseProcesso create
   */
  export type FaseProcessoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaseProcesso
     */
    select?: FaseProcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaseProcessoInclude<ExtArgs> | null
    /**
     * The data needed to create a FaseProcesso.
     */
    data: XOR<FaseProcessoCreateInput, FaseProcessoUncheckedCreateInput>
  }

  /**
   * FaseProcesso createMany
   */
  export type FaseProcessoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FaseProcessos.
     */
    data: FaseProcessoCreateManyInput | FaseProcessoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FaseProcesso update
   */
  export type FaseProcessoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaseProcesso
     */
    select?: FaseProcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaseProcessoInclude<ExtArgs> | null
    /**
     * The data needed to update a FaseProcesso.
     */
    data: XOR<FaseProcessoUpdateInput, FaseProcessoUncheckedUpdateInput>
    /**
     * Choose, which FaseProcesso to update.
     */
    where: FaseProcessoWhereUniqueInput
  }

  /**
   * FaseProcesso updateMany
   */
  export type FaseProcessoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FaseProcessos.
     */
    data: XOR<FaseProcessoUpdateManyMutationInput, FaseProcessoUncheckedUpdateManyInput>
    /**
     * Filter which FaseProcessos to update
     */
    where?: FaseProcessoWhereInput
  }

  /**
   * FaseProcesso upsert
   */
  export type FaseProcessoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaseProcesso
     */
    select?: FaseProcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaseProcessoInclude<ExtArgs> | null
    /**
     * The filter to search for the FaseProcesso to update in case it exists.
     */
    where: FaseProcessoWhereUniqueInput
    /**
     * In case the FaseProcesso found by the `where` argument doesn't exist, create a new FaseProcesso with this data.
     */
    create: XOR<FaseProcessoCreateInput, FaseProcessoUncheckedCreateInput>
    /**
     * In case the FaseProcesso was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FaseProcessoUpdateInput, FaseProcessoUncheckedUpdateInput>
  }

  /**
   * FaseProcesso delete
   */
  export type FaseProcessoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaseProcesso
     */
    select?: FaseProcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaseProcessoInclude<ExtArgs> | null
    /**
     * Filter which FaseProcesso to delete.
     */
    where: FaseProcessoWhereUniqueInput
  }

  /**
   * FaseProcesso deleteMany
   */
  export type FaseProcessoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FaseProcessos to delete
     */
    where?: FaseProcessoWhereInput
  }

  /**
   * FaseProcesso.processo
   */
  export type FaseProcesso$processoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Processo
     */
    select?: ProcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessoInclude<ExtArgs> | null
    where?: ProcessoWhereInput
    orderBy?: ProcessoOrderByWithRelationInput | ProcessoOrderByWithRelationInput[]
    cursor?: ProcessoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProcessoScalarFieldEnum | ProcessoScalarFieldEnum[]
  }

  /**
   * FaseProcesso without action
   */
  export type FaseProcessoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaseProcesso
     */
    select?: FaseProcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaseProcessoInclude<ExtArgs> | null
  }


  /**
   * Model Prioridades
   */

  export type AggregatePrioridades = {
    _count: PrioridadesCountAggregateOutputType | null
    _avg: PrioridadesAvgAggregateOutputType | null
    _sum: PrioridadesSumAggregateOutputType | null
    _min: PrioridadesMinAggregateOutputType | null
    _max: PrioridadesMaxAggregateOutputType | null
  }

  export type PrioridadesAvgAggregateOutputType = {
    id: number | null
  }

  export type PrioridadesSumAggregateOutputType = {
    id: number | null
  }

  export type PrioridadesMinAggregateOutputType = {
    id: number | null
    nome: string | null
    cor_fundo: string | null
    cor_fonte: string | null
    activo: boolean | null
    userId: string | null
  }

  export type PrioridadesMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    cor_fundo: string | null
    cor_fonte: string | null
    activo: boolean | null
    userId: string | null
  }

  export type PrioridadesCountAggregateOutputType = {
    id: number
    nome: number
    cor_fundo: number
    cor_fonte: number
    activo: number
    userId: number
    _all: number
  }


  export type PrioridadesAvgAggregateInputType = {
    id?: true
  }

  export type PrioridadesSumAggregateInputType = {
    id?: true
  }

  export type PrioridadesMinAggregateInputType = {
    id?: true
    nome?: true
    cor_fundo?: true
    cor_fonte?: true
    activo?: true
    userId?: true
  }

  export type PrioridadesMaxAggregateInputType = {
    id?: true
    nome?: true
    cor_fundo?: true
    cor_fonte?: true
    activo?: true
    userId?: true
  }

  export type PrioridadesCountAggregateInputType = {
    id?: true
    nome?: true
    cor_fundo?: true
    cor_fonte?: true
    activo?: true
    userId?: true
    _all?: true
  }

  export type PrioridadesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Prioridades to aggregate.
     */
    where?: PrioridadesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prioridades to fetch.
     */
    orderBy?: PrioridadesOrderByWithRelationInput | PrioridadesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PrioridadesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prioridades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prioridades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Prioridades
    **/
    _count?: true | PrioridadesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PrioridadesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PrioridadesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PrioridadesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PrioridadesMaxAggregateInputType
  }

  export type GetPrioridadesAggregateType<T extends PrioridadesAggregateArgs> = {
        [P in keyof T & keyof AggregatePrioridades]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePrioridades[P]>
      : GetScalarType<T[P], AggregatePrioridades[P]>
  }




  export type PrioridadesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PrioridadesWhereInput
    orderBy?: PrioridadesOrderByWithAggregationInput | PrioridadesOrderByWithAggregationInput[]
    by: PrioridadesScalarFieldEnum[] | PrioridadesScalarFieldEnum
    having?: PrioridadesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PrioridadesCountAggregateInputType | true
    _avg?: PrioridadesAvgAggregateInputType
    _sum?: PrioridadesSumAggregateInputType
    _min?: PrioridadesMinAggregateInputType
    _max?: PrioridadesMaxAggregateInputType
  }

  export type PrioridadesGroupByOutputType = {
    id: number
    nome: string
    cor_fundo: string
    cor_fonte: string
    activo: boolean
    userId: string
    _count: PrioridadesCountAggregateOutputType | null
    _avg: PrioridadesAvgAggregateOutputType | null
    _sum: PrioridadesSumAggregateOutputType | null
    _min: PrioridadesMinAggregateOutputType | null
    _max: PrioridadesMaxAggregateOutputType | null
  }

  type GetPrioridadesGroupByPayload<T extends PrioridadesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PrioridadesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PrioridadesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PrioridadesGroupByOutputType[P]>
            : GetScalarType<T[P], PrioridadesGroupByOutputType[P]>
        }
      >
    >


  export type PrioridadesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    cor_fundo?: boolean
    cor_fonte?: boolean
    activo?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["prioridades"]>


  export type PrioridadesSelectScalar = {
    id?: boolean
    nome?: boolean
    cor_fundo?: boolean
    cor_fonte?: boolean
    activo?: boolean
    userId?: boolean
  }

  export type PrioridadesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PrioridadesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Prioridades"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      cor_fundo: string
      cor_fonte: string
      activo: boolean
      userId: string
    }, ExtArgs["result"]["prioridades"]>
    composites: {}
  }

  type PrioridadesGetPayload<S extends boolean | null | undefined | PrioridadesDefaultArgs> = $Result.GetResult<Prisma.$PrioridadesPayload, S>

  type PrioridadesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PrioridadesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PrioridadesCountAggregateInputType | true
    }

  export interface PrioridadesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Prioridades'], meta: { name: 'Prioridades' } }
    /**
     * Find zero or one Prioridades that matches the filter.
     * @param {PrioridadesFindUniqueArgs} args - Arguments to find a Prioridades
     * @example
     * // Get one Prioridades
     * const prioridades = await prisma.prioridades.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PrioridadesFindUniqueArgs>(args: SelectSubset<T, PrioridadesFindUniqueArgs<ExtArgs>>): Prisma__PrioridadesClient<$Result.GetResult<Prisma.$PrioridadesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Prioridades that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PrioridadesFindUniqueOrThrowArgs} args - Arguments to find a Prioridades
     * @example
     * // Get one Prioridades
     * const prioridades = await prisma.prioridades.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PrioridadesFindUniqueOrThrowArgs>(args: SelectSubset<T, PrioridadesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PrioridadesClient<$Result.GetResult<Prisma.$PrioridadesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Prioridades that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrioridadesFindFirstArgs} args - Arguments to find a Prioridades
     * @example
     * // Get one Prioridades
     * const prioridades = await prisma.prioridades.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PrioridadesFindFirstArgs>(args?: SelectSubset<T, PrioridadesFindFirstArgs<ExtArgs>>): Prisma__PrioridadesClient<$Result.GetResult<Prisma.$PrioridadesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Prioridades that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrioridadesFindFirstOrThrowArgs} args - Arguments to find a Prioridades
     * @example
     * // Get one Prioridades
     * const prioridades = await prisma.prioridades.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PrioridadesFindFirstOrThrowArgs>(args?: SelectSubset<T, PrioridadesFindFirstOrThrowArgs<ExtArgs>>): Prisma__PrioridadesClient<$Result.GetResult<Prisma.$PrioridadesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Prioridades that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrioridadesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Prioridades
     * const prioridades = await prisma.prioridades.findMany()
     * 
     * // Get first 10 Prioridades
     * const prioridades = await prisma.prioridades.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const prioridadesWithIdOnly = await prisma.prioridades.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PrioridadesFindManyArgs>(args?: SelectSubset<T, PrioridadesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrioridadesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Prioridades.
     * @param {PrioridadesCreateArgs} args - Arguments to create a Prioridades.
     * @example
     * // Create one Prioridades
     * const Prioridades = await prisma.prioridades.create({
     *   data: {
     *     // ... data to create a Prioridades
     *   }
     * })
     * 
     */
    create<T extends PrioridadesCreateArgs>(args: SelectSubset<T, PrioridadesCreateArgs<ExtArgs>>): Prisma__PrioridadesClient<$Result.GetResult<Prisma.$PrioridadesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Prioridades.
     * @param {PrioridadesCreateManyArgs} args - Arguments to create many Prioridades.
     * @example
     * // Create many Prioridades
     * const prioridades = await prisma.prioridades.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PrioridadesCreateManyArgs>(args?: SelectSubset<T, PrioridadesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Prioridades.
     * @param {PrioridadesDeleteArgs} args - Arguments to delete one Prioridades.
     * @example
     * // Delete one Prioridades
     * const Prioridades = await prisma.prioridades.delete({
     *   where: {
     *     // ... filter to delete one Prioridades
     *   }
     * })
     * 
     */
    delete<T extends PrioridadesDeleteArgs>(args: SelectSubset<T, PrioridadesDeleteArgs<ExtArgs>>): Prisma__PrioridadesClient<$Result.GetResult<Prisma.$PrioridadesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Prioridades.
     * @param {PrioridadesUpdateArgs} args - Arguments to update one Prioridades.
     * @example
     * // Update one Prioridades
     * const prioridades = await prisma.prioridades.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PrioridadesUpdateArgs>(args: SelectSubset<T, PrioridadesUpdateArgs<ExtArgs>>): Prisma__PrioridadesClient<$Result.GetResult<Prisma.$PrioridadesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Prioridades.
     * @param {PrioridadesDeleteManyArgs} args - Arguments to filter Prioridades to delete.
     * @example
     * // Delete a few Prioridades
     * const { count } = await prisma.prioridades.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PrioridadesDeleteManyArgs>(args?: SelectSubset<T, PrioridadesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Prioridades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrioridadesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Prioridades
     * const prioridades = await prisma.prioridades.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PrioridadesUpdateManyArgs>(args: SelectSubset<T, PrioridadesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Prioridades.
     * @param {PrioridadesUpsertArgs} args - Arguments to update or create a Prioridades.
     * @example
     * // Update or create a Prioridades
     * const prioridades = await prisma.prioridades.upsert({
     *   create: {
     *     // ... data to create a Prioridades
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Prioridades we want to update
     *   }
     * })
     */
    upsert<T extends PrioridadesUpsertArgs>(args: SelectSubset<T, PrioridadesUpsertArgs<ExtArgs>>): Prisma__PrioridadesClient<$Result.GetResult<Prisma.$PrioridadesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Prioridades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrioridadesCountArgs} args - Arguments to filter Prioridades to count.
     * @example
     * // Count the number of Prioridades
     * const count = await prisma.prioridades.count({
     *   where: {
     *     // ... the filter for the Prioridades we want to count
     *   }
     * })
    **/
    count<T extends PrioridadesCountArgs>(
      args?: Subset<T, PrioridadesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PrioridadesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Prioridades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrioridadesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PrioridadesAggregateArgs>(args: Subset<T, PrioridadesAggregateArgs>): Prisma.PrismaPromise<GetPrioridadesAggregateType<T>>

    /**
     * Group by Prioridades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrioridadesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PrioridadesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PrioridadesGroupByArgs['orderBy'] }
        : { orderBy?: PrioridadesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PrioridadesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPrioridadesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Prioridades model
   */
  readonly fields: PrioridadesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Prioridades.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PrioridadesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Prioridades model
   */ 
  interface PrioridadesFieldRefs {
    readonly id: FieldRef<"Prioridades", 'Int'>
    readonly nome: FieldRef<"Prioridades", 'String'>
    readonly cor_fundo: FieldRef<"Prioridades", 'String'>
    readonly cor_fonte: FieldRef<"Prioridades", 'String'>
    readonly activo: FieldRef<"Prioridades", 'Boolean'>
    readonly userId: FieldRef<"Prioridades", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Prioridades findUnique
   */
  export type PrioridadesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prioridades
     */
    select?: PrioridadesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrioridadesInclude<ExtArgs> | null
    /**
     * Filter, which Prioridades to fetch.
     */
    where: PrioridadesWhereUniqueInput
  }

  /**
   * Prioridades findUniqueOrThrow
   */
  export type PrioridadesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prioridades
     */
    select?: PrioridadesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrioridadesInclude<ExtArgs> | null
    /**
     * Filter, which Prioridades to fetch.
     */
    where: PrioridadesWhereUniqueInput
  }

  /**
   * Prioridades findFirst
   */
  export type PrioridadesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prioridades
     */
    select?: PrioridadesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrioridadesInclude<ExtArgs> | null
    /**
     * Filter, which Prioridades to fetch.
     */
    where?: PrioridadesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prioridades to fetch.
     */
    orderBy?: PrioridadesOrderByWithRelationInput | PrioridadesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Prioridades.
     */
    cursor?: PrioridadesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prioridades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prioridades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Prioridades.
     */
    distinct?: PrioridadesScalarFieldEnum | PrioridadesScalarFieldEnum[]
  }

  /**
   * Prioridades findFirstOrThrow
   */
  export type PrioridadesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prioridades
     */
    select?: PrioridadesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrioridadesInclude<ExtArgs> | null
    /**
     * Filter, which Prioridades to fetch.
     */
    where?: PrioridadesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prioridades to fetch.
     */
    orderBy?: PrioridadesOrderByWithRelationInput | PrioridadesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Prioridades.
     */
    cursor?: PrioridadesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prioridades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prioridades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Prioridades.
     */
    distinct?: PrioridadesScalarFieldEnum | PrioridadesScalarFieldEnum[]
  }

  /**
   * Prioridades findMany
   */
  export type PrioridadesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prioridades
     */
    select?: PrioridadesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrioridadesInclude<ExtArgs> | null
    /**
     * Filter, which Prioridades to fetch.
     */
    where?: PrioridadesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prioridades to fetch.
     */
    orderBy?: PrioridadesOrderByWithRelationInput | PrioridadesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Prioridades.
     */
    cursor?: PrioridadesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prioridades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prioridades.
     */
    skip?: number
    distinct?: PrioridadesScalarFieldEnum | PrioridadesScalarFieldEnum[]
  }

  /**
   * Prioridades create
   */
  export type PrioridadesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prioridades
     */
    select?: PrioridadesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrioridadesInclude<ExtArgs> | null
    /**
     * The data needed to create a Prioridades.
     */
    data: XOR<PrioridadesCreateInput, PrioridadesUncheckedCreateInput>
  }

  /**
   * Prioridades createMany
   */
  export type PrioridadesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Prioridades.
     */
    data: PrioridadesCreateManyInput | PrioridadesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Prioridades update
   */
  export type PrioridadesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prioridades
     */
    select?: PrioridadesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrioridadesInclude<ExtArgs> | null
    /**
     * The data needed to update a Prioridades.
     */
    data: XOR<PrioridadesUpdateInput, PrioridadesUncheckedUpdateInput>
    /**
     * Choose, which Prioridades to update.
     */
    where: PrioridadesWhereUniqueInput
  }

  /**
   * Prioridades updateMany
   */
  export type PrioridadesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Prioridades.
     */
    data: XOR<PrioridadesUpdateManyMutationInput, PrioridadesUncheckedUpdateManyInput>
    /**
     * Filter which Prioridades to update
     */
    where?: PrioridadesWhereInput
  }

  /**
   * Prioridades upsert
   */
  export type PrioridadesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prioridades
     */
    select?: PrioridadesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrioridadesInclude<ExtArgs> | null
    /**
     * The filter to search for the Prioridades to update in case it exists.
     */
    where: PrioridadesWhereUniqueInput
    /**
     * In case the Prioridades found by the `where` argument doesn't exist, create a new Prioridades with this data.
     */
    create: XOR<PrioridadesCreateInput, PrioridadesUncheckedCreateInput>
    /**
     * In case the Prioridades was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PrioridadesUpdateInput, PrioridadesUncheckedUpdateInput>
  }

  /**
   * Prioridades delete
   */
  export type PrioridadesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prioridades
     */
    select?: PrioridadesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrioridadesInclude<ExtArgs> | null
    /**
     * Filter which Prioridades to delete.
     */
    where: PrioridadesWhereUniqueInput
  }

  /**
   * Prioridades deleteMany
   */
  export type PrioridadesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Prioridades to delete
     */
    where?: PrioridadesWhereInput
  }

  /**
   * Prioridades without action
   */
  export type PrioridadesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prioridades
     */
    select?: PrioridadesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrioridadesInclude<ExtArgs> | null
  }


  /**
   * Model Parceiro
   */

  export type AggregateParceiro = {
    _count: ParceiroCountAggregateOutputType | null
    _avg: ParceiroAvgAggregateOutputType | null
    _sum: ParceiroSumAggregateOutputType | null
    _min: ParceiroMinAggregateOutputType | null
    _max: ParceiroMaxAggregateOutputType | null
  }

  export type ParceiroAvgAggregateOutputType = {
    id: number | null
  }

  export type ParceiroSumAggregateOutputType = {
    id: number | null
  }

  export type ParceiroMinAggregateOutputType = {
    id: number | null
    nome: string | null
    uf: string | null
    cidade: string | null
    userId: string | null
  }

  export type ParceiroMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    uf: string | null
    cidade: string | null
    userId: string | null
  }

  export type ParceiroCountAggregateOutputType = {
    id: number
    nome: number
    uf: number
    cidade: number
    userId: number
    _all: number
  }


  export type ParceiroAvgAggregateInputType = {
    id?: true
  }

  export type ParceiroSumAggregateInputType = {
    id?: true
  }

  export type ParceiroMinAggregateInputType = {
    id?: true
    nome?: true
    uf?: true
    cidade?: true
    userId?: true
  }

  export type ParceiroMaxAggregateInputType = {
    id?: true
    nome?: true
    uf?: true
    cidade?: true
    userId?: true
  }

  export type ParceiroCountAggregateInputType = {
    id?: true
    nome?: true
    uf?: true
    cidade?: true
    userId?: true
    _all?: true
  }

  export type ParceiroAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Parceiro to aggregate.
     */
    where?: ParceiroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parceiros to fetch.
     */
    orderBy?: ParceiroOrderByWithRelationInput | ParceiroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ParceiroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parceiros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parceiros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Parceiros
    **/
    _count?: true | ParceiroCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ParceiroAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ParceiroSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ParceiroMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ParceiroMaxAggregateInputType
  }

  export type GetParceiroAggregateType<T extends ParceiroAggregateArgs> = {
        [P in keyof T & keyof AggregateParceiro]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateParceiro[P]>
      : GetScalarType<T[P], AggregateParceiro[P]>
  }




  export type ParceiroGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParceiroWhereInput
    orderBy?: ParceiroOrderByWithAggregationInput | ParceiroOrderByWithAggregationInput[]
    by: ParceiroScalarFieldEnum[] | ParceiroScalarFieldEnum
    having?: ParceiroScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ParceiroCountAggregateInputType | true
    _avg?: ParceiroAvgAggregateInputType
    _sum?: ParceiroSumAggregateInputType
    _min?: ParceiroMinAggregateInputType
    _max?: ParceiroMaxAggregateInputType
  }

  export type ParceiroGroupByOutputType = {
    id: number
    nome: string
    uf: string
    cidade: string
    userId: string
    _count: ParceiroCountAggregateOutputType | null
    _avg: ParceiroAvgAggregateOutputType | null
    _sum: ParceiroSumAggregateOutputType | null
    _min: ParceiroMinAggregateOutputType | null
    _max: ParceiroMaxAggregateOutputType | null
  }

  type GetParceiroGroupByPayload<T extends ParceiroGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ParceiroGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ParceiroGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ParceiroGroupByOutputType[P]>
            : GetScalarType<T[P], ParceiroGroupByOutputType[P]>
        }
      >
    >


  export type ParceiroSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    uf?: boolean
    cidade?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["parceiro"]>


  export type ParceiroSelectScalar = {
    id?: boolean
    nome?: boolean
    uf?: boolean
    cidade?: boolean
    userId?: boolean
  }

  export type ParceiroInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ParceiroPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Parceiro"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      uf: string
      cidade: string
      userId: string
    }, ExtArgs["result"]["parceiro"]>
    composites: {}
  }

  type ParceiroGetPayload<S extends boolean | null | undefined | ParceiroDefaultArgs> = $Result.GetResult<Prisma.$ParceiroPayload, S>

  type ParceiroCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ParceiroFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ParceiroCountAggregateInputType | true
    }

  export interface ParceiroDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Parceiro'], meta: { name: 'Parceiro' } }
    /**
     * Find zero or one Parceiro that matches the filter.
     * @param {ParceiroFindUniqueArgs} args - Arguments to find a Parceiro
     * @example
     * // Get one Parceiro
     * const parceiro = await prisma.parceiro.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ParceiroFindUniqueArgs>(args: SelectSubset<T, ParceiroFindUniqueArgs<ExtArgs>>): Prisma__ParceiroClient<$Result.GetResult<Prisma.$ParceiroPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Parceiro that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ParceiroFindUniqueOrThrowArgs} args - Arguments to find a Parceiro
     * @example
     * // Get one Parceiro
     * const parceiro = await prisma.parceiro.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ParceiroFindUniqueOrThrowArgs>(args: SelectSubset<T, ParceiroFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ParceiroClient<$Result.GetResult<Prisma.$ParceiroPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Parceiro that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParceiroFindFirstArgs} args - Arguments to find a Parceiro
     * @example
     * // Get one Parceiro
     * const parceiro = await prisma.parceiro.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ParceiroFindFirstArgs>(args?: SelectSubset<T, ParceiroFindFirstArgs<ExtArgs>>): Prisma__ParceiroClient<$Result.GetResult<Prisma.$ParceiroPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Parceiro that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParceiroFindFirstOrThrowArgs} args - Arguments to find a Parceiro
     * @example
     * // Get one Parceiro
     * const parceiro = await prisma.parceiro.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ParceiroFindFirstOrThrowArgs>(args?: SelectSubset<T, ParceiroFindFirstOrThrowArgs<ExtArgs>>): Prisma__ParceiroClient<$Result.GetResult<Prisma.$ParceiroPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Parceiros that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParceiroFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Parceiros
     * const parceiros = await prisma.parceiro.findMany()
     * 
     * // Get first 10 Parceiros
     * const parceiros = await prisma.parceiro.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const parceiroWithIdOnly = await prisma.parceiro.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ParceiroFindManyArgs>(args?: SelectSubset<T, ParceiroFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParceiroPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Parceiro.
     * @param {ParceiroCreateArgs} args - Arguments to create a Parceiro.
     * @example
     * // Create one Parceiro
     * const Parceiro = await prisma.parceiro.create({
     *   data: {
     *     // ... data to create a Parceiro
     *   }
     * })
     * 
     */
    create<T extends ParceiroCreateArgs>(args: SelectSubset<T, ParceiroCreateArgs<ExtArgs>>): Prisma__ParceiroClient<$Result.GetResult<Prisma.$ParceiroPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Parceiros.
     * @param {ParceiroCreateManyArgs} args - Arguments to create many Parceiros.
     * @example
     * // Create many Parceiros
     * const parceiro = await prisma.parceiro.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ParceiroCreateManyArgs>(args?: SelectSubset<T, ParceiroCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Parceiro.
     * @param {ParceiroDeleteArgs} args - Arguments to delete one Parceiro.
     * @example
     * // Delete one Parceiro
     * const Parceiro = await prisma.parceiro.delete({
     *   where: {
     *     // ... filter to delete one Parceiro
     *   }
     * })
     * 
     */
    delete<T extends ParceiroDeleteArgs>(args: SelectSubset<T, ParceiroDeleteArgs<ExtArgs>>): Prisma__ParceiroClient<$Result.GetResult<Prisma.$ParceiroPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Parceiro.
     * @param {ParceiroUpdateArgs} args - Arguments to update one Parceiro.
     * @example
     * // Update one Parceiro
     * const parceiro = await prisma.parceiro.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ParceiroUpdateArgs>(args: SelectSubset<T, ParceiroUpdateArgs<ExtArgs>>): Prisma__ParceiroClient<$Result.GetResult<Prisma.$ParceiroPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Parceiros.
     * @param {ParceiroDeleteManyArgs} args - Arguments to filter Parceiros to delete.
     * @example
     * // Delete a few Parceiros
     * const { count } = await prisma.parceiro.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ParceiroDeleteManyArgs>(args?: SelectSubset<T, ParceiroDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Parceiros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParceiroUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Parceiros
     * const parceiro = await prisma.parceiro.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ParceiroUpdateManyArgs>(args: SelectSubset<T, ParceiroUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Parceiro.
     * @param {ParceiroUpsertArgs} args - Arguments to update or create a Parceiro.
     * @example
     * // Update or create a Parceiro
     * const parceiro = await prisma.parceiro.upsert({
     *   create: {
     *     // ... data to create a Parceiro
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Parceiro we want to update
     *   }
     * })
     */
    upsert<T extends ParceiroUpsertArgs>(args: SelectSubset<T, ParceiroUpsertArgs<ExtArgs>>): Prisma__ParceiroClient<$Result.GetResult<Prisma.$ParceiroPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Parceiros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParceiroCountArgs} args - Arguments to filter Parceiros to count.
     * @example
     * // Count the number of Parceiros
     * const count = await prisma.parceiro.count({
     *   where: {
     *     // ... the filter for the Parceiros we want to count
     *   }
     * })
    **/
    count<T extends ParceiroCountArgs>(
      args?: Subset<T, ParceiroCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ParceiroCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Parceiro.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParceiroAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ParceiroAggregateArgs>(args: Subset<T, ParceiroAggregateArgs>): Prisma.PrismaPromise<GetParceiroAggregateType<T>>

    /**
     * Group by Parceiro.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParceiroGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ParceiroGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ParceiroGroupByArgs['orderBy'] }
        : { orderBy?: ParceiroGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ParceiroGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParceiroGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Parceiro model
   */
  readonly fields: ParceiroFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Parceiro.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ParceiroClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Parceiro model
   */ 
  interface ParceiroFieldRefs {
    readonly id: FieldRef<"Parceiro", 'Int'>
    readonly nome: FieldRef<"Parceiro", 'String'>
    readonly uf: FieldRef<"Parceiro", 'String'>
    readonly cidade: FieldRef<"Parceiro", 'String'>
    readonly userId: FieldRef<"Parceiro", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Parceiro findUnique
   */
  export type ParceiroFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parceiro
     */
    select?: ParceiroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParceiroInclude<ExtArgs> | null
    /**
     * Filter, which Parceiro to fetch.
     */
    where: ParceiroWhereUniqueInput
  }

  /**
   * Parceiro findUniqueOrThrow
   */
  export type ParceiroFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parceiro
     */
    select?: ParceiroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParceiroInclude<ExtArgs> | null
    /**
     * Filter, which Parceiro to fetch.
     */
    where: ParceiroWhereUniqueInput
  }

  /**
   * Parceiro findFirst
   */
  export type ParceiroFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parceiro
     */
    select?: ParceiroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParceiroInclude<ExtArgs> | null
    /**
     * Filter, which Parceiro to fetch.
     */
    where?: ParceiroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parceiros to fetch.
     */
    orderBy?: ParceiroOrderByWithRelationInput | ParceiroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Parceiros.
     */
    cursor?: ParceiroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parceiros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parceiros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Parceiros.
     */
    distinct?: ParceiroScalarFieldEnum | ParceiroScalarFieldEnum[]
  }

  /**
   * Parceiro findFirstOrThrow
   */
  export type ParceiroFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parceiro
     */
    select?: ParceiroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParceiroInclude<ExtArgs> | null
    /**
     * Filter, which Parceiro to fetch.
     */
    where?: ParceiroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parceiros to fetch.
     */
    orderBy?: ParceiroOrderByWithRelationInput | ParceiroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Parceiros.
     */
    cursor?: ParceiroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parceiros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parceiros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Parceiros.
     */
    distinct?: ParceiroScalarFieldEnum | ParceiroScalarFieldEnum[]
  }

  /**
   * Parceiro findMany
   */
  export type ParceiroFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parceiro
     */
    select?: ParceiroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParceiroInclude<ExtArgs> | null
    /**
     * Filter, which Parceiros to fetch.
     */
    where?: ParceiroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parceiros to fetch.
     */
    orderBy?: ParceiroOrderByWithRelationInput | ParceiroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Parceiros.
     */
    cursor?: ParceiroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parceiros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parceiros.
     */
    skip?: number
    distinct?: ParceiroScalarFieldEnum | ParceiroScalarFieldEnum[]
  }

  /**
   * Parceiro create
   */
  export type ParceiroCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parceiro
     */
    select?: ParceiroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParceiroInclude<ExtArgs> | null
    /**
     * The data needed to create a Parceiro.
     */
    data: XOR<ParceiroCreateInput, ParceiroUncheckedCreateInput>
  }

  /**
   * Parceiro createMany
   */
  export type ParceiroCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Parceiros.
     */
    data: ParceiroCreateManyInput | ParceiroCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Parceiro update
   */
  export type ParceiroUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parceiro
     */
    select?: ParceiroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParceiroInclude<ExtArgs> | null
    /**
     * The data needed to update a Parceiro.
     */
    data: XOR<ParceiroUpdateInput, ParceiroUncheckedUpdateInput>
    /**
     * Choose, which Parceiro to update.
     */
    where: ParceiroWhereUniqueInput
  }

  /**
   * Parceiro updateMany
   */
  export type ParceiroUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Parceiros.
     */
    data: XOR<ParceiroUpdateManyMutationInput, ParceiroUncheckedUpdateManyInput>
    /**
     * Filter which Parceiros to update
     */
    where?: ParceiroWhereInput
  }

  /**
   * Parceiro upsert
   */
  export type ParceiroUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parceiro
     */
    select?: ParceiroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParceiroInclude<ExtArgs> | null
    /**
     * The filter to search for the Parceiro to update in case it exists.
     */
    where: ParceiroWhereUniqueInput
    /**
     * In case the Parceiro found by the `where` argument doesn't exist, create a new Parceiro with this data.
     */
    create: XOR<ParceiroCreateInput, ParceiroUncheckedCreateInput>
    /**
     * In case the Parceiro was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ParceiroUpdateInput, ParceiroUncheckedUpdateInput>
  }

  /**
   * Parceiro delete
   */
  export type ParceiroDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parceiro
     */
    select?: ParceiroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParceiroInclude<ExtArgs> | null
    /**
     * Filter which Parceiro to delete.
     */
    where: ParceiroWhereUniqueInput
  }

  /**
   * Parceiro deleteMany
   */
  export type ParceiroDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Parceiros to delete
     */
    where?: ParceiroWhereInput
  }

  /**
   * Parceiro without action
   */
  export type ParceiroDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parceiro
     */
    select?: ParceiroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParceiroInclude<ExtArgs> | null
  }


  /**
   * Model Cliente
   */

  export type AggregateCliente = {
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  export type ClienteAvgAggregateOutputType = {
    id: number | null
  }

  export type ClienteSumAggregateOutputType = {
    id: number | null
  }

  export type ClienteMinAggregateOutputType = {
    id: number | null
    nome: string | null
    cpf: string | null
    rg: string | null
    userId: string | null
  }

  export type ClienteMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    cpf: string | null
    rg: string | null
    userId: string | null
  }

  export type ClienteCountAggregateOutputType = {
    id: number
    nome: number
    cpf: number
    rg: number
    userId: number
    _all: number
  }


  export type ClienteAvgAggregateInputType = {
    id?: true
  }

  export type ClienteSumAggregateInputType = {
    id?: true
  }

  export type ClienteMinAggregateInputType = {
    id?: true
    nome?: true
    cpf?: true
    rg?: true
    userId?: true
  }

  export type ClienteMaxAggregateInputType = {
    id?: true
    nome?: true
    cpf?: true
    rg?: true
    userId?: true
  }

  export type ClienteCountAggregateInputType = {
    id?: true
    nome?: true
    cpf?: true
    rg?: true
    userId?: true
    _all?: true
  }

  export type ClienteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cliente to aggregate.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clientes
    **/
    _count?: true | ClienteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClienteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClienteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClienteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClienteMaxAggregateInputType
  }

  export type GetClienteAggregateType<T extends ClienteAggregateArgs> = {
        [P in keyof T & keyof AggregateCliente]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCliente[P]>
      : GetScalarType<T[P], AggregateCliente[P]>
  }




  export type ClienteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClienteWhereInput
    orderBy?: ClienteOrderByWithAggregationInput | ClienteOrderByWithAggregationInput[]
    by: ClienteScalarFieldEnum[] | ClienteScalarFieldEnum
    having?: ClienteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClienteCountAggregateInputType | true
    _avg?: ClienteAvgAggregateInputType
    _sum?: ClienteSumAggregateInputType
    _min?: ClienteMinAggregateInputType
    _max?: ClienteMaxAggregateInputType
  }

  export type ClienteGroupByOutputType = {
    id: number
    nome: string
    cpf: string
    rg: string
    userId: string
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  type GetClienteGroupByPayload<T extends ClienteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClienteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClienteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClienteGroupByOutputType[P]>
            : GetScalarType<T[P], ClienteGroupByOutputType[P]>
        }
      >
    >


  export type ClienteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    cpf?: boolean
    rg?: boolean
    userId?: boolean
    documento?: boolean | Cliente$documentoArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | ClienteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cliente"]>


  export type ClienteSelectScalar = {
    id?: boolean
    nome?: boolean
    cpf?: boolean
    rg?: boolean
    userId?: boolean
  }

  export type ClienteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documento?: boolean | Cliente$documentoArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | ClienteCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ClientePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Cliente"
    objects: {
      documento: Prisma.$DocumentoPayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      cpf: string
      rg: string
      userId: string
    }, ExtArgs["result"]["cliente"]>
    composites: {}
  }

  type ClienteGetPayload<S extends boolean | null | undefined | ClienteDefaultArgs> = $Result.GetResult<Prisma.$ClientePayload, S>

  type ClienteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ClienteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ClienteCountAggregateInputType | true
    }

  export interface ClienteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cliente'], meta: { name: 'Cliente' } }
    /**
     * Find zero or one Cliente that matches the filter.
     * @param {ClienteFindUniqueArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClienteFindUniqueArgs>(args: SelectSubset<T, ClienteFindUniqueArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Cliente that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ClienteFindUniqueOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClienteFindUniqueOrThrowArgs>(args: SelectSubset<T, ClienteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Cliente that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindFirstArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClienteFindFirstArgs>(args?: SelectSubset<T, ClienteFindFirstArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Cliente that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindFirstOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClienteFindFirstOrThrowArgs>(args?: SelectSubset<T, ClienteFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Clientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clientes
     * const clientes = await prisma.cliente.findMany()
     * 
     * // Get first 10 Clientes
     * const clientes = await prisma.cliente.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clienteWithIdOnly = await prisma.cliente.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClienteFindManyArgs>(args?: SelectSubset<T, ClienteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Cliente.
     * @param {ClienteCreateArgs} args - Arguments to create a Cliente.
     * @example
     * // Create one Cliente
     * const Cliente = await prisma.cliente.create({
     *   data: {
     *     // ... data to create a Cliente
     *   }
     * })
     * 
     */
    create<T extends ClienteCreateArgs>(args: SelectSubset<T, ClienteCreateArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Clientes.
     * @param {ClienteCreateManyArgs} args - Arguments to create many Clientes.
     * @example
     * // Create many Clientes
     * const cliente = await prisma.cliente.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClienteCreateManyArgs>(args?: SelectSubset<T, ClienteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Cliente.
     * @param {ClienteDeleteArgs} args - Arguments to delete one Cliente.
     * @example
     * // Delete one Cliente
     * const Cliente = await prisma.cliente.delete({
     *   where: {
     *     // ... filter to delete one Cliente
     *   }
     * })
     * 
     */
    delete<T extends ClienteDeleteArgs>(args: SelectSubset<T, ClienteDeleteArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Cliente.
     * @param {ClienteUpdateArgs} args - Arguments to update one Cliente.
     * @example
     * // Update one Cliente
     * const cliente = await prisma.cliente.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClienteUpdateArgs>(args: SelectSubset<T, ClienteUpdateArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Clientes.
     * @param {ClienteDeleteManyArgs} args - Arguments to filter Clientes to delete.
     * @example
     * // Delete a few Clientes
     * const { count } = await prisma.cliente.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClienteDeleteManyArgs>(args?: SelectSubset<T, ClienteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clientes
     * const cliente = await prisma.cliente.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClienteUpdateManyArgs>(args: SelectSubset<T, ClienteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cliente.
     * @param {ClienteUpsertArgs} args - Arguments to update or create a Cliente.
     * @example
     * // Update or create a Cliente
     * const cliente = await prisma.cliente.upsert({
     *   create: {
     *     // ... data to create a Cliente
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cliente we want to update
     *   }
     * })
     */
    upsert<T extends ClienteUpsertArgs>(args: SelectSubset<T, ClienteUpsertArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteCountArgs} args - Arguments to filter Clientes to count.
     * @example
     * // Count the number of Clientes
     * const count = await prisma.cliente.count({
     *   where: {
     *     // ... the filter for the Clientes we want to count
     *   }
     * })
    **/
    count<T extends ClienteCountArgs>(
      args?: Subset<T, ClienteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClienteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClienteAggregateArgs>(args: Subset<T, ClienteAggregateArgs>): Prisma.PrismaPromise<GetClienteAggregateType<T>>

    /**
     * Group by Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClienteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClienteGroupByArgs['orderBy'] }
        : { orderBy?: ClienteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClienteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClienteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cliente model
   */
  readonly fields: ClienteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cliente.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClienteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    documento<T extends Cliente$documentoArgs<ExtArgs> = {}>(args?: Subset<T, Cliente$documentoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "findMany"> | Null>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Cliente model
   */ 
  interface ClienteFieldRefs {
    readonly id: FieldRef<"Cliente", 'Int'>
    readonly nome: FieldRef<"Cliente", 'String'>
    readonly cpf: FieldRef<"Cliente", 'String'>
    readonly rg: FieldRef<"Cliente", 'String'>
    readonly userId: FieldRef<"Cliente", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Cliente findUnique
   */
  export type ClienteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente findUniqueOrThrow
   */
  export type ClienteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente findFirst
   */
  export type ClienteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clientes.
     */
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Cliente findFirstOrThrow
   */
  export type ClienteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clientes.
     */
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Cliente findMany
   */
  export type ClienteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Clientes to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Cliente create
   */
  export type ClienteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The data needed to create a Cliente.
     */
    data: XOR<ClienteCreateInput, ClienteUncheckedCreateInput>
  }

  /**
   * Cliente createMany
   */
  export type ClienteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clientes.
     */
    data: ClienteCreateManyInput | ClienteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Cliente update
   */
  export type ClienteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The data needed to update a Cliente.
     */
    data: XOR<ClienteUpdateInput, ClienteUncheckedUpdateInput>
    /**
     * Choose, which Cliente to update.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente updateMany
   */
  export type ClienteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clientes.
     */
    data: XOR<ClienteUpdateManyMutationInput, ClienteUncheckedUpdateManyInput>
    /**
     * Filter which Clientes to update
     */
    where?: ClienteWhereInput
  }

  /**
   * Cliente upsert
   */
  export type ClienteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The filter to search for the Cliente to update in case it exists.
     */
    where: ClienteWhereUniqueInput
    /**
     * In case the Cliente found by the `where` argument doesn't exist, create a new Cliente with this data.
     */
    create: XOR<ClienteCreateInput, ClienteUncheckedCreateInput>
    /**
     * In case the Cliente was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClienteUpdateInput, ClienteUncheckedUpdateInput>
  }

  /**
   * Cliente delete
   */
  export type ClienteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter which Cliente to delete.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente deleteMany
   */
  export type ClienteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clientes to delete
     */
    where?: ClienteWhereInput
  }

  /**
   * Cliente.documento
   */
  export type Cliente$documentoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoInclude<ExtArgs> | null
    where?: DocumentoWhereInput
    orderBy?: DocumentoOrderByWithRelationInput | DocumentoOrderByWithRelationInput[]
    cursor?: DocumentoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentoScalarFieldEnum | DocumentoScalarFieldEnum[]
  }

  /**
   * Cliente without action
   */
  export type ClienteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
  }


  /**
   * Model Banco
   */

  export type AggregateBanco = {
    _count: BancoCountAggregateOutputType | null
    _avg: BancoAvgAggregateOutputType | null
    _sum: BancoSumAggregateOutputType | null
    _min: BancoMinAggregateOutputType | null
    _max: BancoMaxAggregateOutputType | null
  }

  export type BancoAvgAggregateOutputType = {
    id: number | null
  }

  export type BancoSumAggregateOutputType = {
    id: number | null
  }

  export type BancoMinAggregateOutputType = {
    id: number | null
    nome: string | null
    agencia: string | null
    conta: string | null
    userId: string | null
  }

  export type BancoMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    agencia: string | null
    conta: string | null
    userId: string | null
  }

  export type BancoCountAggregateOutputType = {
    id: number
    nome: number
    agencia: number
    conta: number
    userId: number
    _all: number
  }


  export type BancoAvgAggregateInputType = {
    id?: true
  }

  export type BancoSumAggregateInputType = {
    id?: true
  }

  export type BancoMinAggregateInputType = {
    id?: true
    nome?: true
    agencia?: true
    conta?: true
    userId?: true
  }

  export type BancoMaxAggregateInputType = {
    id?: true
    nome?: true
    agencia?: true
    conta?: true
    userId?: true
  }

  export type BancoCountAggregateInputType = {
    id?: true
    nome?: true
    agencia?: true
    conta?: true
    userId?: true
    _all?: true
  }

  export type BancoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Banco to aggregate.
     */
    where?: BancoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bancos to fetch.
     */
    orderBy?: BancoOrderByWithRelationInput | BancoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BancoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bancos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bancos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Bancos
    **/
    _count?: true | BancoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BancoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BancoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BancoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BancoMaxAggregateInputType
  }

  export type GetBancoAggregateType<T extends BancoAggregateArgs> = {
        [P in keyof T & keyof AggregateBanco]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBanco[P]>
      : GetScalarType<T[P], AggregateBanco[P]>
  }




  export type BancoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BancoWhereInput
    orderBy?: BancoOrderByWithAggregationInput | BancoOrderByWithAggregationInput[]
    by: BancoScalarFieldEnum[] | BancoScalarFieldEnum
    having?: BancoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BancoCountAggregateInputType | true
    _avg?: BancoAvgAggregateInputType
    _sum?: BancoSumAggregateInputType
    _min?: BancoMinAggregateInputType
    _max?: BancoMaxAggregateInputType
  }

  export type BancoGroupByOutputType = {
    id: number
    nome: string
    agencia: string
    conta: string
    userId: string
    _count: BancoCountAggregateOutputType | null
    _avg: BancoAvgAggregateOutputType | null
    _sum: BancoSumAggregateOutputType | null
    _min: BancoMinAggregateOutputType | null
    _max: BancoMaxAggregateOutputType | null
  }

  type GetBancoGroupByPayload<T extends BancoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BancoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BancoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BancoGroupByOutputType[P]>
            : GetScalarType<T[P], BancoGroupByOutputType[P]>
        }
      >
    >


  export type BancoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    agencia?: boolean
    conta?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["banco"]>


  export type BancoSelectScalar = {
    id?: boolean
    nome?: boolean
    agencia?: boolean
    conta?: boolean
    userId?: boolean
  }

  export type BancoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $BancoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Banco"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      agencia: string
      conta: string
      userId: string
    }, ExtArgs["result"]["banco"]>
    composites: {}
  }

  type BancoGetPayload<S extends boolean | null | undefined | BancoDefaultArgs> = $Result.GetResult<Prisma.$BancoPayload, S>

  type BancoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BancoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BancoCountAggregateInputType | true
    }

  export interface BancoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Banco'], meta: { name: 'Banco' } }
    /**
     * Find zero or one Banco that matches the filter.
     * @param {BancoFindUniqueArgs} args - Arguments to find a Banco
     * @example
     * // Get one Banco
     * const banco = await prisma.banco.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BancoFindUniqueArgs>(args: SelectSubset<T, BancoFindUniqueArgs<ExtArgs>>): Prisma__BancoClient<$Result.GetResult<Prisma.$BancoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Banco that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BancoFindUniqueOrThrowArgs} args - Arguments to find a Banco
     * @example
     * // Get one Banco
     * const banco = await prisma.banco.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BancoFindUniqueOrThrowArgs>(args: SelectSubset<T, BancoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BancoClient<$Result.GetResult<Prisma.$BancoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Banco that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancoFindFirstArgs} args - Arguments to find a Banco
     * @example
     * // Get one Banco
     * const banco = await prisma.banco.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BancoFindFirstArgs>(args?: SelectSubset<T, BancoFindFirstArgs<ExtArgs>>): Prisma__BancoClient<$Result.GetResult<Prisma.$BancoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Banco that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancoFindFirstOrThrowArgs} args - Arguments to find a Banco
     * @example
     * // Get one Banco
     * const banco = await prisma.banco.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BancoFindFirstOrThrowArgs>(args?: SelectSubset<T, BancoFindFirstOrThrowArgs<ExtArgs>>): Prisma__BancoClient<$Result.GetResult<Prisma.$BancoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Bancos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bancos
     * const bancos = await prisma.banco.findMany()
     * 
     * // Get first 10 Bancos
     * const bancos = await prisma.banco.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bancoWithIdOnly = await prisma.banco.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BancoFindManyArgs>(args?: SelectSubset<T, BancoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BancoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Banco.
     * @param {BancoCreateArgs} args - Arguments to create a Banco.
     * @example
     * // Create one Banco
     * const Banco = await prisma.banco.create({
     *   data: {
     *     // ... data to create a Banco
     *   }
     * })
     * 
     */
    create<T extends BancoCreateArgs>(args: SelectSubset<T, BancoCreateArgs<ExtArgs>>): Prisma__BancoClient<$Result.GetResult<Prisma.$BancoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Bancos.
     * @param {BancoCreateManyArgs} args - Arguments to create many Bancos.
     * @example
     * // Create many Bancos
     * const banco = await prisma.banco.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BancoCreateManyArgs>(args?: SelectSubset<T, BancoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Banco.
     * @param {BancoDeleteArgs} args - Arguments to delete one Banco.
     * @example
     * // Delete one Banco
     * const Banco = await prisma.banco.delete({
     *   where: {
     *     // ... filter to delete one Banco
     *   }
     * })
     * 
     */
    delete<T extends BancoDeleteArgs>(args: SelectSubset<T, BancoDeleteArgs<ExtArgs>>): Prisma__BancoClient<$Result.GetResult<Prisma.$BancoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Banco.
     * @param {BancoUpdateArgs} args - Arguments to update one Banco.
     * @example
     * // Update one Banco
     * const banco = await prisma.banco.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BancoUpdateArgs>(args: SelectSubset<T, BancoUpdateArgs<ExtArgs>>): Prisma__BancoClient<$Result.GetResult<Prisma.$BancoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Bancos.
     * @param {BancoDeleteManyArgs} args - Arguments to filter Bancos to delete.
     * @example
     * // Delete a few Bancos
     * const { count } = await prisma.banco.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BancoDeleteManyArgs>(args?: SelectSubset<T, BancoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bancos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bancos
     * const banco = await prisma.banco.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BancoUpdateManyArgs>(args: SelectSubset<T, BancoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Banco.
     * @param {BancoUpsertArgs} args - Arguments to update or create a Banco.
     * @example
     * // Update or create a Banco
     * const banco = await prisma.banco.upsert({
     *   create: {
     *     // ... data to create a Banco
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Banco we want to update
     *   }
     * })
     */
    upsert<T extends BancoUpsertArgs>(args: SelectSubset<T, BancoUpsertArgs<ExtArgs>>): Prisma__BancoClient<$Result.GetResult<Prisma.$BancoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Bancos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancoCountArgs} args - Arguments to filter Bancos to count.
     * @example
     * // Count the number of Bancos
     * const count = await prisma.banco.count({
     *   where: {
     *     // ... the filter for the Bancos we want to count
     *   }
     * })
    **/
    count<T extends BancoCountArgs>(
      args?: Subset<T, BancoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BancoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Banco.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BancoAggregateArgs>(args: Subset<T, BancoAggregateArgs>): Prisma.PrismaPromise<GetBancoAggregateType<T>>

    /**
     * Group by Banco.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BancoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BancoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BancoGroupByArgs['orderBy'] }
        : { orderBy?: BancoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BancoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBancoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Banco model
   */
  readonly fields: BancoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Banco.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BancoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Banco model
   */ 
  interface BancoFieldRefs {
    readonly id: FieldRef<"Banco", 'Int'>
    readonly nome: FieldRef<"Banco", 'String'>
    readonly agencia: FieldRef<"Banco", 'String'>
    readonly conta: FieldRef<"Banco", 'String'>
    readonly userId: FieldRef<"Banco", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Banco findUnique
   */
  export type BancoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banco
     */
    select?: BancoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancoInclude<ExtArgs> | null
    /**
     * Filter, which Banco to fetch.
     */
    where: BancoWhereUniqueInput
  }

  /**
   * Banco findUniqueOrThrow
   */
  export type BancoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banco
     */
    select?: BancoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancoInclude<ExtArgs> | null
    /**
     * Filter, which Banco to fetch.
     */
    where: BancoWhereUniqueInput
  }

  /**
   * Banco findFirst
   */
  export type BancoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banco
     */
    select?: BancoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancoInclude<ExtArgs> | null
    /**
     * Filter, which Banco to fetch.
     */
    where?: BancoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bancos to fetch.
     */
    orderBy?: BancoOrderByWithRelationInput | BancoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bancos.
     */
    cursor?: BancoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bancos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bancos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bancos.
     */
    distinct?: BancoScalarFieldEnum | BancoScalarFieldEnum[]
  }

  /**
   * Banco findFirstOrThrow
   */
  export type BancoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banco
     */
    select?: BancoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancoInclude<ExtArgs> | null
    /**
     * Filter, which Banco to fetch.
     */
    where?: BancoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bancos to fetch.
     */
    orderBy?: BancoOrderByWithRelationInput | BancoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bancos.
     */
    cursor?: BancoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bancos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bancos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bancos.
     */
    distinct?: BancoScalarFieldEnum | BancoScalarFieldEnum[]
  }

  /**
   * Banco findMany
   */
  export type BancoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banco
     */
    select?: BancoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancoInclude<ExtArgs> | null
    /**
     * Filter, which Bancos to fetch.
     */
    where?: BancoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bancos to fetch.
     */
    orderBy?: BancoOrderByWithRelationInput | BancoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Bancos.
     */
    cursor?: BancoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bancos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bancos.
     */
    skip?: number
    distinct?: BancoScalarFieldEnum | BancoScalarFieldEnum[]
  }

  /**
   * Banco create
   */
  export type BancoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banco
     */
    select?: BancoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancoInclude<ExtArgs> | null
    /**
     * The data needed to create a Banco.
     */
    data: XOR<BancoCreateInput, BancoUncheckedCreateInput>
  }

  /**
   * Banco createMany
   */
  export type BancoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Bancos.
     */
    data: BancoCreateManyInput | BancoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Banco update
   */
  export type BancoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banco
     */
    select?: BancoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancoInclude<ExtArgs> | null
    /**
     * The data needed to update a Banco.
     */
    data: XOR<BancoUpdateInput, BancoUncheckedUpdateInput>
    /**
     * Choose, which Banco to update.
     */
    where: BancoWhereUniqueInput
  }

  /**
   * Banco updateMany
   */
  export type BancoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Bancos.
     */
    data: XOR<BancoUpdateManyMutationInput, BancoUncheckedUpdateManyInput>
    /**
     * Filter which Bancos to update
     */
    where?: BancoWhereInput
  }

  /**
   * Banco upsert
   */
  export type BancoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banco
     */
    select?: BancoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancoInclude<ExtArgs> | null
    /**
     * The filter to search for the Banco to update in case it exists.
     */
    where: BancoWhereUniqueInput
    /**
     * In case the Banco found by the `where` argument doesn't exist, create a new Banco with this data.
     */
    create: XOR<BancoCreateInput, BancoUncheckedCreateInput>
    /**
     * In case the Banco was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BancoUpdateInput, BancoUncheckedUpdateInput>
  }

  /**
   * Banco delete
   */
  export type BancoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banco
     */
    select?: BancoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancoInclude<ExtArgs> | null
    /**
     * Filter which Banco to delete.
     */
    where: BancoWhereUniqueInput
  }

  /**
   * Banco deleteMany
   */
  export type BancoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bancos to delete
     */
    where?: BancoWhereInput
  }

  /**
   * Banco without action
   */
  export type BancoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Banco
     */
    select?: BancoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BancoInclude<ExtArgs> | null
  }


  /**
   * Model Seguradora
   */

  export type AggregateSeguradora = {
    _count: SeguradoraCountAggregateOutputType | null
    _avg: SeguradoraAvgAggregateOutputType | null
    _sum: SeguradoraSumAggregateOutputType | null
    _min: SeguradoraMinAggregateOutputType | null
    _max: SeguradoraMaxAggregateOutputType | null
  }

  export type SeguradoraAvgAggregateOutputType = {
    id: number | null
  }

  export type SeguradoraSumAggregateOutputType = {
    id: number | null
  }

  export type SeguradoraMinAggregateOutputType = {
    id: number | null
    nome: string | null
    userId: string | null
  }

  export type SeguradoraMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    userId: string | null
  }

  export type SeguradoraCountAggregateOutputType = {
    id: number
    nome: number
    userId: number
    _all: number
  }


  export type SeguradoraAvgAggregateInputType = {
    id?: true
  }

  export type SeguradoraSumAggregateInputType = {
    id?: true
  }

  export type SeguradoraMinAggregateInputType = {
    id?: true
    nome?: true
    userId?: true
  }

  export type SeguradoraMaxAggregateInputType = {
    id?: true
    nome?: true
    userId?: true
  }

  export type SeguradoraCountAggregateInputType = {
    id?: true
    nome?: true
    userId?: true
    _all?: true
  }

  export type SeguradoraAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Seguradora to aggregate.
     */
    where?: SeguradoraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seguradoras to fetch.
     */
    orderBy?: SeguradoraOrderByWithRelationInput | SeguradoraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SeguradoraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seguradoras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seguradoras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Seguradoras
    **/
    _count?: true | SeguradoraCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SeguradoraAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SeguradoraSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SeguradoraMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SeguradoraMaxAggregateInputType
  }

  export type GetSeguradoraAggregateType<T extends SeguradoraAggregateArgs> = {
        [P in keyof T & keyof AggregateSeguradora]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSeguradora[P]>
      : GetScalarType<T[P], AggregateSeguradora[P]>
  }




  export type SeguradoraGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeguradoraWhereInput
    orderBy?: SeguradoraOrderByWithAggregationInput | SeguradoraOrderByWithAggregationInput[]
    by: SeguradoraScalarFieldEnum[] | SeguradoraScalarFieldEnum
    having?: SeguradoraScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SeguradoraCountAggregateInputType | true
    _avg?: SeguradoraAvgAggregateInputType
    _sum?: SeguradoraSumAggregateInputType
    _min?: SeguradoraMinAggregateInputType
    _max?: SeguradoraMaxAggregateInputType
  }

  export type SeguradoraGroupByOutputType = {
    id: number
    nome: string
    userId: string
    _count: SeguradoraCountAggregateOutputType | null
    _avg: SeguradoraAvgAggregateOutputType | null
    _sum: SeguradoraSumAggregateOutputType | null
    _min: SeguradoraMinAggregateOutputType | null
    _max: SeguradoraMaxAggregateOutputType | null
  }

  type GetSeguradoraGroupByPayload<T extends SeguradoraGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SeguradoraGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SeguradoraGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SeguradoraGroupByOutputType[P]>
            : GetScalarType<T[P], SeguradoraGroupByOutputType[P]>
        }
      >
    >


  export type SeguradoraSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["seguradora"]>


  export type SeguradoraSelectScalar = {
    id?: boolean
    nome?: boolean
    userId?: boolean
  }

  export type SeguradoraInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SeguradoraPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Seguradora"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      userId: string
    }, ExtArgs["result"]["seguradora"]>
    composites: {}
  }

  type SeguradoraGetPayload<S extends boolean | null | undefined | SeguradoraDefaultArgs> = $Result.GetResult<Prisma.$SeguradoraPayload, S>

  type SeguradoraCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SeguradoraFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SeguradoraCountAggregateInputType | true
    }

  export interface SeguradoraDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Seguradora'], meta: { name: 'Seguradora' } }
    /**
     * Find zero or one Seguradora that matches the filter.
     * @param {SeguradoraFindUniqueArgs} args - Arguments to find a Seguradora
     * @example
     * // Get one Seguradora
     * const seguradora = await prisma.seguradora.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SeguradoraFindUniqueArgs>(args: SelectSubset<T, SeguradoraFindUniqueArgs<ExtArgs>>): Prisma__SeguradoraClient<$Result.GetResult<Prisma.$SeguradoraPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Seguradora that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SeguradoraFindUniqueOrThrowArgs} args - Arguments to find a Seguradora
     * @example
     * // Get one Seguradora
     * const seguradora = await prisma.seguradora.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SeguradoraFindUniqueOrThrowArgs>(args: SelectSubset<T, SeguradoraFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SeguradoraClient<$Result.GetResult<Prisma.$SeguradoraPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Seguradora that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeguradoraFindFirstArgs} args - Arguments to find a Seguradora
     * @example
     * // Get one Seguradora
     * const seguradora = await prisma.seguradora.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SeguradoraFindFirstArgs>(args?: SelectSubset<T, SeguradoraFindFirstArgs<ExtArgs>>): Prisma__SeguradoraClient<$Result.GetResult<Prisma.$SeguradoraPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Seguradora that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeguradoraFindFirstOrThrowArgs} args - Arguments to find a Seguradora
     * @example
     * // Get one Seguradora
     * const seguradora = await prisma.seguradora.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SeguradoraFindFirstOrThrowArgs>(args?: SelectSubset<T, SeguradoraFindFirstOrThrowArgs<ExtArgs>>): Prisma__SeguradoraClient<$Result.GetResult<Prisma.$SeguradoraPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Seguradoras that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeguradoraFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Seguradoras
     * const seguradoras = await prisma.seguradora.findMany()
     * 
     * // Get first 10 Seguradoras
     * const seguradoras = await prisma.seguradora.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const seguradoraWithIdOnly = await prisma.seguradora.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SeguradoraFindManyArgs>(args?: SelectSubset<T, SeguradoraFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeguradoraPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Seguradora.
     * @param {SeguradoraCreateArgs} args - Arguments to create a Seguradora.
     * @example
     * // Create one Seguradora
     * const Seguradora = await prisma.seguradora.create({
     *   data: {
     *     // ... data to create a Seguradora
     *   }
     * })
     * 
     */
    create<T extends SeguradoraCreateArgs>(args: SelectSubset<T, SeguradoraCreateArgs<ExtArgs>>): Prisma__SeguradoraClient<$Result.GetResult<Prisma.$SeguradoraPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Seguradoras.
     * @param {SeguradoraCreateManyArgs} args - Arguments to create many Seguradoras.
     * @example
     * // Create many Seguradoras
     * const seguradora = await prisma.seguradora.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SeguradoraCreateManyArgs>(args?: SelectSubset<T, SeguradoraCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Seguradora.
     * @param {SeguradoraDeleteArgs} args - Arguments to delete one Seguradora.
     * @example
     * // Delete one Seguradora
     * const Seguradora = await prisma.seguradora.delete({
     *   where: {
     *     // ... filter to delete one Seguradora
     *   }
     * })
     * 
     */
    delete<T extends SeguradoraDeleteArgs>(args: SelectSubset<T, SeguradoraDeleteArgs<ExtArgs>>): Prisma__SeguradoraClient<$Result.GetResult<Prisma.$SeguradoraPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Seguradora.
     * @param {SeguradoraUpdateArgs} args - Arguments to update one Seguradora.
     * @example
     * // Update one Seguradora
     * const seguradora = await prisma.seguradora.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SeguradoraUpdateArgs>(args: SelectSubset<T, SeguradoraUpdateArgs<ExtArgs>>): Prisma__SeguradoraClient<$Result.GetResult<Prisma.$SeguradoraPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Seguradoras.
     * @param {SeguradoraDeleteManyArgs} args - Arguments to filter Seguradoras to delete.
     * @example
     * // Delete a few Seguradoras
     * const { count } = await prisma.seguradora.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SeguradoraDeleteManyArgs>(args?: SelectSubset<T, SeguradoraDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Seguradoras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeguradoraUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Seguradoras
     * const seguradora = await prisma.seguradora.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SeguradoraUpdateManyArgs>(args: SelectSubset<T, SeguradoraUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Seguradora.
     * @param {SeguradoraUpsertArgs} args - Arguments to update or create a Seguradora.
     * @example
     * // Update or create a Seguradora
     * const seguradora = await prisma.seguradora.upsert({
     *   create: {
     *     // ... data to create a Seguradora
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Seguradora we want to update
     *   }
     * })
     */
    upsert<T extends SeguradoraUpsertArgs>(args: SelectSubset<T, SeguradoraUpsertArgs<ExtArgs>>): Prisma__SeguradoraClient<$Result.GetResult<Prisma.$SeguradoraPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Seguradoras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeguradoraCountArgs} args - Arguments to filter Seguradoras to count.
     * @example
     * // Count the number of Seguradoras
     * const count = await prisma.seguradora.count({
     *   where: {
     *     // ... the filter for the Seguradoras we want to count
     *   }
     * })
    **/
    count<T extends SeguradoraCountArgs>(
      args?: Subset<T, SeguradoraCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SeguradoraCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Seguradora.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeguradoraAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SeguradoraAggregateArgs>(args: Subset<T, SeguradoraAggregateArgs>): Prisma.PrismaPromise<GetSeguradoraAggregateType<T>>

    /**
     * Group by Seguradora.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeguradoraGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SeguradoraGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SeguradoraGroupByArgs['orderBy'] }
        : { orderBy?: SeguradoraGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SeguradoraGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSeguradoraGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Seguradora model
   */
  readonly fields: SeguradoraFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Seguradora.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SeguradoraClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Seguradora model
   */ 
  interface SeguradoraFieldRefs {
    readonly id: FieldRef<"Seguradora", 'Int'>
    readonly nome: FieldRef<"Seguradora", 'String'>
    readonly userId: FieldRef<"Seguradora", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Seguradora findUnique
   */
  export type SeguradoraFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seguradora
     */
    select?: SeguradoraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeguradoraInclude<ExtArgs> | null
    /**
     * Filter, which Seguradora to fetch.
     */
    where: SeguradoraWhereUniqueInput
  }

  /**
   * Seguradora findUniqueOrThrow
   */
  export type SeguradoraFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seguradora
     */
    select?: SeguradoraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeguradoraInclude<ExtArgs> | null
    /**
     * Filter, which Seguradora to fetch.
     */
    where: SeguradoraWhereUniqueInput
  }

  /**
   * Seguradora findFirst
   */
  export type SeguradoraFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seguradora
     */
    select?: SeguradoraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeguradoraInclude<ExtArgs> | null
    /**
     * Filter, which Seguradora to fetch.
     */
    where?: SeguradoraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seguradoras to fetch.
     */
    orderBy?: SeguradoraOrderByWithRelationInput | SeguradoraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Seguradoras.
     */
    cursor?: SeguradoraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seguradoras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seguradoras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Seguradoras.
     */
    distinct?: SeguradoraScalarFieldEnum | SeguradoraScalarFieldEnum[]
  }

  /**
   * Seguradora findFirstOrThrow
   */
  export type SeguradoraFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seguradora
     */
    select?: SeguradoraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeguradoraInclude<ExtArgs> | null
    /**
     * Filter, which Seguradora to fetch.
     */
    where?: SeguradoraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seguradoras to fetch.
     */
    orderBy?: SeguradoraOrderByWithRelationInput | SeguradoraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Seguradoras.
     */
    cursor?: SeguradoraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seguradoras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seguradoras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Seguradoras.
     */
    distinct?: SeguradoraScalarFieldEnum | SeguradoraScalarFieldEnum[]
  }

  /**
   * Seguradora findMany
   */
  export type SeguradoraFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seguradora
     */
    select?: SeguradoraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeguradoraInclude<ExtArgs> | null
    /**
     * Filter, which Seguradoras to fetch.
     */
    where?: SeguradoraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seguradoras to fetch.
     */
    orderBy?: SeguradoraOrderByWithRelationInput | SeguradoraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Seguradoras.
     */
    cursor?: SeguradoraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seguradoras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seguradoras.
     */
    skip?: number
    distinct?: SeguradoraScalarFieldEnum | SeguradoraScalarFieldEnum[]
  }

  /**
   * Seguradora create
   */
  export type SeguradoraCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seguradora
     */
    select?: SeguradoraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeguradoraInclude<ExtArgs> | null
    /**
     * The data needed to create a Seguradora.
     */
    data: XOR<SeguradoraCreateInput, SeguradoraUncheckedCreateInput>
  }

  /**
   * Seguradora createMany
   */
  export type SeguradoraCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Seguradoras.
     */
    data: SeguradoraCreateManyInput | SeguradoraCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Seguradora update
   */
  export type SeguradoraUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seguradora
     */
    select?: SeguradoraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeguradoraInclude<ExtArgs> | null
    /**
     * The data needed to update a Seguradora.
     */
    data: XOR<SeguradoraUpdateInput, SeguradoraUncheckedUpdateInput>
    /**
     * Choose, which Seguradora to update.
     */
    where: SeguradoraWhereUniqueInput
  }

  /**
   * Seguradora updateMany
   */
  export type SeguradoraUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Seguradoras.
     */
    data: XOR<SeguradoraUpdateManyMutationInput, SeguradoraUncheckedUpdateManyInput>
    /**
     * Filter which Seguradoras to update
     */
    where?: SeguradoraWhereInput
  }

  /**
   * Seguradora upsert
   */
  export type SeguradoraUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seguradora
     */
    select?: SeguradoraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeguradoraInclude<ExtArgs> | null
    /**
     * The filter to search for the Seguradora to update in case it exists.
     */
    where: SeguradoraWhereUniqueInput
    /**
     * In case the Seguradora found by the `where` argument doesn't exist, create a new Seguradora with this data.
     */
    create: XOR<SeguradoraCreateInput, SeguradoraUncheckedCreateInput>
    /**
     * In case the Seguradora was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SeguradoraUpdateInput, SeguradoraUncheckedUpdateInput>
  }

  /**
   * Seguradora delete
   */
  export type SeguradoraDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seguradora
     */
    select?: SeguradoraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeguradoraInclude<ExtArgs> | null
    /**
     * Filter which Seguradora to delete.
     */
    where: SeguradoraWhereUniqueInput
  }

  /**
   * Seguradora deleteMany
   */
  export type SeguradoraDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Seguradoras to delete
     */
    where?: SeguradoraWhereInput
  }

  /**
   * Seguradora without action
   */
  export type SeguradoraDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seguradora
     */
    select?: SeguradoraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeguradoraInclude<ExtArgs> | null
  }


  /**
   * Model TipoDeVeiculo
   */

  export type AggregateTipoDeVeiculo = {
    _count: TipoDeVeiculoCountAggregateOutputType | null
    _avg: TipoDeVeiculoAvgAggregateOutputType | null
    _sum: TipoDeVeiculoSumAggregateOutputType | null
    _min: TipoDeVeiculoMinAggregateOutputType | null
    _max: TipoDeVeiculoMaxAggregateOutputType | null
  }

  export type TipoDeVeiculoAvgAggregateOutputType = {
    id: number | null
  }

  export type TipoDeVeiculoSumAggregateOutputType = {
    id: number | null
  }

  export type TipoDeVeiculoMinAggregateOutputType = {
    id: number | null
    nome: string | null
    placa: string | null
    marca: string | null
    modelo: string | null
    userId: string | null
  }

  export type TipoDeVeiculoMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    placa: string | null
    marca: string | null
    modelo: string | null
    userId: string | null
  }

  export type TipoDeVeiculoCountAggregateOutputType = {
    id: number
    nome: number
    placa: number
    marca: number
    modelo: number
    userId: number
    _all: number
  }


  export type TipoDeVeiculoAvgAggregateInputType = {
    id?: true
  }

  export type TipoDeVeiculoSumAggregateInputType = {
    id?: true
  }

  export type TipoDeVeiculoMinAggregateInputType = {
    id?: true
    nome?: true
    placa?: true
    marca?: true
    modelo?: true
    userId?: true
  }

  export type TipoDeVeiculoMaxAggregateInputType = {
    id?: true
    nome?: true
    placa?: true
    marca?: true
    modelo?: true
    userId?: true
  }

  export type TipoDeVeiculoCountAggregateInputType = {
    id?: true
    nome?: true
    placa?: true
    marca?: true
    modelo?: true
    userId?: true
    _all?: true
  }

  export type TipoDeVeiculoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TipoDeVeiculo to aggregate.
     */
    where?: TipoDeVeiculoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TipoDeVeiculos to fetch.
     */
    orderBy?: TipoDeVeiculoOrderByWithRelationInput | TipoDeVeiculoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TipoDeVeiculoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TipoDeVeiculos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TipoDeVeiculos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TipoDeVeiculos
    **/
    _count?: true | TipoDeVeiculoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TipoDeVeiculoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TipoDeVeiculoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TipoDeVeiculoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TipoDeVeiculoMaxAggregateInputType
  }

  export type GetTipoDeVeiculoAggregateType<T extends TipoDeVeiculoAggregateArgs> = {
        [P in keyof T & keyof AggregateTipoDeVeiculo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTipoDeVeiculo[P]>
      : GetScalarType<T[P], AggregateTipoDeVeiculo[P]>
  }




  export type TipoDeVeiculoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TipoDeVeiculoWhereInput
    orderBy?: TipoDeVeiculoOrderByWithAggregationInput | TipoDeVeiculoOrderByWithAggregationInput[]
    by: TipoDeVeiculoScalarFieldEnum[] | TipoDeVeiculoScalarFieldEnum
    having?: TipoDeVeiculoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TipoDeVeiculoCountAggregateInputType | true
    _avg?: TipoDeVeiculoAvgAggregateInputType
    _sum?: TipoDeVeiculoSumAggregateInputType
    _min?: TipoDeVeiculoMinAggregateInputType
    _max?: TipoDeVeiculoMaxAggregateInputType
  }

  export type TipoDeVeiculoGroupByOutputType = {
    id: number
    nome: string
    placa: string
    marca: string
    modelo: string
    userId: string
    _count: TipoDeVeiculoCountAggregateOutputType | null
    _avg: TipoDeVeiculoAvgAggregateOutputType | null
    _sum: TipoDeVeiculoSumAggregateOutputType | null
    _min: TipoDeVeiculoMinAggregateOutputType | null
    _max: TipoDeVeiculoMaxAggregateOutputType | null
  }

  type GetTipoDeVeiculoGroupByPayload<T extends TipoDeVeiculoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TipoDeVeiculoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TipoDeVeiculoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TipoDeVeiculoGroupByOutputType[P]>
            : GetScalarType<T[P], TipoDeVeiculoGroupByOutputType[P]>
        }
      >
    >


  export type TipoDeVeiculoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    placa?: boolean
    marca?: boolean
    modelo?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tipoDeVeiculo"]>


  export type TipoDeVeiculoSelectScalar = {
    id?: boolean
    nome?: boolean
    placa?: boolean
    marca?: boolean
    modelo?: boolean
    userId?: boolean
  }

  export type TipoDeVeiculoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TipoDeVeiculoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TipoDeVeiculo"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      placa: string
      marca: string
      modelo: string
      userId: string
    }, ExtArgs["result"]["tipoDeVeiculo"]>
    composites: {}
  }

  type TipoDeVeiculoGetPayload<S extends boolean | null | undefined | TipoDeVeiculoDefaultArgs> = $Result.GetResult<Prisma.$TipoDeVeiculoPayload, S>

  type TipoDeVeiculoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TipoDeVeiculoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TipoDeVeiculoCountAggregateInputType | true
    }

  export interface TipoDeVeiculoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TipoDeVeiculo'], meta: { name: 'TipoDeVeiculo' } }
    /**
     * Find zero or one TipoDeVeiculo that matches the filter.
     * @param {TipoDeVeiculoFindUniqueArgs} args - Arguments to find a TipoDeVeiculo
     * @example
     * // Get one TipoDeVeiculo
     * const tipoDeVeiculo = await prisma.tipoDeVeiculo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TipoDeVeiculoFindUniqueArgs>(args: SelectSubset<T, TipoDeVeiculoFindUniqueArgs<ExtArgs>>): Prisma__TipoDeVeiculoClient<$Result.GetResult<Prisma.$TipoDeVeiculoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TipoDeVeiculo that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TipoDeVeiculoFindUniqueOrThrowArgs} args - Arguments to find a TipoDeVeiculo
     * @example
     * // Get one TipoDeVeiculo
     * const tipoDeVeiculo = await prisma.tipoDeVeiculo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TipoDeVeiculoFindUniqueOrThrowArgs>(args: SelectSubset<T, TipoDeVeiculoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TipoDeVeiculoClient<$Result.GetResult<Prisma.$TipoDeVeiculoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TipoDeVeiculo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoDeVeiculoFindFirstArgs} args - Arguments to find a TipoDeVeiculo
     * @example
     * // Get one TipoDeVeiculo
     * const tipoDeVeiculo = await prisma.tipoDeVeiculo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TipoDeVeiculoFindFirstArgs>(args?: SelectSubset<T, TipoDeVeiculoFindFirstArgs<ExtArgs>>): Prisma__TipoDeVeiculoClient<$Result.GetResult<Prisma.$TipoDeVeiculoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TipoDeVeiculo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoDeVeiculoFindFirstOrThrowArgs} args - Arguments to find a TipoDeVeiculo
     * @example
     * // Get one TipoDeVeiculo
     * const tipoDeVeiculo = await prisma.tipoDeVeiculo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TipoDeVeiculoFindFirstOrThrowArgs>(args?: SelectSubset<T, TipoDeVeiculoFindFirstOrThrowArgs<ExtArgs>>): Prisma__TipoDeVeiculoClient<$Result.GetResult<Prisma.$TipoDeVeiculoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TipoDeVeiculos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoDeVeiculoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TipoDeVeiculos
     * const tipoDeVeiculos = await prisma.tipoDeVeiculo.findMany()
     * 
     * // Get first 10 TipoDeVeiculos
     * const tipoDeVeiculos = await prisma.tipoDeVeiculo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tipoDeVeiculoWithIdOnly = await prisma.tipoDeVeiculo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TipoDeVeiculoFindManyArgs>(args?: SelectSubset<T, TipoDeVeiculoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TipoDeVeiculoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TipoDeVeiculo.
     * @param {TipoDeVeiculoCreateArgs} args - Arguments to create a TipoDeVeiculo.
     * @example
     * // Create one TipoDeVeiculo
     * const TipoDeVeiculo = await prisma.tipoDeVeiculo.create({
     *   data: {
     *     // ... data to create a TipoDeVeiculo
     *   }
     * })
     * 
     */
    create<T extends TipoDeVeiculoCreateArgs>(args: SelectSubset<T, TipoDeVeiculoCreateArgs<ExtArgs>>): Prisma__TipoDeVeiculoClient<$Result.GetResult<Prisma.$TipoDeVeiculoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TipoDeVeiculos.
     * @param {TipoDeVeiculoCreateManyArgs} args - Arguments to create many TipoDeVeiculos.
     * @example
     * // Create many TipoDeVeiculos
     * const tipoDeVeiculo = await prisma.tipoDeVeiculo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TipoDeVeiculoCreateManyArgs>(args?: SelectSubset<T, TipoDeVeiculoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TipoDeVeiculo.
     * @param {TipoDeVeiculoDeleteArgs} args - Arguments to delete one TipoDeVeiculo.
     * @example
     * // Delete one TipoDeVeiculo
     * const TipoDeVeiculo = await prisma.tipoDeVeiculo.delete({
     *   where: {
     *     // ... filter to delete one TipoDeVeiculo
     *   }
     * })
     * 
     */
    delete<T extends TipoDeVeiculoDeleteArgs>(args: SelectSubset<T, TipoDeVeiculoDeleteArgs<ExtArgs>>): Prisma__TipoDeVeiculoClient<$Result.GetResult<Prisma.$TipoDeVeiculoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TipoDeVeiculo.
     * @param {TipoDeVeiculoUpdateArgs} args - Arguments to update one TipoDeVeiculo.
     * @example
     * // Update one TipoDeVeiculo
     * const tipoDeVeiculo = await prisma.tipoDeVeiculo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TipoDeVeiculoUpdateArgs>(args: SelectSubset<T, TipoDeVeiculoUpdateArgs<ExtArgs>>): Prisma__TipoDeVeiculoClient<$Result.GetResult<Prisma.$TipoDeVeiculoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TipoDeVeiculos.
     * @param {TipoDeVeiculoDeleteManyArgs} args - Arguments to filter TipoDeVeiculos to delete.
     * @example
     * // Delete a few TipoDeVeiculos
     * const { count } = await prisma.tipoDeVeiculo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TipoDeVeiculoDeleteManyArgs>(args?: SelectSubset<T, TipoDeVeiculoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TipoDeVeiculos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoDeVeiculoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TipoDeVeiculos
     * const tipoDeVeiculo = await prisma.tipoDeVeiculo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TipoDeVeiculoUpdateManyArgs>(args: SelectSubset<T, TipoDeVeiculoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TipoDeVeiculo.
     * @param {TipoDeVeiculoUpsertArgs} args - Arguments to update or create a TipoDeVeiculo.
     * @example
     * // Update or create a TipoDeVeiculo
     * const tipoDeVeiculo = await prisma.tipoDeVeiculo.upsert({
     *   create: {
     *     // ... data to create a TipoDeVeiculo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TipoDeVeiculo we want to update
     *   }
     * })
     */
    upsert<T extends TipoDeVeiculoUpsertArgs>(args: SelectSubset<T, TipoDeVeiculoUpsertArgs<ExtArgs>>): Prisma__TipoDeVeiculoClient<$Result.GetResult<Prisma.$TipoDeVeiculoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TipoDeVeiculos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoDeVeiculoCountArgs} args - Arguments to filter TipoDeVeiculos to count.
     * @example
     * // Count the number of TipoDeVeiculos
     * const count = await prisma.tipoDeVeiculo.count({
     *   where: {
     *     // ... the filter for the TipoDeVeiculos we want to count
     *   }
     * })
    **/
    count<T extends TipoDeVeiculoCountArgs>(
      args?: Subset<T, TipoDeVeiculoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TipoDeVeiculoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TipoDeVeiculo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoDeVeiculoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TipoDeVeiculoAggregateArgs>(args: Subset<T, TipoDeVeiculoAggregateArgs>): Prisma.PrismaPromise<GetTipoDeVeiculoAggregateType<T>>

    /**
     * Group by TipoDeVeiculo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoDeVeiculoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TipoDeVeiculoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TipoDeVeiculoGroupByArgs['orderBy'] }
        : { orderBy?: TipoDeVeiculoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TipoDeVeiculoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTipoDeVeiculoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TipoDeVeiculo model
   */
  readonly fields: TipoDeVeiculoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TipoDeVeiculo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TipoDeVeiculoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TipoDeVeiculo model
   */ 
  interface TipoDeVeiculoFieldRefs {
    readonly id: FieldRef<"TipoDeVeiculo", 'Int'>
    readonly nome: FieldRef<"TipoDeVeiculo", 'String'>
    readonly placa: FieldRef<"TipoDeVeiculo", 'String'>
    readonly marca: FieldRef<"TipoDeVeiculo", 'String'>
    readonly modelo: FieldRef<"TipoDeVeiculo", 'String'>
    readonly userId: FieldRef<"TipoDeVeiculo", 'String'>
  }
    

  // Custom InputTypes
  /**
   * TipoDeVeiculo findUnique
   */
  export type TipoDeVeiculoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoDeVeiculo
     */
    select?: TipoDeVeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoDeVeiculoInclude<ExtArgs> | null
    /**
     * Filter, which TipoDeVeiculo to fetch.
     */
    where: TipoDeVeiculoWhereUniqueInput
  }

  /**
   * TipoDeVeiculo findUniqueOrThrow
   */
  export type TipoDeVeiculoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoDeVeiculo
     */
    select?: TipoDeVeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoDeVeiculoInclude<ExtArgs> | null
    /**
     * Filter, which TipoDeVeiculo to fetch.
     */
    where: TipoDeVeiculoWhereUniqueInput
  }

  /**
   * TipoDeVeiculo findFirst
   */
  export type TipoDeVeiculoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoDeVeiculo
     */
    select?: TipoDeVeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoDeVeiculoInclude<ExtArgs> | null
    /**
     * Filter, which TipoDeVeiculo to fetch.
     */
    where?: TipoDeVeiculoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TipoDeVeiculos to fetch.
     */
    orderBy?: TipoDeVeiculoOrderByWithRelationInput | TipoDeVeiculoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TipoDeVeiculos.
     */
    cursor?: TipoDeVeiculoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TipoDeVeiculos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TipoDeVeiculos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TipoDeVeiculos.
     */
    distinct?: TipoDeVeiculoScalarFieldEnum | TipoDeVeiculoScalarFieldEnum[]
  }

  /**
   * TipoDeVeiculo findFirstOrThrow
   */
  export type TipoDeVeiculoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoDeVeiculo
     */
    select?: TipoDeVeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoDeVeiculoInclude<ExtArgs> | null
    /**
     * Filter, which TipoDeVeiculo to fetch.
     */
    where?: TipoDeVeiculoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TipoDeVeiculos to fetch.
     */
    orderBy?: TipoDeVeiculoOrderByWithRelationInput | TipoDeVeiculoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TipoDeVeiculos.
     */
    cursor?: TipoDeVeiculoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TipoDeVeiculos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TipoDeVeiculos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TipoDeVeiculos.
     */
    distinct?: TipoDeVeiculoScalarFieldEnum | TipoDeVeiculoScalarFieldEnum[]
  }

  /**
   * TipoDeVeiculo findMany
   */
  export type TipoDeVeiculoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoDeVeiculo
     */
    select?: TipoDeVeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoDeVeiculoInclude<ExtArgs> | null
    /**
     * Filter, which TipoDeVeiculos to fetch.
     */
    where?: TipoDeVeiculoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TipoDeVeiculos to fetch.
     */
    orderBy?: TipoDeVeiculoOrderByWithRelationInput | TipoDeVeiculoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TipoDeVeiculos.
     */
    cursor?: TipoDeVeiculoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TipoDeVeiculos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TipoDeVeiculos.
     */
    skip?: number
    distinct?: TipoDeVeiculoScalarFieldEnum | TipoDeVeiculoScalarFieldEnum[]
  }

  /**
   * TipoDeVeiculo create
   */
  export type TipoDeVeiculoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoDeVeiculo
     */
    select?: TipoDeVeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoDeVeiculoInclude<ExtArgs> | null
    /**
     * The data needed to create a TipoDeVeiculo.
     */
    data: XOR<TipoDeVeiculoCreateInput, TipoDeVeiculoUncheckedCreateInput>
  }

  /**
   * TipoDeVeiculo createMany
   */
  export type TipoDeVeiculoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TipoDeVeiculos.
     */
    data: TipoDeVeiculoCreateManyInput | TipoDeVeiculoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TipoDeVeiculo update
   */
  export type TipoDeVeiculoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoDeVeiculo
     */
    select?: TipoDeVeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoDeVeiculoInclude<ExtArgs> | null
    /**
     * The data needed to update a TipoDeVeiculo.
     */
    data: XOR<TipoDeVeiculoUpdateInput, TipoDeVeiculoUncheckedUpdateInput>
    /**
     * Choose, which TipoDeVeiculo to update.
     */
    where: TipoDeVeiculoWhereUniqueInput
  }

  /**
   * TipoDeVeiculo updateMany
   */
  export type TipoDeVeiculoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TipoDeVeiculos.
     */
    data: XOR<TipoDeVeiculoUpdateManyMutationInput, TipoDeVeiculoUncheckedUpdateManyInput>
    /**
     * Filter which TipoDeVeiculos to update
     */
    where?: TipoDeVeiculoWhereInput
  }

  /**
   * TipoDeVeiculo upsert
   */
  export type TipoDeVeiculoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoDeVeiculo
     */
    select?: TipoDeVeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoDeVeiculoInclude<ExtArgs> | null
    /**
     * The filter to search for the TipoDeVeiculo to update in case it exists.
     */
    where: TipoDeVeiculoWhereUniqueInput
    /**
     * In case the TipoDeVeiculo found by the `where` argument doesn't exist, create a new TipoDeVeiculo with this data.
     */
    create: XOR<TipoDeVeiculoCreateInput, TipoDeVeiculoUncheckedCreateInput>
    /**
     * In case the TipoDeVeiculo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TipoDeVeiculoUpdateInput, TipoDeVeiculoUncheckedUpdateInput>
  }

  /**
   * TipoDeVeiculo delete
   */
  export type TipoDeVeiculoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoDeVeiculo
     */
    select?: TipoDeVeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoDeVeiculoInclude<ExtArgs> | null
    /**
     * Filter which TipoDeVeiculo to delete.
     */
    where: TipoDeVeiculoWhereUniqueInput
  }

  /**
   * TipoDeVeiculo deleteMany
   */
  export type TipoDeVeiculoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TipoDeVeiculos to delete
     */
    where?: TipoDeVeiculoWhereInput
  }

  /**
   * TipoDeVeiculo without action
   */
  export type TipoDeVeiculoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoDeVeiculo
     */
    select?: TipoDeVeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoDeVeiculoInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    email: 'email',
    password: 'password'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const VitimaScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    cpf: 'cpf',
    rg: 'rg',
    data_nascimento: 'data_nascimento',
    data_emissao: 'data_emissao',
    orgao_expedidor: 'orgao_expedidor',
    activo: 'activo',
    profissao: 'profissao',
    renda_mensal: 'renda_mensal',
    cep: 'cep',
    uf: 'uf',
    endereco: 'endereco',
    numero: 'numero',
    sexo: 'sexo',
    complemento: 'complemento',
    bairro: 'bairro',
    cidade: 'cidade',
    email: 'email',
    telefone01: 'telefone01',
    telefone02: 'telefone02',
    userId: 'userId'
  };

  export type VitimaScalarFieldEnum = (typeof VitimaScalarFieldEnum)[keyof typeof VitimaScalarFieldEnum]


  export const ProcessoScalarFieldEnum: {
    id: 'id',
    numero: 'numero',
    tipoProcessoId: 'tipoProcessoId',
    faseProcessoId: 'faseProcessoId',
    vitimaId: 'vitimaId',
    userId: 'userId',
    status: 'status',
    criado_em: 'criado_em',
    atualizado_em: 'atualizado_em'
  };

  export type ProcessoScalarFieldEnum = (typeof ProcessoScalarFieldEnum)[keyof typeof ProcessoScalarFieldEnum]


  export const TiposDeProcessoScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    activo: 'activo',
    userId: 'userId'
  };

  export type TiposDeProcessoScalarFieldEnum = (typeof TiposDeProcessoScalarFieldEnum)[keyof typeof TiposDeProcessoScalarFieldEnum]


  export const DocumentoScalarFieldEnum: {
    id: 'id',
    tipo: 'tipo',
    descricao: 'descricao',
    arquivoUrl: 'arquivoUrl',
    metadata: 'metadata',
    clienteId: 'clienteId',
    userId: 'userId',
    criadoEm: 'criadoEm'
  };

  export type DocumentoScalarFieldEnum = (typeof DocumentoScalarFieldEnum)[keyof typeof DocumentoScalarFieldEnum]


  export const FaseProcessoScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    cor_fundo: 'cor_fundo',
    cor_fonte: 'cor_fonte',
    pendencia: 'pendencia',
    muda_fase: 'muda_fase',
    activo: 'activo',
    criado_em: 'criado_em',
    atualizado_em: 'atualizado_em',
    userId: 'userId'
  };

  export type FaseProcessoScalarFieldEnum = (typeof FaseProcessoScalarFieldEnum)[keyof typeof FaseProcessoScalarFieldEnum]


  export const PrioridadesScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    cor_fundo: 'cor_fundo',
    cor_fonte: 'cor_fonte',
    activo: 'activo',
    userId: 'userId'
  };

  export type PrioridadesScalarFieldEnum = (typeof PrioridadesScalarFieldEnum)[keyof typeof PrioridadesScalarFieldEnum]


  export const ParceiroScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    uf: 'uf',
    cidade: 'cidade',
    userId: 'userId'
  };

  export type ParceiroScalarFieldEnum = (typeof ParceiroScalarFieldEnum)[keyof typeof ParceiroScalarFieldEnum]


  export const ClienteScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    cpf: 'cpf',
    rg: 'rg',
    userId: 'userId'
  };

  export type ClienteScalarFieldEnum = (typeof ClienteScalarFieldEnum)[keyof typeof ClienteScalarFieldEnum]


  export const BancoScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    agencia: 'agencia',
    conta: 'conta',
    userId: 'userId'
  };

  export type BancoScalarFieldEnum = (typeof BancoScalarFieldEnum)[keyof typeof BancoScalarFieldEnum]


  export const SeguradoraScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    userId: 'userId'
  };

  export type SeguradoraScalarFieldEnum = (typeof SeguradoraScalarFieldEnum)[keyof typeof SeguradoraScalarFieldEnum]


  export const TipoDeVeiculoScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    placa: 'placa',
    marca: 'marca',
    modelo: 'modelo',
    userId: 'userId'
  };

  export type TipoDeVeiculoScalarFieldEnum = (typeof TipoDeVeiculoScalarFieldEnum)[keyof typeof TipoDeVeiculoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    vitimas?: VitimaListRelationFilter
    processos?: ProcessoListRelationFilter
    fasesProcesso?: FaseProcessoListRelationFilter
    tiposDeProcesso?: TiposDeProcessoListRelationFilter
    prioridades?: PrioridadesListRelationFilter
    parceiro?: ParceiroListRelationFilter
    cliente?: ClienteListRelationFilter
    banco?: BancoListRelationFilter
    seguradora?: SeguradoraListRelationFilter
    tipoDeVeiculo?: TipoDeVeiculoListRelationFilter
    documento?: DocumentoListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    vitimas?: VitimaOrderByRelationAggregateInput
    processos?: ProcessoOrderByRelationAggregateInput
    fasesProcesso?: FaseProcessoOrderByRelationAggregateInput
    tiposDeProcesso?: TiposDeProcessoOrderByRelationAggregateInput
    prioridades?: PrioridadesOrderByRelationAggregateInput
    parceiro?: ParceiroOrderByRelationAggregateInput
    cliente?: ClienteOrderByRelationAggregateInput
    banco?: BancoOrderByRelationAggregateInput
    seguradora?: SeguradoraOrderByRelationAggregateInput
    tipoDeVeiculo?: TipoDeVeiculoOrderByRelationAggregateInput
    documento?: DocumentoOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    username?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    vitimas?: VitimaListRelationFilter
    processos?: ProcessoListRelationFilter
    fasesProcesso?: FaseProcessoListRelationFilter
    tiposDeProcesso?: TiposDeProcessoListRelationFilter
    prioridades?: PrioridadesListRelationFilter
    parceiro?: ParceiroListRelationFilter
    cliente?: ClienteListRelationFilter
    banco?: BancoListRelationFilter
    seguradora?: SeguradoraListRelationFilter
    tipoDeVeiculo?: TipoDeVeiculoListRelationFilter
    documento?: DocumentoListRelationFilter
  }, "id">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
  }

  export type VitimaWhereInput = {
    AND?: VitimaWhereInput | VitimaWhereInput[]
    OR?: VitimaWhereInput[]
    NOT?: VitimaWhereInput | VitimaWhereInput[]
    id?: IntFilter<"Vitima"> | number
    nome?: StringFilter<"Vitima"> | string
    cpf?: IntFilter<"Vitima"> | number
    rg?: IntFilter<"Vitima"> | number
    data_nascimento?: DateTimeFilter<"Vitima"> | Date | string
    data_emissao?: DateTimeFilter<"Vitima"> | Date | string
    orgao_expedidor?: StringFilter<"Vitima"> | string
    activo?: BoolFilter<"Vitima"> | boolean
    profissao?: StringFilter<"Vitima"> | string
    renda_mensal?: IntFilter<"Vitima"> | number
    cep?: IntFilter<"Vitima"> | number
    uf?: StringFilter<"Vitima"> | string
    endereco?: StringFilter<"Vitima"> | string
    numero?: IntFilter<"Vitima"> | number
    sexo?: StringFilter<"Vitima"> | string
    complemento?: StringFilter<"Vitima"> | string
    bairro?: StringFilter<"Vitima"> | string
    cidade?: StringFilter<"Vitima"> | string
    email?: StringFilter<"Vitima"> | string
    telefone01?: IntFilter<"Vitima"> | number
    telefone02?: IntFilter<"Vitima"> | number
    userId?: StringFilter<"Vitima"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    processos?: ProcessoListRelationFilter
  }

  export type VitimaOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    cpf?: SortOrder
    rg?: SortOrder
    data_nascimento?: SortOrder
    data_emissao?: SortOrder
    orgao_expedidor?: SortOrder
    activo?: SortOrder
    profissao?: SortOrder
    renda_mensal?: SortOrder
    cep?: SortOrder
    uf?: SortOrder
    endereco?: SortOrder
    numero?: SortOrder
    sexo?: SortOrder
    complemento?: SortOrder
    bairro?: SortOrder
    cidade?: SortOrder
    email?: SortOrder
    telefone01?: SortOrder
    telefone02?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    processos?: ProcessoOrderByRelationAggregateInput
  }

  export type VitimaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: VitimaWhereInput | VitimaWhereInput[]
    OR?: VitimaWhereInput[]
    NOT?: VitimaWhereInput | VitimaWhereInput[]
    nome?: StringFilter<"Vitima"> | string
    cpf?: IntFilter<"Vitima"> | number
    rg?: IntFilter<"Vitima"> | number
    data_nascimento?: DateTimeFilter<"Vitima"> | Date | string
    data_emissao?: DateTimeFilter<"Vitima"> | Date | string
    orgao_expedidor?: StringFilter<"Vitima"> | string
    activo?: BoolFilter<"Vitima"> | boolean
    profissao?: StringFilter<"Vitima"> | string
    renda_mensal?: IntFilter<"Vitima"> | number
    cep?: IntFilter<"Vitima"> | number
    uf?: StringFilter<"Vitima"> | string
    endereco?: StringFilter<"Vitima"> | string
    numero?: IntFilter<"Vitima"> | number
    sexo?: StringFilter<"Vitima"> | string
    complemento?: StringFilter<"Vitima"> | string
    bairro?: StringFilter<"Vitima"> | string
    cidade?: StringFilter<"Vitima"> | string
    email?: StringFilter<"Vitima"> | string
    telefone01?: IntFilter<"Vitima"> | number
    telefone02?: IntFilter<"Vitima"> | number
    userId?: StringFilter<"Vitima"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    processos?: ProcessoListRelationFilter
  }, "id">

  export type VitimaOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    cpf?: SortOrder
    rg?: SortOrder
    data_nascimento?: SortOrder
    data_emissao?: SortOrder
    orgao_expedidor?: SortOrder
    activo?: SortOrder
    profissao?: SortOrder
    renda_mensal?: SortOrder
    cep?: SortOrder
    uf?: SortOrder
    endereco?: SortOrder
    numero?: SortOrder
    sexo?: SortOrder
    complemento?: SortOrder
    bairro?: SortOrder
    cidade?: SortOrder
    email?: SortOrder
    telefone01?: SortOrder
    telefone02?: SortOrder
    userId?: SortOrder
    _count?: VitimaCountOrderByAggregateInput
    _avg?: VitimaAvgOrderByAggregateInput
    _max?: VitimaMaxOrderByAggregateInput
    _min?: VitimaMinOrderByAggregateInput
    _sum?: VitimaSumOrderByAggregateInput
  }

  export type VitimaScalarWhereWithAggregatesInput = {
    AND?: VitimaScalarWhereWithAggregatesInput | VitimaScalarWhereWithAggregatesInput[]
    OR?: VitimaScalarWhereWithAggregatesInput[]
    NOT?: VitimaScalarWhereWithAggregatesInput | VitimaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Vitima"> | number
    nome?: StringWithAggregatesFilter<"Vitima"> | string
    cpf?: IntWithAggregatesFilter<"Vitima"> | number
    rg?: IntWithAggregatesFilter<"Vitima"> | number
    data_nascimento?: DateTimeWithAggregatesFilter<"Vitima"> | Date | string
    data_emissao?: DateTimeWithAggregatesFilter<"Vitima"> | Date | string
    orgao_expedidor?: StringWithAggregatesFilter<"Vitima"> | string
    activo?: BoolWithAggregatesFilter<"Vitima"> | boolean
    profissao?: StringWithAggregatesFilter<"Vitima"> | string
    renda_mensal?: IntWithAggregatesFilter<"Vitima"> | number
    cep?: IntWithAggregatesFilter<"Vitima"> | number
    uf?: StringWithAggregatesFilter<"Vitima"> | string
    endereco?: StringWithAggregatesFilter<"Vitima"> | string
    numero?: IntWithAggregatesFilter<"Vitima"> | number
    sexo?: StringWithAggregatesFilter<"Vitima"> | string
    complemento?: StringWithAggregatesFilter<"Vitima"> | string
    bairro?: StringWithAggregatesFilter<"Vitima"> | string
    cidade?: StringWithAggregatesFilter<"Vitima"> | string
    email?: StringWithAggregatesFilter<"Vitima"> | string
    telefone01?: IntWithAggregatesFilter<"Vitima"> | number
    telefone02?: IntWithAggregatesFilter<"Vitima"> | number
    userId?: StringWithAggregatesFilter<"Vitima"> | string
  }

  export type ProcessoWhereInput = {
    AND?: ProcessoWhereInput | ProcessoWhereInput[]
    OR?: ProcessoWhereInput[]
    NOT?: ProcessoWhereInput | ProcessoWhereInput[]
    id?: IntFilter<"Processo"> | number
    numero?: StringFilter<"Processo"> | string
    tipoProcessoId?: IntFilter<"Processo"> | number
    faseProcessoId?: IntFilter<"Processo"> | number
    vitimaId?: IntFilter<"Processo"> | number
    userId?: StringFilter<"Processo"> | string
    status?: StringFilter<"Processo"> | string
    criado_em?: DateTimeFilter<"Processo"> | Date | string
    atualizado_em?: DateTimeFilter<"Processo"> | Date | string
    tipoProcesso?: XOR<TiposDeProcessoRelationFilter, TiposDeProcessoWhereInput>
    faseProcesso?: XOR<FaseProcessoRelationFilter, FaseProcessoWhereInput>
    vitima?: XOR<VitimaRelationFilter, VitimaWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ProcessoOrderByWithRelationInput = {
    id?: SortOrder
    numero?: SortOrder
    tipoProcessoId?: SortOrder
    faseProcessoId?: SortOrder
    vitimaId?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    criado_em?: SortOrder
    atualizado_em?: SortOrder
    tipoProcesso?: TiposDeProcessoOrderByWithRelationInput
    faseProcesso?: FaseProcessoOrderByWithRelationInput
    vitima?: VitimaOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ProcessoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    numero?: string
    AND?: ProcessoWhereInput | ProcessoWhereInput[]
    OR?: ProcessoWhereInput[]
    NOT?: ProcessoWhereInput | ProcessoWhereInput[]
    tipoProcessoId?: IntFilter<"Processo"> | number
    faseProcessoId?: IntFilter<"Processo"> | number
    vitimaId?: IntFilter<"Processo"> | number
    userId?: StringFilter<"Processo"> | string
    status?: StringFilter<"Processo"> | string
    criado_em?: DateTimeFilter<"Processo"> | Date | string
    atualizado_em?: DateTimeFilter<"Processo"> | Date | string
    tipoProcesso?: XOR<TiposDeProcessoRelationFilter, TiposDeProcessoWhereInput>
    faseProcesso?: XOR<FaseProcessoRelationFilter, FaseProcessoWhereInput>
    vitima?: XOR<VitimaRelationFilter, VitimaWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "numero">

  export type ProcessoOrderByWithAggregationInput = {
    id?: SortOrder
    numero?: SortOrder
    tipoProcessoId?: SortOrder
    faseProcessoId?: SortOrder
    vitimaId?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    criado_em?: SortOrder
    atualizado_em?: SortOrder
    _count?: ProcessoCountOrderByAggregateInput
    _avg?: ProcessoAvgOrderByAggregateInput
    _max?: ProcessoMaxOrderByAggregateInput
    _min?: ProcessoMinOrderByAggregateInput
    _sum?: ProcessoSumOrderByAggregateInput
  }

  export type ProcessoScalarWhereWithAggregatesInput = {
    AND?: ProcessoScalarWhereWithAggregatesInput | ProcessoScalarWhereWithAggregatesInput[]
    OR?: ProcessoScalarWhereWithAggregatesInput[]
    NOT?: ProcessoScalarWhereWithAggregatesInput | ProcessoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Processo"> | number
    numero?: StringWithAggregatesFilter<"Processo"> | string
    tipoProcessoId?: IntWithAggregatesFilter<"Processo"> | number
    faseProcessoId?: IntWithAggregatesFilter<"Processo"> | number
    vitimaId?: IntWithAggregatesFilter<"Processo"> | number
    userId?: StringWithAggregatesFilter<"Processo"> | string
    status?: StringWithAggregatesFilter<"Processo"> | string
    criado_em?: DateTimeWithAggregatesFilter<"Processo"> | Date | string
    atualizado_em?: DateTimeWithAggregatesFilter<"Processo"> | Date | string
  }

  export type TiposDeProcessoWhereInput = {
    AND?: TiposDeProcessoWhereInput | TiposDeProcessoWhereInput[]
    OR?: TiposDeProcessoWhereInput[]
    NOT?: TiposDeProcessoWhereInput | TiposDeProcessoWhereInput[]
    id?: IntFilter<"TiposDeProcesso"> | number
    nome?: StringFilter<"TiposDeProcesso"> | string
    activo?: BoolFilter<"TiposDeProcesso"> | boolean
    userId?: StringFilter<"TiposDeProcesso"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    processo?: ProcessoListRelationFilter
  }

  export type TiposDeProcessoOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    activo?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    processo?: ProcessoOrderByRelationAggregateInput
  }

  export type TiposDeProcessoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TiposDeProcessoWhereInput | TiposDeProcessoWhereInput[]
    OR?: TiposDeProcessoWhereInput[]
    NOT?: TiposDeProcessoWhereInput | TiposDeProcessoWhereInput[]
    nome?: StringFilter<"TiposDeProcesso"> | string
    activo?: BoolFilter<"TiposDeProcesso"> | boolean
    userId?: StringFilter<"TiposDeProcesso"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    processo?: ProcessoListRelationFilter
  }, "id">

  export type TiposDeProcessoOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    activo?: SortOrder
    userId?: SortOrder
    _count?: TiposDeProcessoCountOrderByAggregateInput
    _avg?: TiposDeProcessoAvgOrderByAggregateInput
    _max?: TiposDeProcessoMaxOrderByAggregateInput
    _min?: TiposDeProcessoMinOrderByAggregateInput
    _sum?: TiposDeProcessoSumOrderByAggregateInput
  }

  export type TiposDeProcessoScalarWhereWithAggregatesInput = {
    AND?: TiposDeProcessoScalarWhereWithAggregatesInput | TiposDeProcessoScalarWhereWithAggregatesInput[]
    OR?: TiposDeProcessoScalarWhereWithAggregatesInput[]
    NOT?: TiposDeProcessoScalarWhereWithAggregatesInput | TiposDeProcessoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TiposDeProcesso"> | number
    nome?: StringWithAggregatesFilter<"TiposDeProcesso"> | string
    activo?: BoolWithAggregatesFilter<"TiposDeProcesso"> | boolean
    userId?: StringWithAggregatesFilter<"TiposDeProcesso"> | string
  }

  export type DocumentoWhereInput = {
    AND?: DocumentoWhereInput | DocumentoWhereInput[]
    OR?: DocumentoWhereInput[]
    NOT?: DocumentoWhereInput | DocumentoWhereInput[]
    id?: IntFilter<"Documento"> | number
    tipo?: StringFilter<"Documento"> | string
    descricao?: StringNullableFilter<"Documento"> | string | null
    arquivoUrl?: StringFilter<"Documento"> | string
    metadata?: JsonNullableFilter<"Documento">
    clienteId?: IntFilter<"Documento"> | number
    userId?: StringFilter<"Documento"> | string
    criadoEm?: DateTimeFilter<"Documento"> | Date | string
    cliente?: XOR<ClienteRelationFilter, ClienteWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type DocumentoOrderByWithRelationInput = {
    id?: SortOrder
    tipo?: SortOrder
    descricao?: SortOrderInput | SortOrder
    arquivoUrl?: SortOrder
    metadata?: SortOrderInput | SortOrder
    clienteId?: SortOrder
    userId?: SortOrder
    criadoEm?: SortOrder
    cliente?: ClienteOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type DocumentoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DocumentoWhereInput | DocumentoWhereInput[]
    OR?: DocumentoWhereInput[]
    NOT?: DocumentoWhereInput | DocumentoWhereInput[]
    tipo?: StringFilter<"Documento"> | string
    descricao?: StringNullableFilter<"Documento"> | string | null
    arquivoUrl?: StringFilter<"Documento"> | string
    metadata?: JsonNullableFilter<"Documento">
    clienteId?: IntFilter<"Documento"> | number
    userId?: StringFilter<"Documento"> | string
    criadoEm?: DateTimeFilter<"Documento"> | Date | string
    cliente?: XOR<ClienteRelationFilter, ClienteWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type DocumentoOrderByWithAggregationInput = {
    id?: SortOrder
    tipo?: SortOrder
    descricao?: SortOrderInput | SortOrder
    arquivoUrl?: SortOrder
    metadata?: SortOrderInput | SortOrder
    clienteId?: SortOrder
    userId?: SortOrder
    criadoEm?: SortOrder
    _count?: DocumentoCountOrderByAggregateInput
    _avg?: DocumentoAvgOrderByAggregateInput
    _max?: DocumentoMaxOrderByAggregateInput
    _min?: DocumentoMinOrderByAggregateInput
    _sum?: DocumentoSumOrderByAggregateInput
  }

  export type DocumentoScalarWhereWithAggregatesInput = {
    AND?: DocumentoScalarWhereWithAggregatesInput | DocumentoScalarWhereWithAggregatesInput[]
    OR?: DocumentoScalarWhereWithAggregatesInput[]
    NOT?: DocumentoScalarWhereWithAggregatesInput | DocumentoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Documento"> | number
    tipo?: StringWithAggregatesFilter<"Documento"> | string
    descricao?: StringNullableWithAggregatesFilter<"Documento"> | string | null
    arquivoUrl?: StringWithAggregatesFilter<"Documento"> | string
    metadata?: JsonNullableWithAggregatesFilter<"Documento">
    clienteId?: IntWithAggregatesFilter<"Documento"> | number
    userId?: StringWithAggregatesFilter<"Documento"> | string
    criadoEm?: DateTimeWithAggregatesFilter<"Documento"> | Date | string
  }

  export type FaseProcessoWhereInput = {
    AND?: FaseProcessoWhereInput | FaseProcessoWhereInput[]
    OR?: FaseProcessoWhereInput[]
    NOT?: FaseProcessoWhereInput | FaseProcessoWhereInput[]
    id?: IntFilter<"FaseProcesso"> | number
    nome?: StringFilter<"FaseProcesso"> | string
    cor_fundo?: StringFilter<"FaseProcesso"> | string
    cor_fonte?: StringFilter<"FaseProcesso"> | string
    pendencia?: BoolFilter<"FaseProcesso"> | boolean
    muda_fase?: BoolFilter<"FaseProcesso"> | boolean
    activo?: BoolFilter<"FaseProcesso"> | boolean
    criado_em?: DateTimeFilter<"FaseProcesso"> | Date | string
    atualizado_em?: DateTimeFilter<"FaseProcesso"> | Date | string
    userId?: StringFilter<"FaseProcesso"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    processo?: ProcessoListRelationFilter
  }

  export type FaseProcessoOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    cor_fundo?: SortOrder
    cor_fonte?: SortOrder
    pendencia?: SortOrder
    muda_fase?: SortOrder
    activo?: SortOrder
    criado_em?: SortOrder
    atualizado_em?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    processo?: ProcessoOrderByRelationAggregateInput
  }

  export type FaseProcessoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FaseProcessoWhereInput | FaseProcessoWhereInput[]
    OR?: FaseProcessoWhereInput[]
    NOT?: FaseProcessoWhereInput | FaseProcessoWhereInput[]
    nome?: StringFilter<"FaseProcesso"> | string
    cor_fundo?: StringFilter<"FaseProcesso"> | string
    cor_fonte?: StringFilter<"FaseProcesso"> | string
    pendencia?: BoolFilter<"FaseProcesso"> | boolean
    muda_fase?: BoolFilter<"FaseProcesso"> | boolean
    activo?: BoolFilter<"FaseProcesso"> | boolean
    criado_em?: DateTimeFilter<"FaseProcesso"> | Date | string
    atualizado_em?: DateTimeFilter<"FaseProcesso"> | Date | string
    userId?: StringFilter<"FaseProcesso"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    processo?: ProcessoListRelationFilter
  }, "id">

  export type FaseProcessoOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    cor_fundo?: SortOrder
    cor_fonte?: SortOrder
    pendencia?: SortOrder
    muda_fase?: SortOrder
    activo?: SortOrder
    criado_em?: SortOrder
    atualizado_em?: SortOrder
    userId?: SortOrder
    _count?: FaseProcessoCountOrderByAggregateInput
    _avg?: FaseProcessoAvgOrderByAggregateInput
    _max?: FaseProcessoMaxOrderByAggregateInput
    _min?: FaseProcessoMinOrderByAggregateInput
    _sum?: FaseProcessoSumOrderByAggregateInput
  }

  export type FaseProcessoScalarWhereWithAggregatesInput = {
    AND?: FaseProcessoScalarWhereWithAggregatesInput | FaseProcessoScalarWhereWithAggregatesInput[]
    OR?: FaseProcessoScalarWhereWithAggregatesInput[]
    NOT?: FaseProcessoScalarWhereWithAggregatesInput | FaseProcessoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FaseProcesso"> | number
    nome?: StringWithAggregatesFilter<"FaseProcesso"> | string
    cor_fundo?: StringWithAggregatesFilter<"FaseProcesso"> | string
    cor_fonte?: StringWithAggregatesFilter<"FaseProcesso"> | string
    pendencia?: BoolWithAggregatesFilter<"FaseProcesso"> | boolean
    muda_fase?: BoolWithAggregatesFilter<"FaseProcesso"> | boolean
    activo?: BoolWithAggregatesFilter<"FaseProcesso"> | boolean
    criado_em?: DateTimeWithAggregatesFilter<"FaseProcesso"> | Date | string
    atualizado_em?: DateTimeWithAggregatesFilter<"FaseProcesso"> | Date | string
    userId?: StringWithAggregatesFilter<"FaseProcesso"> | string
  }

  export type PrioridadesWhereInput = {
    AND?: PrioridadesWhereInput | PrioridadesWhereInput[]
    OR?: PrioridadesWhereInput[]
    NOT?: PrioridadesWhereInput | PrioridadesWhereInput[]
    id?: IntFilter<"Prioridades"> | number
    nome?: StringFilter<"Prioridades"> | string
    cor_fundo?: StringFilter<"Prioridades"> | string
    cor_fonte?: StringFilter<"Prioridades"> | string
    activo?: BoolFilter<"Prioridades"> | boolean
    userId?: StringFilter<"Prioridades"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type PrioridadesOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    cor_fundo?: SortOrder
    cor_fonte?: SortOrder
    activo?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type PrioridadesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PrioridadesWhereInput | PrioridadesWhereInput[]
    OR?: PrioridadesWhereInput[]
    NOT?: PrioridadesWhereInput | PrioridadesWhereInput[]
    nome?: StringFilter<"Prioridades"> | string
    cor_fundo?: StringFilter<"Prioridades"> | string
    cor_fonte?: StringFilter<"Prioridades"> | string
    activo?: BoolFilter<"Prioridades"> | boolean
    userId?: StringFilter<"Prioridades"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type PrioridadesOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    cor_fundo?: SortOrder
    cor_fonte?: SortOrder
    activo?: SortOrder
    userId?: SortOrder
    _count?: PrioridadesCountOrderByAggregateInput
    _avg?: PrioridadesAvgOrderByAggregateInput
    _max?: PrioridadesMaxOrderByAggregateInput
    _min?: PrioridadesMinOrderByAggregateInput
    _sum?: PrioridadesSumOrderByAggregateInput
  }

  export type PrioridadesScalarWhereWithAggregatesInput = {
    AND?: PrioridadesScalarWhereWithAggregatesInput | PrioridadesScalarWhereWithAggregatesInput[]
    OR?: PrioridadesScalarWhereWithAggregatesInput[]
    NOT?: PrioridadesScalarWhereWithAggregatesInput | PrioridadesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Prioridades"> | number
    nome?: StringWithAggregatesFilter<"Prioridades"> | string
    cor_fundo?: StringWithAggregatesFilter<"Prioridades"> | string
    cor_fonte?: StringWithAggregatesFilter<"Prioridades"> | string
    activo?: BoolWithAggregatesFilter<"Prioridades"> | boolean
    userId?: StringWithAggregatesFilter<"Prioridades"> | string
  }

  export type ParceiroWhereInput = {
    AND?: ParceiroWhereInput | ParceiroWhereInput[]
    OR?: ParceiroWhereInput[]
    NOT?: ParceiroWhereInput | ParceiroWhereInput[]
    id?: IntFilter<"Parceiro"> | number
    nome?: StringFilter<"Parceiro"> | string
    uf?: StringFilter<"Parceiro"> | string
    cidade?: StringFilter<"Parceiro"> | string
    userId?: StringFilter<"Parceiro"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ParceiroOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    uf?: SortOrder
    cidade?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ParceiroWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ParceiroWhereInput | ParceiroWhereInput[]
    OR?: ParceiroWhereInput[]
    NOT?: ParceiroWhereInput | ParceiroWhereInput[]
    nome?: StringFilter<"Parceiro"> | string
    uf?: StringFilter<"Parceiro"> | string
    cidade?: StringFilter<"Parceiro"> | string
    userId?: StringFilter<"Parceiro"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type ParceiroOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    uf?: SortOrder
    cidade?: SortOrder
    userId?: SortOrder
    _count?: ParceiroCountOrderByAggregateInput
    _avg?: ParceiroAvgOrderByAggregateInput
    _max?: ParceiroMaxOrderByAggregateInput
    _min?: ParceiroMinOrderByAggregateInput
    _sum?: ParceiroSumOrderByAggregateInput
  }

  export type ParceiroScalarWhereWithAggregatesInput = {
    AND?: ParceiroScalarWhereWithAggregatesInput | ParceiroScalarWhereWithAggregatesInput[]
    OR?: ParceiroScalarWhereWithAggregatesInput[]
    NOT?: ParceiroScalarWhereWithAggregatesInput | ParceiroScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Parceiro"> | number
    nome?: StringWithAggregatesFilter<"Parceiro"> | string
    uf?: StringWithAggregatesFilter<"Parceiro"> | string
    cidade?: StringWithAggregatesFilter<"Parceiro"> | string
    userId?: StringWithAggregatesFilter<"Parceiro"> | string
  }

  export type ClienteWhereInput = {
    AND?: ClienteWhereInput | ClienteWhereInput[]
    OR?: ClienteWhereInput[]
    NOT?: ClienteWhereInput | ClienteWhereInput[]
    id?: IntFilter<"Cliente"> | number
    nome?: StringFilter<"Cliente"> | string
    cpf?: StringFilter<"Cliente"> | string
    rg?: StringFilter<"Cliente"> | string
    userId?: StringFilter<"Cliente"> | string
    documento?: DocumentoListRelationFilter
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ClienteOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    cpf?: SortOrder
    rg?: SortOrder
    userId?: SortOrder
    documento?: DocumentoOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
  }

  export type ClienteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    cpf?: string
    AND?: ClienteWhereInput | ClienteWhereInput[]
    OR?: ClienteWhereInput[]
    NOT?: ClienteWhereInput | ClienteWhereInput[]
    nome?: StringFilter<"Cliente"> | string
    rg?: StringFilter<"Cliente"> | string
    userId?: StringFilter<"Cliente"> | string
    documento?: DocumentoListRelationFilter
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "cpf">

  export type ClienteOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    cpf?: SortOrder
    rg?: SortOrder
    userId?: SortOrder
    _count?: ClienteCountOrderByAggregateInput
    _avg?: ClienteAvgOrderByAggregateInput
    _max?: ClienteMaxOrderByAggregateInput
    _min?: ClienteMinOrderByAggregateInput
    _sum?: ClienteSumOrderByAggregateInput
  }

  export type ClienteScalarWhereWithAggregatesInput = {
    AND?: ClienteScalarWhereWithAggregatesInput | ClienteScalarWhereWithAggregatesInput[]
    OR?: ClienteScalarWhereWithAggregatesInput[]
    NOT?: ClienteScalarWhereWithAggregatesInput | ClienteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Cliente"> | number
    nome?: StringWithAggregatesFilter<"Cliente"> | string
    cpf?: StringWithAggregatesFilter<"Cliente"> | string
    rg?: StringWithAggregatesFilter<"Cliente"> | string
    userId?: StringWithAggregatesFilter<"Cliente"> | string
  }

  export type BancoWhereInput = {
    AND?: BancoWhereInput | BancoWhereInput[]
    OR?: BancoWhereInput[]
    NOT?: BancoWhereInput | BancoWhereInput[]
    id?: IntFilter<"Banco"> | number
    nome?: StringFilter<"Banco"> | string
    agencia?: StringFilter<"Banco"> | string
    conta?: StringFilter<"Banco"> | string
    userId?: StringFilter<"Banco"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type BancoOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    agencia?: SortOrder
    conta?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type BancoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    conta?: string
    AND?: BancoWhereInput | BancoWhereInput[]
    OR?: BancoWhereInput[]
    NOT?: BancoWhereInput | BancoWhereInput[]
    nome?: StringFilter<"Banco"> | string
    agencia?: StringFilter<"Banco"> | string
    userId?: StringFilter<"Banco"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "conta">

  export type BancoOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    agencia?: SortOrder
    conta?: SortOrder
    userId?: SortOrder
    _count?: BancoCountOrderByAggregateInput
    _avg?: BancoAvgOrderByAggregateInput
    _max?: BancoMaxOrderByAggregateInput
    _min?: BancoMinOrderByAggregateInput
    _sum?: BancoSumOrderByAggregateInput
  }

  export type BancoScalarWhereWithAggregatesInput = {
    AND?: BancoScalarWhereWithAggregatesInput | BancoScalarWhereWithAggregatesInput[]
    OR?: BancoScalarWhereWithAggregatesInput[]
    NOT?: BancoScalarWhereWithAggregatesInput | BancoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Banco"> | number
    nome?: StringWithAggregatesFilter<"Banco"> | string
    agencia?: StringWithAggregatesFilter<"Banco"> | string
    conta?: StringWithAggregatesFilter<"Banco"> | string
    userId?: StringWithAggregatesFilter<"Banco"> | string
  }

  export type SeguradoraWhereInput = {
    AND?: SeguradoraWhereInput | SeguradoraWhereInput[]
    OR?: SeguradoraWhereInput[]
    NOT?: SeguradoraWhereInput | SeguradoraWhereInput[]
    id?: IntFilter<"Seguradora"> | number
    nome?: StringFilter<"Seguradora"> | string
    userId?: StringFilter<"Seguradora"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SeguradoraOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SeguradoraWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SeguradoraWhereInput | SeguradoraWhereInput[]
    OR?: SeguradoraWhereInput[]
    NOT?: SeguradoraWhereInput | SeguradoraWhereInput[]
    nome?: StringFilter<"Seguradora"> | string
    userId?: StringFilter<"Seguradora"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type SeguradoraOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    userId?: SortOrder
    _count?: SeguradoraCountOrderByAggregateInput
    _avg?: SeguradoraAvgOrderByAggregateInput
    _max?: SeguradoraMaxOrderByAggregateInput
    _min?: SeguradoraMinOrderByAggregateInput
    _sum?: SeguradoraSumOrderByAggregateInput
  }

  export type SeguradoraScalarWhereWithAggregatesInput = {
    AND?: SeguradoraScalarWhereWithAggregatesInput | SeguradoraScalarWhereWithAggregatesInput[]
    OR?: SeguradoraScalarWhereWithAggregatesInput[]
    NOT?: SeguradoraScalarWhereWithAggregatesInput | SeguradoraScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Seguradora"> | number
    nome?: StringWithAggregatesFilter<"Seguradora"> | string
    userId?: StringWithAggregatesFilter<"Seguradora"> | string
  }

  export type TipoDeVeiculoWhereInput = {
    AND?: TipoDeVeiculoWhereInput | TipoDeVeiculoWhereInput[]
    OR?: TipoDeVeiculoWhereInput[]
    NOT?: TipoDeVeiculoWhereInput | TipoDeVeiculoWhereInput[]
    id?: IntFilter<"TipoDeVeiculo"> | number
    nome?: StringFilter<"TipoDeVeiculo"> | string
    placa?: StringFilter<"TipoDeVeiculo"> | string
    marca?: StringFilter<"TipoDeVeiculo"> | string
    modelo?: StringFilter<"TipoDeVeiculo"> | string
    userId?: StringFilter<"TipoDeVeiculo"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type TipoDeVeiculoOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    placa?: SortOrder
    marca?: SortOrder
    modelo?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type TipoDeVeiculoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    placa?: string
    AND?: TipoDeVeiculoWhereInput | TipoDeVeiculoWhereInput[]
    OR?: TipoDeVeiculoWhereInput[]
    NOT?: TipoDeVeiculoWhereInput | TipoDeVeiculoWhereInput[]
    nome?: StringFilter<"TipoDeVeiculo"> | string
    marca?: StringFilter<"TipoDeVeiculo"> | string
    modelo?: StringFilter<"TipoDeVeiculo"> | string
    userId?: StringFilter<"TipoDeVeiculo"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "placa">

  export type TipoDeVeiculoOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    placa?: SortOrder
    marca?: SortOrder
    modelo?: SortOrder
    userId?: SortOrder
    _count?: TipoDeVeiculoCountOrderByAggregateInput
    _avg?: TipoDeVeiculoAvgOrderByAggregateInput
    _max?: TipoDeVeiculoMaxOrderByAggregateInput
    _min?: TipoDeVeiculoMinOrderByAggregateInput
    _sum?: TipoDeVeiculoSumOrderByAggregateInput
  }

  export type TipoDeVeiculoScalarWhereWithAggregatesInput = {
    AND?: TipoDeVeiculoScalarWhereWithAggregatesInput | TipoDeVeiculoScalarWhereWithAggregatesInput[]
    OR?: TipoDeVeiculoScalarWhereWithAggregatesInput[]
    NOT?: TipoDeVeiculoScalarWhereWithAggregatesInput | TipoDeVeiculoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TipoDeVeiculo"> | number
    nome?: StringWithAggregatesFilter<"TipoDeVeiculo"> | string
    placa?: StringWithAggregatesFilter<"TipoDeVeiculo"> | string
    marca?: StringWithAggregatesFilter<"TipoDeVeiculo"> | string
    modelo?: StringWithAggregatesFilter<"TipoDeVeiculo"> | string
    userId?: StringWithAggregatesFilter<"TipoDeVeiculo"> | string
  }

  export type UserCreateInput = {
    id?: string
    username: string
    email: string
    password: string
    vitimas?: VitimaCreateNestedManyWithoutUserInput
    processos?: ProcessoCreateNestedManyWithoutUserInput
    fasesProcesso?: FaseProcessoCreateNestedManyWithoutUserInput
    tiposDeProcesso?: TiposDeProcessoCreateNestedManyWithoutUserInput
    prioridades?: PrioridadesCreateNestedManyWithoutUserInput
    parceiro?: ParceiroCreateNestedManyWithoutUserInput
    cliente?: ClienteCreateNestedManyWithoutUserInput
    banco?: BancoCreateNestedManyWithoutUserInput
    seguradora?: SeguradoraCreateNestedManyWithoutUserInput
    tipoDeVeiculo?: TipoDeVeiculoCreateNestedManyWithoutUserInput
    documento?: DocumentoCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    username: string
    email: string
    password: string
    vitimas?: VitimaUncheckedCreateNestedManyWithoutUserInput
    processos?: ProcessoUncheckedCreateNestedManyWithoutUserInput
    fasesProcesso?: FaseProcessoUncheckedCreateNestedManyWithoutUserInput
    tiposDeProcesso?: TiposDeProcessoUncheckedCreateNestedManyWithoutUserInput
    prioridades?: PrioridadesUncheckedCreateNestedManyWithoutUserInput
    parceiro?: ParceiroUncheckedCreateNestedManyWithoutUserInput
    cliente?: ClienteUncheckedCreateNestedManyWithoutUserInput
    banco?: BancoUncheckedCreateNestedManyWithoutUserInput
    seguradora?: SeguradoraUncheckedCreateNestedManyWithoutUserInput
    tipoDeVeiculo?: TipoDeVeiculoUncheckedCreateNestedManyWithoutUserInput
    documento?: DocumentoUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    vitimas?: VitimaUpdateManyWithoutUserNestedInput
    processos?: ProcessoUpdateManyWithoutUserNestedInput
    fasesProcesso?: FaseProcessoUpdateManyWithoutUserNestedInput
    tiposDeProcesso?: TiposDeProcessoUpdateManyWithoutUserNestedInput
    prioridades?: PrioridadesUpdateManyWithoutUserNestedInput
    parceiro?: ParceiroUpdateManyWithoutUserNestedInput
    cliente?: ClienteUpdateManyWithoutUserNestedInput
    banco?: BancoUpdateManyWithoutUserNestedInput
    seguradora?: SeguradoraUpdateManyWithoutUserNestedInput
    tipoDeVeiculo?: TipoDeVeiculoUpdateManyWithoutUserNestedInput
    documento?: DocumentoUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    vitimas?: VitimaUncheckedUpdateManyWithoutUserNestedInput
    processos?: ProcessoUncheckedUpdateManyWithoutUserNestedInput
    fasesProcesso?: FaseProcessoUncheckedUpdateManyWithoutUserNestedInput
    tiposDeProcesso?: TiposDeProcessoUncheckedUpdateManyWithoutUserNestedInput
    prioridades?: PrioridadesUncheckedUpdateManyWithoutUserNestedInput
    parceiro?: ParceiroUncheckedUpdateManyWithoutUserNestedInput
    cliente?: ClienteUncheckedUpdateManyWithoutUserNestedInput
    banco?: BancoUncheckedUpdateManyWithoutUserNestedInput
    seguradora?: SeguradoraUncheckedUpdateManyWithoutUserNestedInput
    tipoDeVeiculo?: TipoDeVeiculoUncheckedUpdateManyWithoutUserNestedInput
    documento?: DocumentoUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    username: string
    email: string
    password: string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type VitimaCreateInput = {
    nome: string
    cpf: number
    rg: number
    data_nascimento: Date | string
    data_emissao: Date | string
    orgao_expedidor: string
    activo: boolean
    profissao: string
    renda_mensal: number
    cep: number
    uf: string
    endereco: string
    numero: number
    sexo: string
    complemento: string
    bairro: string
    cidade: string
    email: string
    telefone01: number
    telefone02: number
    user: UserCreateNestedOneWithoutVitimasInput
    processos?: ProcessoCreateNestedManyWithoutVitimaInput
  }

  export type VitimaUncheckedCreateInput = {
    id?: number
    nome: string
    cpf: number
    rg: number
    data_nascimento: Date | string
    data_emissao: Date | string
    orgao_expedidor: string
    activo: boolean
    profissao: string
    renda_mensal: number
    cep: number
    uf: string
    endereco: string
    numero: number
    sexo: string
    complemento: string
    bairro: string
    cidade: string
    email: string
    telefone01: number
    telefone02: number
    userId: string
    processos?: ProcessoUncheckedCreateNestedManyWithoutVitimaInput
  }

  export type VitimaUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    cpf?: IntFieldUpdateOperationsInput | number
    rg?: IntFieldUpdateOperationsInput | number
    data_nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    data_emissao?: DateTimeFieldUpdateOperationsInput | Date | string
    orgao_expedidor?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    profissao?: StringFieldUpdateOperationsInput | string
    renda_mensal?: IntFieldUpdateOperationsInput | number
    cep?: IntFieldUpdateOperationsInput | number
    uf?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    sexo?: StringFieldUpdateOperationsInput | string
    complemento?: StringFieldUpdateOperationsInput | string
    bairro?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone01?: IntFieldUpdateOperationsInput | number
    telefone02?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutVitimasNestedInput
    processos?: ProcessoUpdateManyWithoutVitimaNestedInput
  }

  export type VitimaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    cpf?: IntFieldUpdateOperationsInput | number
    rg?: IntFieldUpdateOperationsInput | number
    data_nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    data_emissao?: DateTimeFieldUpdateOperationsInput | Date | string
    orgao_expedidor?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    profissao?: StringFieldUpdateOperationsInput | string
    renda_mensal?: IntFieldUpdateOperationsInput | number
    cep?: IntFieldUpdateOperationsInput | number
    uf?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    sexo?: StringFieldUpdateOperationsInput | string
    complemento?: StringFieldUpdateOperationsInput | string
    bairro?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone01?: IntFieldUpdateOperationsInput | number
    telefone02?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    processos?: ProcessoUncheckedUpdateManyWithoutVitimaNestedInput
  }

  export type VitimaCreateManyInput = {
    id?: number
    nome: string
    cpf: number
    rg: number
    data_nascimento: Date | string
    data_emissao: Date | string
    orgao_expedidor: string
    activo: boolean
    profissao: string
    renda_mensal: number
    cep: number
    uf: string
    endereco: string
    numero: number
    sexo: string
    complemento: string
    bairro: string
    cidade: string
    email: string
    telefone01: number
    telefone02: number
    userId: string
  }

  export type VitimaUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    cpf?: IntFieldUpdateOperationsInput | number
    rg?: IntFieldUpdateOperationsInput | number
    data_nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    data_emissao?: DateTimeFieldUpdateOperationsInput | Date | string
    orgao_expedidor?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    profissao?: StringFieldUpdateOperationsInput | string
    renda_mensal?: IntFieldUpdateOperationsInput | number
    cep?: IntFieldUpdateOperationsInput | number
    uf?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    sexo?: StringFieldUpdateOperationsInput | string
    complemento?: StringFieldUpdateOperationsInput | string
    bairro?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone01?: IntFieldUpdateOperationsInput | number
    telefone02?: IntFieldUpdateOperationsInput | number
  }

  export type VitimaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    cpf?: IntFieldUpdateOperationsInput | number
    rg?: IntFieldUpdateOperationsInput | number
    data_nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    data_emissao?: DateTimeFieldUpdateOperationsInput | Date | string
    orgao_expedidor?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    profissao?: StringFieldUpdateOperationsInput | string
    renda_mensal?: IntFieldUpdateOperationsInput | number
    cep?: IntFieldUpdateOperationsInput | number
    uf?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    sexo?: StringFieldUpdateOperationsInput | string
    complemento?: StringFieldUpdateOperationsInput | string
    bairro?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone01?: IntFieldUpdateOperationsInput | number
    telefone02?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ProcessoCreateInput = {
    numero: string
    status: string
    criado_em?: Date | string
    atualizado_em?: Date | string
    tipoProcesso: TiposDeProcessoCreateNestedOneWithoutProcessoInput
    faseProcesso: FaseProcessoCreateNestedOneWithoutProcessoInput
    vitima: VitimaCreateNestedOneWithoutProcessosInput
    user: UserCreateNestedOneWithoutProcessosInput
  }

  export type ProcessoUncheckedCreateInput = {
    id?: number
    numero: string
    tipoProcessoId: number
    faseProcessoId: number
    vitimaId: number
    userId: string
    status: string
    criado_em?: Date | string
    atualizado_em?: Date | string
  }

  export type ProcessoUpdateInput = {
    numero?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoProcesso?: TiposDeProcessoUpdateOneRequiredWithoutProcessoNestedInput
    faseProcesso?: FaseProcessoUpdateOneRequiredWithoutProcessoNestedInput
    vitima?: VitimaUpdateOneRequiredWithoutProcessosNestedInput
    user?: UserUpdateOneRequiredWithoutProcessosNestedInput
  }

  export type ProcessoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero?: StringFieldUpdateOperationsInput | string
    tipoProcessoId?: IntFieldUpdateOperationsInput | number
    faseProcessoId?: IntFieldUpdateOperationsInput | number
    vitimaId?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProcessoCreateManyInput = {
    id?: number
    numero: string
    tipoProcessoId: number
    faseProcessoId: number
    vitimaId: number
    userId: string
    status: string
    criado_em?: Date | string
    atualizado_em?: Date | string
  }

  export type ProcessoUpdateManyMutationInput = {
    numero?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProcessoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero?: StringFieldUpdateOperationsInput | string
    tipoProcessoId?: IntFieldUpdateOperationsInput | number
    faseProcessoId?: IntFieldUpdateOperationsInput | number
    vitimaId?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TiposDeProcessoCreateInput = {
    nome: string
    activo: boolean
    user: UserCreateNestedOneWithoutTiposDeProcessoInput
    processo?: ProcessoCreateNestedManyWithoutTipoProcessoInput
  }

  export type TiposDeProcessoUncheckedCreateInput = {
    id?: number
    nome: string
    activo: boolean
    userId: string
    processo?: ProcessoUncheckedCreateNestedManyWithoutTipoProcessoInput
  }

  export type TiposDeProcessoUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutTiposDeProcessoNestedInput
    processo?: ProcessoUpdateManyWithoutTipoProcessoNestedInput
  }

  export type TiposDeProcessoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    processo?: ProcessoUncheckedUpdateManyWithoutTipoProcessoNestedInput
  }

  export type TiposDeProcessoCreateManyInput = {
    id?: number
    nome: string
    activo: boolean
    userId: string
  }

  export type TiposDeProcessoUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TiposDeProcessoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentoCreateInput = {
    tipo: string
    descricao?: string | null
    arquivoUrl: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    criadoEm?: Date | string
    cliente: ClienteCreateNestedOneWithoutDocumentoInput
    user: UserCreateNestedOneWithoutDocumentoInput
  }

  export type DocumentoUncheckedCreateInput = {
    id?: number
    tipo: string
    descricao?: string | null
    arquivoUrl: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    clienteId: number
    userId: string
    criadoEm?: Date | string
  }

  export type DocumentoUpdateInput = {
    tipo?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    arquivoUrl?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    cliente?: ClienteUpdateOneRequiredWithoutDocumentoNestedInput
    user?: UserUpdateOneRequiredWithoutDocumentoNestedInput
  }

  export type DocumentoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    arquivoUrl?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    clienteId?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentoCreateManyInput = {
    id?: number
    tipo: string
    descricao?: string | null
    arquivoUrl: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    clienteId: number
    userId: string
    criadoEm?: Date | string
  }

  export type DocumentoUpdateManyMutationInput = {
    tipo?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    arquivoUrl?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    arquivoUrl?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    clienteId?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FaseProcessoCreateInput = {
    nome: string
    cor_fundo: string
    cor_fonte: string
    pendencia: boolean
    muda_fase: boolean
    activo: boolean
    criado_em?: Date | string
    atualizado_em?: Date | string
    user: UserCreateNestedOneWithoutFasesProcessoInput
    processo?: ProcessoCreateNestedManyWithoutFaseProcessoInput
  }

  export type FaseProcessoUncheckedCreateInput = {
    id?: number
    nome: string
    cor_fundo: string
    cor_fonte: string
    pendencia: boolean
    muda_fase: boolean
    activo: boolean
    criado_em?: Date | string
    atualizado_em?: Date | string
    userId: string
    processo?: ProcessoUncheckedCreateNestedManyWithoutFaseProcessoInput
  }

  export type FaseProcessoUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    cor_fundo?: StringFieldUpdateOperationsInput | string
    cor_fonte?: StringFieldUpdateOperationsInput | string
    pendencia?: BoolFieldUpdateOperationsInput | boolean
    muda_fase?: BoolFieldUpdateOperationsInput | boolean
    activo?: BoolFieldUpdateOperationsInput | boolean
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFasesProcessoNestedInput
    processo?: ProcessoUpdateManyWithoutFaseProcessoNestedInput
  }

  export type FaseProcessoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    cor_fundo?: StringFieldUpdateOperationsInput | string
    cor_fonte?: StringFieldUpdateOperationsInput | string
    pendencia?: BoolFieldUpdateOperationsInput | boolean
    muda_fase?: BoolFieldUpdateOperationsInput | boolean
    activo?: BoolFieldUpdateOperationsInput | boolean
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    processo?: ProcessoUncheckedUpdateManyWithoutFaseProcessoNestedInput
  }

  export type FaseProcessoCreateManyInput = {
    id?: number
    nome: string
    cor_fundo: string
    cor_fonte: string
    pendencia: boolean
    muda_fase: boolean
    activo: boolean
    criado_em?: Date | string
    atualizado_em?: Date | string
    userId: string
  }

  export type FaseProcessoUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    cor_fundo?: StringFieldUpdateOperationsInput | string
    cor_fonte?: StringFieldUpdateOperationsInput | string
    pendencia?: BoolFieldUpdateOperationsInput | boolean
    muda_fase?: BoolFieldUpdateOperationsInput | boolean
    activo?: BoolFieldUpdateOperationsInput | boolean
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FaseProcessoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    cor_fundo?: StringFieldUpdateOperationsInput | string
    cor_fonte?: StringFieldUpdateOperationsInput | string
    pendencia?: BoolFieldUpdateOperationsInput | boolean
    muda_fase?: BoolFieldUpdateOperationsInput | boolean
    activo?: BoolFieldUpdateOperationsInput | boolean
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type PrioridadesCreateInput = {
    nome: string
    cor_fundo: string
    cor_fonte: string
    activo: boolean
    user: UserCreateNestedOneWithoutPrioridadesInput
  }

  export type PrioridadesUncheckedCreateInput = {
    id?: number
    nome: string
    cor_fundo: string
    cor_fonte: string
    activo: boolean
    userId: string
  }

  export type PrioridadesUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    cor_fundo?: StringFieldUpdateOperationsInput | string
    cor_fonte?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutPrioridadesNestedInput
  }

  export type PrioridadesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    cor_fundo?: StringFieldUpdateOperationsInput | string
    cor_fonte?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type PrioridadesCreateManyInput = {
    id?: number
    nome: string
    cor_fundo: string
    cor_fonte: string
    activo: boolean
    userId: string
  }

  export type PrioridadesUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    cor_fundo?: StringFieldUpdateOperationsInput | string
    cor_fonte?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PrioridadesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    cor_fundo?: StringFieldUpdateOperationsInput | string
    cor_fonte?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ParceiroCreateInput = {
    nome: string
    uf: string
    cidade: string
    user: UserCreateNestedOneWithoutParceiroInput
  }

  export type ParceiroUncheckedCreateInput = {
    id?: number
    nome: string
    uf: string
    cidade: string
    userId: string
  }

  export type ParceiroUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    uf?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutParceiroNestedInput
  }

  export type ParceiroUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    uf?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ParceiroCreateManyInput = {
    id?: number
    nome: string
    uf: string
    cidade: string
    userId: string
  }

  export type ParceiroUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    uf?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
  }

  export type ParceiroUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    uf?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ClienteCreateInput = {
    nome: string
    cpf: string
    rg: string
    documento?: DocumentoCreateNestedManyWithoutClienteInput
    user: UserCreateNestedOneWithoutClienteInput
  }

  export type ClienteUncheckedCreateInput = {
    id?: number
    nome: string
    cpf: string
    rg: string
    userId: string
    documento?: DocumentoUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: StringFieldUpdateOperationsInput | string
    documento?: DocumentoUpdateManyWithoutClienteNestedInput
    user?: UserUpdateOneRequiredWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    documento?: DocumentoUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type ClienteCreateManyInput = {
    id?: number
    nome: string
    cpf: string
    rg: string
    userId: string
  }

  export type ClienteUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: StringFieldUpdateOperationsInput | string
  }

  export type ClienteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type BancoCreateInput = {
    nome: string
    agencia: string
    conta: string
    user: UserCreateNestedOneWithoutBancoInput
  }

  export type BancoUncheckedCreateInput = {
    id?: number
    nome: string
    agencia: string
    conta: string
    userId: string
  }

  export type BancoUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    agencia?: StringFieldUpdateOperationsInput | string
    conta?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutBancoNestedInput
  }

  export type BancoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    agencia?: StringFieldUpdateOperationsInput | string
    conta?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type BancoCreateManyInput = {
    id?: number
    nome: string
    agencia: string
    conta: string
    userId: string
  }

  export type BancoUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    agencia?: StringFieldUpdateOperationsInput | string
    conta?: StringFieldUpdateOperationsInput | string
  }

  export type BancoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    agencia?: StringFieldUpdateOperationsInput | string
    conta?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type SeguradoraCreateInput = {
    nome: string
    user: UserCreateNestedOneWithoutSeguradoraInput
  }

  export type SeguradoraUncheckedCreateInput = {
    id?: number
    nome: string
    userId: string
  }

  export type SeguradoraUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutSeguradoraNestedInput
  }

  export type SeguradoraUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type SeguradoraCreateManyInput = {
    id?: number
    nome: string
    userId: string
  }

  export type SeguradoraUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type SeguradoraUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type TipoDeVeiculoCreateInput = {
    nome: string
    placa: string
    marca: string
    modelo: string
    user: UserCreateNestedOneWithoutTipoDeVeiculoInput
  }

  export type TipoDeVeiculoUncheckedCreateInput = {
    id?: number
    nome: string
    placa: string
    marca: string
    modelo: string
    userId: string
  }

  export type TipoDeVeiculoUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    placa?: StringFieldUpdateOperationsInput | string
    marca?: StringFieldUpdateOperationsInput | string
    modelo?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutTipoDeVeiculoNestedInput
  }

  export type TipoDeVeiculoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    placa?: StringFieldUpdateOperationsInput | string
    marca?: StringFieldUpdateOperationsInput | string
    modelo?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type TipoDeVeiculoCreateManyInput = {
    id?: number
    nome: string
    placa: string
    marca: string
    modelo: string
    userId: string
  }

  export type TipoDeVeiculoUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    placa?: StringFieldUpdateOperationsInput | string
    marca?: StringFieldUpdateOperationsInput | string
    modelo?: StringFieldUpdateOperationsInput | string
  }

  export type TipoDeVeiculoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    placa?: StringFieldUpdateOperationsInput | string
    marca?: StringFieldUpdateOperationsInput | string
    modelo?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type VitimaListRelationFilter = {
    every?: VitimaWhereInput
    some?: VitimaWhereInput
    none?: VitimaWhereInput
  }

  export type ProcessoListRelationFilter = {
    every?: ProcessoWhereInput
    some?: ProcessoWhereInput
    none?: ProcessoWhereInput
  }

  export type FaseProcessoListRelationFilter = {
    every?: FaseProcessoWhereInput
    some?: FaseProcessoWhereInput
    none?: FaseProcessoWhereInput
  }

  export type TiposDeProcessoListRelationFilter = {
    every?: TiposDeProcessoWhereInput
    some?: TiposDeProcessoWhereInput
    none?: TiposDeProcessoWhereInput
  }

  export type PrioridadesListRelationFilter = {
    every?: PrioridadesWhereInput
    some?: PrioridadesWhereInput
    none?: PrioridadesWhereInput
  }

  export type ParceiroListRelationFilter = {
    every?: ParceiroWhereInput
    some?: ParceiroWhereInput
    none?: ParceiroWhereInput
  }

  export type ClienteListRelationFilter = {
    every?: ClienteWhereInput
    some?: ClienteWhereInput
    none?: ClienteWhereInput
  }

  export type BancoListRelationFilter = {
    every?: BancoWhereInput
    some?: BancoWhereInput
    none?: BancoWhereInput
  }

  export type SeguradoraListRelationFilter = {
    every?: SeguradoraWhereInput
    some?: SeguradoraWhereInput
    none?: SeguradoraWhereInput
  }

  export type TipoDeVeiculoListRelationFilter = {
    every?: TipoDeVeiculoWhereInput
    some?: TipoDeVeiculoWhereInput
    none?: TipoDeVeiculoWhereInput
  }

  export type DocumentoListRelationFilter = {
    every?: DocumentoWhereInput
    some?: DocumentoWhereInput
    none?: DocumentoWhereInput
  }

  export type VitimaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProcessoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FaseProcessoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TiposDeProcessoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PrioridadesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ParceiroOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClienteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BancoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SeguradoraOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TipoDeVeiculoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DocumentoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type VitimaCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    cpf?: SortOrder
    rg?: SortOrder
    data_nascimento?: SortOrder
    data_emissao?: SortOrder
    orgao_expedidor?: SortOrder
    activo?: SortOrder
    profissao?: SortOrder
    renda_mensal?: SortOrder
    cep?: SortOrder
    uf?: SortOrder
    endereco?: SortOrder
    numero?: SortOrder
    sexo?: SortOrder
    complemento?: SortOrder
    bairro?: SortOrder
    cidade?: SortOrder
    email?: SortOrder
    telefone01?: SortOrder
    telefone02?: SortOrder
    userId?: SortOrder
  }

  export type VitimaAvgOrderByAggregateInput = {
    id?: SortOrder
    cpf?: SortOrder
    rg?: SortOrder
    renda_mensal?: SortOrder
    cep?: SortOrder
    numero?: SortOrder
    telefone01?: SortOrder
    telefone02?: SortOrder
  }

  export type VitimaMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    cpf?: SortOrder
    rg?: SortOrder
    data_nascimento?: SortOrder
    data_emissao?: SortOrder
    orgao_expedidor?: SortOrder
    activo?: SortOrder
    profissao?: SortOrder
    renda_mensal?: SortOrder
    cep?: SortOrder
    uf?: SortOrder
    endereco?: SortOrder
    numero?: SortOrder
    sexo?: SortOrder
    complemento?: SortOrder
    bairro?: SortOrder
    cidade?: SortOrder
    email?: SortOrder
    telefone01?: SortOrder
    telefone02?: SortOrder
    userId?: SortOrder
  }

  export type VitimaMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    cpf?: SortOrder
    rg?: SortOrder
    data_nascimento?: SortOrder
    data_emissao?: SortOrder
    orgao_expedidor?: SortOrder
    activo?: SortOrder
    profissao?: SortOrder
    renda_mensal?: SortOrder
    cep?: SortOrder
    uf?: SortOrder
    endereco?: SortOrder
    numero?: SortOrder
    sexo?: SortOrder
    complemento?: SortOrder
    bairro?: SortOrder
    cidade?: SortOrder
    email?: SortOrder
    telefone01?: SortOrder
    telefone02?: SortOrder
    userId?: SortOrder
  }

  export type VitimaSumOrderByAggregateInput = {
    id?: SortOrder
    cpf?: SortOrder
    rg?: SortOrder
    renda_mensal?: SortOrder
    cep?: SortOrder
    numero?: SortOrder
    telefone01?: SortOrder
    telefone02?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type TiposDeProcessoRelationFilter = {
    is?: TiposDeProcessoWhereInput
    isNot?: TiposDeProcessoWhereInput
  }

  export type FaseProcessoRelationFilter = {
    is?: FaseProcessoWhereInput
    isNot?: FaseProcessoWhereInput
  }

  export type VitimaRelationFilter = {
    is?: VitimaWhereInput
    isNot?: VitimaWhereInput
  }

  export type ProcessoCountOrderByAggregateInput = {
    id?: SortOrder
    numero?: SortOrder
    tipoProcessoId?: SortOrder
    faseProcessoId?: SortOrder
    vitimaId?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    criado_em?: SortOrder
    atualizado_em?: SortOrder
  }

  export type ProcessoAvgOrderByAggregateInput = {
    id?: SortOrder
    tipoProcessoId?: SortOrder
    faseProcessoId?: SortOrder
    vitimaId?: SortOrder
  }

  export type ProcessoMaxOrderByAggregateInput = {
    id?: SortOrder
    numero?: SortOrder
    tipoProcessoId?: SortOrder
    faseProcessoId?: SortOrder
    vitimaId?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    criado_em?: SortOrder
    atualizado_em?: SortOrder
  }

  export type ProcessoMinOrderByAggregateInput = {
    id?: SortOrder
    numero?: SortOrder
    tipoProcessoId?: SortOrder
    faseProcessoId?: SortOrder
    vitimaId?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    criado_em?: SortOrder
    atualizado_em?: SortOrder
  }

  export type ProcessoSumOrderByAggregateInput = {
    id?: SortOrder
    tipoProcessoId?: SortOrder
    faseProcessoId?: SortOrder
    vitimaId?: SortOrder
  }

  export type TiposDeProcessoCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    activo?: SortOrder
    userId?: SortOrder
  }

  export type TiposDeProcessoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TiposDeProcessoMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    activo?: SortOrder
    userId?: SortOrder
  }

  export type TiposDeProcessoMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    activo?: SortOrder
    userId?: SortOrder
  }

  export type TiposDeProcessoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ClienteRelationFilter = {
    is?: ClienteWhereInput
    isNot?: ClienteWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type DocumentoCountOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    descricao?: SortOrder
    arquivoUrl?: SortOrder
    metadata?: SortOrder
    clienteId?: SortOrder
    userId?: SortOrder
    criadoEm?: SortOrder
  }

  export type DocumentoAvgOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
  }

  export type DocumentoMaxOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    descricao?: SortOrder
    arquivoUrl?: SortOrder
    clienteId?: SortOrder
    userId?: SortOrder
    criadoEm?: SortOrder
  }

  export type DocumentoMinOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    descricao?: SortOrder
    arquivoUrl?: SortOrder
    clienteId?: SortOrder
    userId?: SortOrder
    criadoEm?: SortOrder
  }

  export type DocumentoSumOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type FaseProcessoCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    cor_fundo?: SortOrder
    cor_fonte?: SortOrder
    pendencia?: SortOrder
    muda_fase?: SortOrder
    activo?: SortOrder
    criado_em?: SortOrder
    atualizado_em?: SortOrder
    userId?: SortOrder
  }

  export type FaseProcessoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FaseProcessoMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    cor_fundo?: SortOrder
    cor_fonte?: SortOrder
    pendencia?: SortOrder
    muda_fase?: SortOrder
    activo?: SortOrder
    criado_em?: SortOrder
    atualizado_em?: SortOrder
    userId?: SortOrder
  }

  export type FaseProcessoMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    cor_fundo?: SortOrder
    cor_fonte?: SortOrder
    pendencia?: SortOrder
    muda_fase?: SortOrder
    activo?: SortOrder
    criado_em?: SortOrder
    atualizado_em?: SortOrder
    userId?: SortOrder
  }

  export type FaseProcessoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PrioridadesCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    cor_fundo?: SortOrder
    cor_fonte?: SortOrder
    activo?: SortOrder
    userId?: SortOrder
  }

  export type PrioridadesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PrioridadesMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    cor_fundo?: SortOrder
    cor_fonte?: SortOrder
    activo?: SortOrder
    userId?: SortOrder
  }

  export type PrioridadesMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    cor_fundo?: SortOrder
    cor_fonte?: SortOrder
    activo?: SortOrder
    userId?: SortOrder
  }

  export type PrioridadesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ParceiroCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    uf?: SortOrder
    cidade?: SortOrder
    userId?: SortOrder
  }

  export type ParceiroAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ParceiroMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    uf?: SortOrder
    cidade?: SortOrder
    userId?: SortOrder
  }

  export type ParceiroMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    uf?: SortOrder
    cidade?: SortOrder
    userId?: SortOrder
  }

  export type ParceiroSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ClienteCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    cpf?: SortOrder
    rg?: SortOrder
    userId?: SortOrder
  }

  export type ClienteAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ClienteMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    cpf?: SortOrder
    rg?: SortOrder
    userId?: SortOrder
  }

  export type ClienteMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    cpf?: SortOrder
    rg?: SortOrder
    userId?: SortOrder
  }

  export type ClienteSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BancoCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    agencia?: SortOrder
    conta?: SortOrder
    userId?: SortOrder
  }

  export type BancoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BancoMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    agencia?: SortOrder
    conta?: SortOrder
    userId?: SortOrder
  }

  export type BancoMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    agencia?: SortOrder
    conta?: SortOrder
    userId?: SortOrder
  }

  export type BancoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SeguradoraCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    userId?: SortOrder
  }

  export type SeguradoraAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SeguradoraMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    userId?: SortOrder
  }

  export type SeguradoraMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    userId?: SortOrder
  }

  export type SeguradoraSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TipoDeVeiculoCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    placa?: SortOrder
    marca?: SortOrder
    modelo?: SortOrder
    userId?: SortOrder
  }

  export type TipoDeVeiculoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TipoDeVeiculoMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    placa?: SortOrder
    marca?: SortOrder
    modelo?: SortOrder
    userId?: SortOrder
  }

  export type TipoDeVeiculoMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    placa?: SortOrder
    marca?: SortOrder
    modelo?: SortOrder
    userId?: SortOrder
  }

  export type TipoDeVeiculoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type VitimaCreateNestedManyWithoutUserInput = {
    create?: XOR<VitimaCreateWithoutUserInput, VitimaUncheckedCreateWithoutUserInput> | VitimaCreateWithoutUserInput[] | VitimaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VitimaCreateOrConnectWithoutUserInput | VitimaCreateOrConnectWithoutUserInput[]
    createMany?: VitimaCreateManyUserInputEnvelope
    connect?: VitimaWhereUniqueInput | VitimaWhereUniqueInput[]
  }

  export type ProcessoCreateNestedManyWithoutUserInput = {
    create?: XOR<ProcessoCreateWithoutUserInput, ProcessoUncheckedCreateWithoutUserInput> | ProcessoCreateWithoutUserInput[] | ProcessoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProcessoCreateOrConnectWithoutUserInput | ProcessoCreateOrConnectWithoutUserInput[]
    createMany?: ProcessoCreateManyUserInputEnvelope
    connect?: ProcessoWhereUniqueInput | ProcessoWhereUniqueInput[]
  }

  export type FaseProcessoCreateNestedManyWithoutUserInput = {
    create?: XOR<FaseProcessoCreateWithoutUserInput, FaseProcessoUncheckedCreateWithoutUserInput> | FaseProcessoCreateWithoutUserInput[] | FaseProcessoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FaseProcessoCreateOrConnectWithoutUserInput | FaseProcessoCreateOrConnectWithoutUserInput[]
    createMany?: FaseProcessoCreateManyUserInputEnvelope
    connect?: FaseProcessoWhereUniqueInput | FaseProcessoWhereUniqueInput[]
  }

  export type TiposDeProcessoCreateNestedManyWithoutUserInput = {
    create?: XOR<TiposDeProcessoCreateWithoutUserInput, TiposDeProcessoUncheckedCreateWithoutUserInput> | TiposDeProcessoCreateWithoutUserInput[] | TiposDeProcessoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TiposDeProcessoCreateOrConnectWithoutUserInput | TiposDeProcessoCreateOrConnectWithoutUserInput[]
    createMany?: TiposDeProcessoCreateManyUserInputEnvelope
    connect?: TiposDeProcessoWhereUniqueInput | TiposDeProcessoWhereUniqueInput[]
  }

  export type PrioridadesCreateNestedManyWithoutUserInput = {
    create?: XOR<PrioridadesCreateWithoutUserInput, PrioridadesUncheckedCreateWithoutUserInput> | PrioridadesCreateWithoutUserInput[] | PrioridadesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PrioridadesCreateOrConnectWithoutUserInput | PrioridadesCreateOrConnectWithoutUserInput[]
    createMany?: PrioridadesCreateManyUserInputEnvelope
    connect?: PrioridadesWhereUniqueInput | PrioridadesWhereUniqueInput[]
  }

  export type ParceiroCreateNestedManyWithoutUserInput = {
    create?: XOR<ParceiroCreateWithoutUserInput, ParceiroUncheckedCreateWithoutUserInput> | ParceiroCreateWithoutUserInput[] | ParceiroUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ParceiroCreateOrConnectWithoutUserInput | ParceiroCreateOrConnectWithoutUserInput[]
    createMany?: ParceiroCreateManyUserInputEnvelope
    connect?: ParceiroWhereUniqueInput | ParceiroWhereUniqueInput[]
  }

  export type ClienteCreateNestedManyWithoutUserInput = {
    create?: XOR<ClienteCreateWithoutUserInput, ClienteUncheckedCreateWithoutUserInput> | ClienteCreateWithoutUserInput[] | ClienteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ClienteCreateOrConnectWithoutUserInput | ClienteCreateOrConnectWithoutUserInput[]
    createMany?: ClienteCreateManyUserInputEnvelope
    connect?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
  }

  export type BancoCreateNestedManyWithoutUserInput = {
    create?: XOR<BancoCreateWithoutUserInput, BancoUncheckedCreateWithoutUserInput> | BancoCreateWithoutUserInput[] | BancoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BancoCreateOrConnectWithoutUserInput | BancoCreateOrConnectWithoutUserInput[]
    createMany?: BancoCreateManyUserInputEnvelope
    connect?: BancoWhereUniqueInput | BancoWhereUniqueInput[]
  }

  export type SeguradoraCreateNestedManyWithoutUserInput = {
    create?: XOR<SeguradoraCreateWithoutUserInput, SeguradoraUncheckedCreateWithoutUserInput> | SeguradoraCreateWithoutUserInput[] | SeguradoraUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SeguradoraCreateOrConnectWithoutUserInput | SeguradoraCreateOrConnectWithoutUserInput[]
    createMany?: SeguradoraCreateManyUserInputEnvelope
    connect?: SeguradoraWhereUniqueInput | SeguradoraWhereUniqueInput[]
  }

  export type TipoDeVeiculoCreateNestedManyWithoutUserInput = {
    create?: XOR<TipoDeVeiculoCreateWithoutUserInput, TipoDeVeiculoUncheckedCreateWithoutUserInput> | TipoDeVeiculoCreateWithoutUserInput[] | TipoDeVeiculoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TipoDeVeiculoCreateOrConnectWithoutUserInput | TipoDeVeiculoCreateOrConnectWithoutUserInput[]
    createMany?: TipoDeVeiculoCreateManyUserInputEnvelope
    connect?: TipoDeVeiculoWhereUniqueInput | TipoDeVeiculoWhereUniqueInput[]
  }

  export type DocumentoCreateNestedManyWithoutUserInput = {
    create?: XOR<DocumentoCreateWithoutUserInput, DocumentoUncheckedCreateWithoutUserInput> | DocumentoCreateWithoutUserInput[] | DocumentoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DocumentoCreateOrConnectWithoutUserInput | DocumentoCreateOrConnectWithoutUserInput[]
    createMany?: DocumentoCreateManyUserInputEnvelope
    connect?: DocumentoWhereUniqueInput | DocumentoWhereUniqueInput[]
  }

  export type VitimaUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<VitimaCreateWithoutUserInput, VitimaUncheckedCreateWithoutUserInput> | VitimaCreateWithoutUserInput[] | VitimaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VitimaCreateOrConnectWithoutUserInput | VitimaCreateOrConnectWithoutUserInput[]
    createMany?: VitimaCreateManyUserInputEnvelope
    connect?: VitimaWhereUniqueInput | VitimaWhereUniqueInput[]
  }

  export type ProcessoUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ProcessoCreateWithoutUserInput, ProcessoUncheckedCreateWithoutUserInput> | ProcessoCreateWithoutUserInput[] | ProcessoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProcessoCreateOrConnectWithoutUserInput | ProcessoCreateOrConnectWithoutUserInput[]
    createMany?: ProcessoCreateManyUserInputEnvelope
    connect?: ProcessoWhereUniqueInput | ProcessoWhereUniqueInput[]
  }

  export type FaseProcessoUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FaseProcessoCreateWithoutUserInput, FaseProcessoUncheckedCreateWithoutUserInput> | FaseProcessoCreateWithoutUserInput[] | FaseProcessoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FaseProcessoCreateOrConnectWithoutUserInput | FaseProcessoCreateOrConnectWithoutUserInput[]
    createMany?: FaseProcessoCreateManyUserInputEnvelope
    connect?: FaseProcessoWhereUniqueInput | FaseProcessoWhereUniqueInput[]
  }

  export type TiposDeProcessoUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TiposDeProcessoCreateWithoutUserInput, TiposDeProcessoUncheckedCreateWithoutUserInput> | TiposDeProcessoCreateWithoutUserInput[] | TiposDeProcessoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TiposDeProcessoCreateOrConnectWithoutUserInput | TiposDeProcessoCreateOrConnectWithoutUserInput[]
    createMany?: TiposDeProcessoCreateManyUserInputEnvelope
    connect?: TiposDeProcessoWhereUniqueInput | TiposDeProcessoWhereUniqueInput[]
  }

  export type PrioridadesUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PrioridadesCreateWithoutUserInput, PrioridadesUncheckedCreateWithoutUserInput> | PrioridadesCreateWithoutUserInput[] | PrioridadesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PrioridadesCreateOrConnectWithoutUserInput | PrioridadesCreateOrConnectWithoutUserInput[]
    createMany?: PrioridadesCreateManyUserInputEnvelope
    connect?: PrioridadesWhereUniqueInput | PrioridadesWhereUniqueInput[]
  }

  export type ParceiroUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ParceiroCreateWithoutUserInput, ParceiroUncheckedCreateWithoutUserInput> | ParceiroCreateWithoutUserInput[] | ParceiroUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ParceiroCreateOrConnectWithoutUserInput | ParceiroCreateOrConnectWithoutUserInput[]
    createMany?: ParceiroCreateManyUserInputEnvelope
    connect?: ParceiroWhereUniqueInput | ParceiroWhereUniqueInput[]
  }

  export type ClienteUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ClienteCreateWithoutUserInput, ClienteUncheckedCreateWithoutUserInput> | ClienteCreateWithoutUserInput[] | ClienteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ClienteCreateOrConnectWithoutUserInput | ClienteCreateOrConnectWithoutUserInput[]
    createMany?: ClienteCreateManyUserInputEnvelope
    connect?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
  }

  export type BancoUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BancoCreateWithoutUserInput, BancoUncheckedCreateWithoutUserInput> | BancoCreateWithoutUserInput[] | BancoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BancoCreateOrConnectWithoutUserInput | BancoCreateOrConnectWithoutUserInput[]
    createMany?: BancoCreateManyUserInputEnvelope
    connect?: BancoWhereUniqueInput | BancoWhereUniqueInput[]
  }

  export type SeguradoraUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SeguradoraCreateWithoutUserInput, SeguradoraUncheckedCreateWithoutUserInput> | SeguradoraCreateWithoutUserInput[] | SeguradoraUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SeguradoraCreateOrConnectWithoutUserInput | SeguradoraCreateOrConnectWithoutUserInput[]
    createMany?: SeguradoraCreateManyUserInputEnvelope
    connect?: SeguradoraWhereUniqueInput | SeguradoraWhereUniqueInput[]
  }

  export type TipoDeVeiculoUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TipoDeVeiculoCreateWithoutUserInput, TipoDeVeiculoUncheckedCreateWithoutUserInput> | TipoDeVeiculoCreateWithoutUserInput[] | TipoDeVeiculoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TipoDeVeiculoCreateOrConnectWithoutUserInput | TipoDeVeiculoCreateOrConnectWithoutUserInput[]
    createMany?: TipoDeVeiculoCreateManyUserInputEnvelope
    connect?: TipoDeVeiculoWhereUniqueInput | TipoDeVeiculoWhereUniqueInput[]
  }

  export type DocumentoUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<DocumentoCreateWithoutUserInput, DocumentoUncheckedCreateWithoutUserInput> | DocumentoCreateWithoutUserInput[] | DocumentoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DocumentoCreateOrConnectWithoutUserInput | DocumentoCreateOrConnectWithoutUserInput[]
    createMany?: DocumentoCreateManyUserInputEnvelope
    connect?: DocumentoWhereUniqueInput | DocumentoWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type VitimaUpdateManyWithoutUserNestedInput = {
    create?: XOR<VitimaCreateWithoutUserInput, VitimaUncheckedCreateWithoutUserInput> | VitimaCreateWithoutUserInput[] | VitimaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VitimaCreateOrConnectWithoutUserInput | VitimaCreateOrConnectWithoutUserInput[]
    upsert?: VitimaUpsertWithWhereUniqueWithoutUserInput | VitimaUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: VitimaCreateManyUserInputEnvelope
    set?: VitimaWhereUniqueInput | VitimaWhereUniqueInput[]
    disconnect?: VitimaWhereUniqueInput | VitimaWhereUniqueInput[]
    delete?: VitimaWhereUniqueInput | VitimaWhereUniqueInput[]
    connect?: VitimaWhereUniqueInput | VitimaWhereUniqueInput[]
    update?: VitimaUpdateWithWhereUniqueWithoutUserInput | VitimaUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: VitimaUpdateManyWithWhereWithoutUserInput | VitimaUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: VitimaScalarWhereInput | VitimaScalarWhereInput[]
  }

  export type ProcessoUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProcessoCreateWithoutUserInput, ProcessoUncheckedCreateWithoutUserInput> | ProcessoCreateWithoutUserInput[] | ProcessoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProcessoCreateOrConnectWithoutUserInput | ProcessoCreateOrConnectWithoutUserInput[]
    upsert?: ProcessoUpsertWithWhereUniqueWithoutUserInput | ProcessoUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProcessoCreateManyUserInputEnvelope
    set?: ProcessoWhereUniqueInput | ProcessoWhereUniqueInput[]
    disconnect?: ProcessoWhereUniqueInput | ProcessoWhereUniqueInput[]
    delete?: ProcessoWhereUniqueInput | ProcessoWhereUniqueInput[]
    connect?: ProcessoWhereUniqueInput | ProcessoWhereUniqueInput[]
    update?: ProcessoUpdateWithWhereUniqueWithoutUserInput | ProcessoUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProcessoUpdateManyWithWhereWithoutUserInput | ProcessoUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProcessoScalarWhereInput | ProcessoScalarWhereInput[]
  }

  export type FaseProcessoUpdateManyWithoutUserNestedInput = {
    create?: XOR<FaseProcessoCreateWithoutUserInput, FaseProcessoUncheckedCreateWithoutUserInput> | FaseProcessoCreateWithoutUserInput[] | FaseProcessoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FaseProcessoCreateOrConnectWithoutUserInput | FaseProcessoCreateOrConnectWithoutUserInput[]
    upsert?: FaseProcessoUpsertWithWhereUniqueWithoutUserInput | FaseProcessoUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FaseProcessoCreateManyUserInputEnvelope
    set?: FaseProcessoWhereUniqueInput | FaseProcessoWhereUniqueInput[]
    disconnect?: FaseProcessoWhereUniqueInput | FaseProcessoWhereUniqueInput[]
    delete?: FaseProcessoWhereUniqueInput | FaseProcessoWhereUniqueInput[]
    connect?: FaseProcessoWhereUniqueInput | FaseProcessoWhereUniqueInput[]
    update?: FaseProcessoUpdateWithWhereUniqueWithoutUserInput | FaseProcessoUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FaseProcessoUpdateManyWithWhereWithoutUserInput | FaseProcessoUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FaseProcessoScalarWhereInput | FaseProcessoScalarWhereInput[]
  }

  export type TiposDeProcessoUpdateManyWithoutUserNestedInput = {
    create?: XOR<TiposDeProcessoCreateWithoutUserInput, TiposDeProcessoUncheckedCreateWithoutUserInput> | TiposDeProcessoCreateWithoutUserInput[] | TiposDeProcessoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TiposDeProcessoCreateOrConnectWithoutUserInput | TiposDeProcessoCreateOrConnectWithoutUserInput[]
    upsert?: TiposDeProcessoUpsertWithWhereUniqueWithoutUserInput | TiposDeProcessoUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TiposDeProcessoCreateManyUserInputEnvelope
    set?: TiposDeProcessoWhereUniqueInput | TiposDeProcessoWhereUniqueInput[]
    disconnect?: TiposDeProcessoWhereUniqueInput | TiposDeProcessoWhereUniqueInput[]
    delete?: TiposDeProcessoWhereUniqueInput | TiposDeProcessoWhereUniqueInput[]
    connect?: TiposDeProcessoWhereUniqueInput | TiposDeProcessoWhereUniqueInput[]
    update?: TiposDeProcessoUpdateWithWhereUniqueWithoutUserInput | TiposDeProcessoUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TiposDeProcessoUpdateManyWithWhereWithoutUserInput | TiposDeProcessoUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TiposDeProcessoScalarWhereInput | TiposDeProcessoScalarWhereInput[]
  }

  export type PrioridadesUpdateManyWithoutUserNestedInput = {
    create?: XOR<PrioridadesCreateWithoutUserInput, PrioridadesUncheckedCreateWithoutUserInput> | PrioridadesCreateWithoutUserInput[] | PrioridadesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PrioridadesCreateOrConnectWithoutUserInput | PrioridadesCreateOrConnectWithoutUserInput[]
    upsert?: PrioridadesUpsertWithWhereUniqueWithoutUserInput | PrioridadesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PrioridadesCreateManyUserInputEnvelope
    set?: PrioridadesWhereUniqueInput | PrioridadesWhereUniqueInput[]
    disconnect?: PrioridadesWhereUniqueInput | PrioridadesWhereUniqueInput[]
    delete?: PrioridadesWhereUniqueInput | PrioridadesWhereUniqueInput[]
    connect?: PrioridadesWhereUniqueInput | PrioridadesWhereUniqueInput[]
    update?: PrioridadesUpdateWithWhereUniqueWithoutUserInput | PrioridadesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PrioridadesUpdateManyWithWhereWithoutUserInput | PrioridadesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PrioridadesScalarWhereInput | PrioridadesScalarWhereInput[]
  }

  export type ParceiroUpdateManyWithoutUserNestedInput = {
    create?: XOR<ParceiroCreateWithoutUserInput, ParceiroUncheckedCreateWithoutUserInput> | ParceiroCreateWithoutUserInput[] | ParceiroUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ParceiroCreateOrConnectWithoutUserInput | ParceiroCreateOrConnectWithoutUserInput[]
    upsert?: ParceiroUpsertWithWhereUniqueWithoutUserInput | ParceiroUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ParceiroCreateManyUserInputEnvelope
    set?: ParceiroWhereUniqueInput | ParceiroWhereUniqueInput[]
    disconnect?: ParceiroWhereUniqueInput | ParceiroWhereUniqueInput[]
    delete?: ParceiroWhereUniqueInput | ParceiroWhereUniqueInput[]
    connect?: ParceiroWhereUniqueInput | ParceiroWhereUniqueInput[]
    update?: ParceiroUpdateWithWhereUniqueWithoutUserInput | ParceiroUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ParceiroUpdateManyWithWhereWithoutUserInput | ParceiroUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ParceiroScalarWhereInput | ParceiroScalarWhereInput[]
  }

  export type ClienteUpdateManyWithoutUserNestedInput = {
    create?: XOR<ClienteCreateWithoutUserInput, ClienteUncheckedCreateWithoutUserInput> | ClienteCreateWithoutUserInput[] | ClienteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ClienteCreateOrConnectWithoutUserInput | ClienteCreateOrConnectWithoutUserInput[]
    upsert?: ClienteUpsertWithWhereUniqueWithoutUserInput | ClienteUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ClienteCreateManyUserInputEnvelope
    set?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    disconnect?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    delete?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    connect?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    update?: ClienteUpdateWithWhereUniqueWithoutUserInput | ClienteUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ClienteUpdateManyWithWhereWithoutUserInput | ClienteUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ClienteScalarWhereInput | ClienteScalarWhereInput[]
  }

  export type BancoUpdateManyWithoutUserNestedInput = {
    create?: XOR<BancoCreateWithoutUserInput, BancoUncheckedCreateWithoutUserInput> | BancoCreateWithoutUserInput[] | BancoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BancoCreateOrConnectWithoutUserInput | BancoCreateOrConnectWithoutUserInput[]
    upsert?: BancoUpsertWithWhereUniqueWithoutUserInput | BancoUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BancoCreateManyUserInputEnvelope
    set?: BancoWhereUniqueInput | BancoWhereUniqueInput[]
    disconnect?: BancoWhereUniqueInput | BancoWhereUniqueInput[]
    delete?: BancoWhereUniqueInput | BancoWhereUniqueInput[]
    connect?: BancoWhereUniqueInput | BancoWhereUniqueInput[]
    update?: BancoUpdateWithWhereUniqueWithoutUserInput | BancoUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BancoUpdateManyWithWhereWithoutUserInput | BancoUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BancoScalarWhereInput | BancoScalarWhereInput[]
  }

  export type SeguradoraUpdateManyWithoutUserNestedInput = {
    create?: XOR<SeguradoraCreateWithoutUserInput, SeguradoraUncheckedCreateWithoutUserInput> | SeguradoraCreateWithoutUserInput[] | SeguradoraUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SeguradoraCreateOrConnectWithoutUserInput | SeguradoraCreateOrConnectWithoutUserInput[]
    upsert?: SeguradoraUpsertWithWhereUniqueWithoutUserInput | SeguradoraUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SeguradoraCreateManyUserInputEnvelope
    set?: SeguradoraWhereUniqueInput | SeguradoraWhereUniqueInput[]
    disconnect?: SeguradoraWhereUniqueInput | SeguradoraWhereUniqueInput[]
    delete?: SeguradoraWhereUniqueInput | SeguradoraWhereUniqueInput[]
    connect?: SeguradoraWhereUniqueInput | SeguradoraWhereUniqueInput[]
    update?: SeguradoraUpdateWithWhereUniqueWithoutUserInput | SeguradoraUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SeguradoraUpdateManyWithWhereWithoutUserInput | SeguradoraUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SeguradoraScalarWhereInput | SeguradoraScalarWhereInput[]
  }

  export type TipoDeVeiculoUpdateManyWithoutUserNestedInput = {
    create?: XOR<TipoDeVeiculoCreateWithoutUserInput, TipoDeVeiculoUncheckedCreateWithoutUserInput> | TipoDeVeiculoCreateWithoutUserInput[] | TipoDeVeiculoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TipoDeVeiculoCreateOrConnectWithoutUserInput | TipoDeVeiculoCreateOrConnectWithoutUserInput[]
    upsert?: TipoDeVeiculoUpsertWithWhereUniqueWithoutUserInput | TipoDeVeiculoUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TipoDeVeiculoCreateManyUserInputEnvelope
    set?: TipoDeVeiculoWhereUniqueInput | TipoDeVeiculoWhereUniqueInput[]
    disconnect?: TipoDeVeiculoWhereUniqueInput | TipoDeVeiculoWhereUniqueInput[]
    delete?: TipoDeVeiculoWhereUniqueInput | TipoDeVeiculoWhereUniqueInput[]
    connect?: TipoDeVeiculoWhereUniqueInput | TipoDeVeiculoWhereUniqueInput[]
    update?: TipoDeVeiculoUpdateWithWhereUniqueWithoutUserInput | TipoDeVeiculoUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TipoDeVeiculoUpdateManyWithWhereWithoutUserInput | TipoDeVeiculoUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TipoDeVeiculoScalarWhereInput | TipoDeVeiculoScalarWhereInput[]
  }

  export type DocumentoUpdateManyWithoutUserNestedInput = {
    create?: XOR<DocumentoCreateWithoutUserInput, DocumentoUncheckedCreateWithoutUserInput> | DocumentoCreateWithoutUserInput[] | DocumentoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DocumentoCreateOrConnectWithoutUserInput | DocumentoCreateOrConnectWithoutUserInput[]
    upsert?: DocumentoUpsertWithWhereUniqueWithoutUserInput | DocumentoUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DocumentoCreateManyUserInputEnvelope
    set?: DocumentoWhereUniqueInput | DocumentoWhereUniqueInput[]
    disconnect?: DocumentoWhereUniqueInput | DocumentoWhereUniqueInput[]
    delete?: DocumentoWhereUniqueInput | DocumentoWhereUniqueInput[]
    connect?: DocumentoWhereUniqueInput | DocumentoWhereUniqueInput[]
    update?: DocumentoUpdateWithWhereUniqueWithoutUserInput | DocumentoUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DocumentoUpdateManyWithWhereWithoutUserInput | DocumentoUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DocumentoScalarWhereInput | DocumentoScalarWhereInput[]
  }

  export type VitimaUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<VitimaCreateWithoutUserInput, VitimaUncheckedCreateWithoutUserInput> | VitimaCreateWithoutUserInput[] | VitimaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VitimaCreateOrConnectWithoutUserInput | VitimaCreateOrConnectWithoutUserInput[]
    upsert?: VitimaUpsertWithWhereUniqueWithoutUserInput | VitimaUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: VitimaCreateManyUserInputEnvelope
    set?: VitimaWhereUniqueInput | VitimaWhereUniqueInput[]
    disconnect?: VitimaWhereUniqueInput | VitimaWhereUniqueInput[]
    delete?: VitimaWhereUniqueInput | VitimaWhereUniqueInput[]
    connect?: VitimaWhereUniqueInput | VitimaWhereUniqueInput[]
    update?: VitimaUpdateWithWhereUniqueWithoutUserInput | VitimaUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: VitimaUpdateManyWithWhereWithoutUserInput | VitimaUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: VitimaScalarWhereInput | VitimaScalarWhereInput[]
  }

  export type ProcessoUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProcessoCreateWithoutUserInput, ProcessoUncheckedCreateWithoutUserInput> | ProcessoCreateWithoutUserInput[] | ProcessoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProcessoCreateOrConnectWithoutUserInput | ProcessoCreateOrConnectWithoutUserInput[]
    upsert?: ProcessoUpsertWithWhereUniqueWithoutUserInput | ProcessoUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProcessoCreateManyUserInputEnvelope
    set?: ProcessoWhereUniqueInput | ProcessoWhereUniqueInput[]
    disconnect?: ProcessoWhereUniqueInput | ProcessoWhereUniqueInput[]
    delete?: ProcessoWhereUniqueInput | ProcessoWhereUniqueInput[]
    connect?: ProcessoWhereUniqueInput | ProcessoWhereUniqueInput[]
    update?: ProcessoUpdateWithWhereUniqueWithoutUserInput | ProcessoUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProcessoUpdateManyWithWhereWithoutUserInput | ProcessoUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProcessoScalarWhereInput | ProcessoScalarWhereInput[]
  }

  export type FaseProcessoUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FaseProcessoCreateWithoutUserInput, FaseProcessoUncheckedCreateWithoutUserInput> | FaseProcessoCreateWithoutUserInput[] | FaseProcessoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FaseProcessoCreateOrConnectWithoutUserInput | FaseProcessoCreateOrConnectWithoutUserInput[]
    upsert?: FaseProcessoUpsertWithWhereUniqueWithoutUserInput | FaseProcessoUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FaseProcessoCreateManyUserInputEnvelope
    set?: FaseProcessoWhereUniqueInput | FaseProcessoWhereUniqueInput[]
    disconnect?: FaseProcessoWhereUniqueInput | FaseProcessoWhereUniqueInput[]
    delete?: FaseProcessoWhereUniqueInput | FaseProcessoWhereUniqueInput[]
    connect?: FaseProcessoWhereUniqueInput | FaseProcessoWhereUniqueInput[]
    update?: FaseProcessoUpdateWithWhereUniqueWithoutUserInput | FaseProcessoUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FaseProcessoUpdateManyWithWhereWithoutUserInput | FaseProcessoUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FaseProcessoScalarWhereInput | FaseProcessoScalarWhereInput[]
  }

  export type TiposDeProcessoUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TiposDeProcessoCreateWithoutUserInput, TiposDeProcessoUncheckedCreateWithoutUserInput> | TiposDeProcessoCreateWithoutUserInput[] | TiposDeProcessoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TiposDeProcessoCreateOrConnectWithoutUserInput | TiposDeProcessoCreateOrConnectWithoutUserInput[]
    upsert?: TiposDeProcessoUpsertWithWhereUniqueWithoutUserInput | TiposDeProcessoUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TiposDeProcessoCreateManyUserInputEnvelope
    set?: TiposDeProcessoWhereUniqueInput | TiposDeProcessoWhereUniqueInput[]
    disconnect?: TiposDeProcessoWhereUniqueInput | TiposDeProcessoWhereUniqueInput[]
    delete?: TiposDeProcessoWhereUniqueInput | TiposDeProcessoWhereUniqueInput[]
    connect?: TiposDeProcessoWhereUniqueInput | TiposDeProcessoWhereUniqueInput[]
    update?: TiposDeProcessoUpdateWithWhereUniqueWithoutUserInput | TiposDeProcessoUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TiposDeProcessoUpdateManyWithWhereWithoutUserInput | TiposDeProcessoUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TiposDeProcessoScalarWhereInput | TiposDeProcessoScalarWhereInput[]
  }

  export type PrioridadesUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PrioridadesCreateWithoutUserInput, PrioridadesUncheckedCreateWithoutUserInput> | PrioridadesCreateWithoutUserInput[] | PrioridadesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PrioridadesCreateOrConnectWithoutUserInput | PrioridadesCreateOrConnectWithoutUserInput[]
    upsert?: PrioridadesUpsertWithWhereUniqueWithoutUserInput | PrioridadesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PrioridadesCreateManyUserInputEnvelope
    set?: PrioridadesWhereUniqueInput | PrioridadesWhereUniqueInput[]
    disconnect?: PrioridadesWhereUniqueInput | PrioridadesWhereUniqueInput[]
    delete?: PrioridadesWhereUniqueInput | PrioridadesWhereUniqueInput[]
    connect?: PrioridadesWhereUniqueInput | PrioridadesWhereUniqueInput[]
    update?: PrioridadesUpdateWithWhereUniqueWithoutUserInput | PrioridadesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PrioridadesUpdateManyWithWhereWithoutUserInput | PrioridadesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PrioridadesScalarWhereInput | PrioridadesScalarWhereInput[]
  }

  export type ParceiroUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ParceiroCreateWithoutUserInput, ParceiroUncheckedCreateWithoutUserInput> | ParceiroCreateWithoutUserInput[] | ParceiroUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ParceiroCreateOrConnectWithoutUserInput | ParceiroCreateOrConnectWithoutUserInput[]
    upsert?: ParceiroUpsertWithWhereUniqueWithoutUserInput | ParceiroUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ParceiroCreateManyUserInputEnvelope
    set?: ParceiroWhereUniqueInput | ParceiroWhereUniqueInput[]
    disconnect?: ParceiroWhereUniqueInput | ParceiroWhereUniqueInput[]
    delete?: ParceiroWhereUniqueInput | ParceiroWhereUniqueInput[]
    connect?: ParceiroWhereUniqueInput | ParceiroWhereUniqueInput[]
    update?: ParceiroUpdateWithWhereUniqueWithoutUserInput | ParceiroUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ParceiroUpdateManyWithWhereWithoutUserInput | ParceiroUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ParceiroScalarWhereInput | ParceiroScalarWhereInput[]
  }

  export type ClienteUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ClienteCreateWithoutUserInput, ClienteUncheckedCreateWithoutUserInput> | ClienteCreateWithoutUserInput[] | ClienteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ClienteCreateOrConnectWithoutUserInput | ClienteCreateOrConnectWithoutUserInput[]
    upsert?: ClienteUpsertWithWhereUniqueWithoutUserInput | ClienteUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ClienteCreateManyUserInputEnvelope
    set?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    disconnect?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    delete?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    connect?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    update?: ClienteUpdateWithWhereUniqueWithoutUserInput | ClienteUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ClienteUpdateManyWithWhereWithoutUserInput | ClienteUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ClienteScalarWhereInput | ClienteScalarWhereInput[]
  }

  export type BancoUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BancoCreateWithoutUserInput, BancoUncheckedCreateWithoutUserInput> | BancoCreateWithoutUserInput[] | BancoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BancoCreateOrConnectWithoutUserInput | BancoCreateOrConnectWithoutUserInput[]
    upsert?: BancoUpsertWithWhereUniqueWithoutUserInput | BancoUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BancoCreateManyUserInputEnvelope
    set?: BancoWhereUniqueInput | BancoWhereUniqueInput[]
    disconnect?: BancoWhereUniqueInput | BancoWhereUniqueInput[]
    delete?: BancoWhereUniqueInput | BancoWhereUniqueInput[]
    connect?: BancoWhereUniqueInput | BancoWhereUniqueInput[]
    update?: BancoUpdateWithWhereUniqueWithoutUserInput | BancoUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BancoUpdateManyWithWhereWithoutUserInput | BancoUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BancoScalarWhereInput | BancoScalarWhereInput[]
  }

  export type SeguradoraUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SeguradoraCreateWithoutUserInput, SeguradoraUncheckedCreateWithoutUserInput> | SeguradoraCreateWithoutUserInput[] | SeguradoraUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SeguradoraCreateOrConnectWithoutUserInput | SeguradoraCreateOrConnectWithoutUserInput[]
    upsert?: SeguradoraUpsertWithWhereUniqueWithoutUserInput | SeguradoraUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SeguradoraCreateManyUserInputEnvelope
    set?: SeguradoraWhereUniqueInput | SeguradoraWhereUniqueInput[]
    disconnect?: SeguradoraWhereUniqueInput | SeguradoraWhereUniqueInput[]
    delete?: SeguradoraWhereUniqueInput | SeguradoraWhereUniqueInput[]
    connect?: SeguradoraWhereUniqueInput | SeguradoraWhereUniqueInput[]
    update?: SeguradoraUpdateWithWhereUniqueWithoutUserInput | SeguradoraUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SeguradoraUpdateManyWithWhereWithoutUserInput | SeguradoraUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SeguradoraScalarWhereInput | SeguradoraScalarWhereInput[]
  }

  export type TipoDeVeiculoUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TipoDeVeiculoCreateWithoutUserInput, TipoDeVeiculoUncheckedCreateWithoutUserInput> | TipoDeVeiculoCreateWithoutUserInput[] | TipoDeVeiculoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TipoDeVeiculoCreateOrConnectWithoutUserInput | TipoDeVeiculoCreateOrConnectWithoutUserInput[]
    upsert?: TipoDeVeiculoUpsertWithWhereUniqueWithoutUserInput | TipoDeVeiculoUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TipoDeVeiculoCreateManyUserInputEnvelope
    set?: TipoDeVeiculoWhereUniqueInput | TipoDeVeiculoWhereUniqueInput[]
    disconnect?: TipoDeVeiculoWhereUniqueInput | TipoDeVeiculoWhereUniqueInput[]
    delete?: TipoDeVeiculoWhereUniqueInput | TipoDeVeiculoWhereUniqueInput[]
    connect?: TipoDeVeiculoWhereUniqueInput | TipoDeVeiculoWhereUniqueInput[]
    update?: TipoDeVeiculoUpdateWithWhereUniqueWithoutUserInput | TipoDeVeiculoUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TipoDeVeiculoUpdateManyWithWhereWithoutUserInput | TipoDeVeiculoUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TipoDeVeiculoScalarWhereInput | TipoDeVeiculoScalarWhereInput[]
  }

  export type DocumentoUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<DocumentoCreateWithoutUserInput, DocumentoUncheckedCreateWithoutUserInput> | DocumentoCreateWithoutUserInput[] | DocumentoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DocumentoCreateOrConnectWithoutUserInput | DocumentoCreateOrConnectWithoutUserInput[]
    upsert?: DocumentoUpsertWithWhereUniqueWithoutUserInput | DocumentoUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DocumentoCreateManyUserInputEnvelope
    set?: DocumentoWhereUniqueInput | DocumentoWhereUniqueInput[]
    disconnect?: DocumentoWhereUniqueInput | DocumentoWhereUniqueInput[]
    delete?: DocumentoWhereUniqueInput | DocumentoWhereUniqueInput[]
    connect?: DocumentoWhereUniqueInput | DocumentoWhereUniqueInput[]
    update?: DocumentoUpdateWithWhereUniqueWithoutUserInput | DocumentoUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DocumentoUpdateManyWithWhereWithoutUserInput | DocumentoUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DocumentoScalarWhereInput | DocumentoScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutVitimasInput = {
    create?: XOR<UserCreateWithoutVitimasInput, UserUncheckedCreateWithoutVitimasInput>
    connectOrCreate?: UserCreateOrConnectWithoutVitimasInput
    connect?: UserWhereUniqueInput
  }

  export type ProcessoCreateNestedManyWithoutVitimaInput = {
    create?: XOR<ProcessoCreateWithoutVitimaInput, ProcessoUncheckedCreateWithoutVitimaInput> | ProcessoCreateWithoutVitimaInput[] | ProcessoUncheckedCreateWithoutVitimaInput[]
    connectOrCreate?: ProcessoCreateOrConnectWithoutVitimaInput | ProcessoCreateOrConnectWithoutVitimaInput[]
    createMany?: ProcessoCreateManyVitimaInputEnvelope
    connect?: ProcessoWhereUniqueInput | ProcessoWhereUniqueInput[]
  }

  export type ProcessoUncheckedCreateNestedManyWithoutVitimaInput = {
    create?: XOR<ProcessoCreateWithoutVitimaInput, ProcessoUncheckedCreateWithoutVitimaInput> | ProcessoCreateWithoutVitimaInput[] | ProcessoUncheckedCreateWithoutVitimaInput[]
    connectOrCreate?: ProcessoCreateOrConnectWithoutVitimaInput | ProcessoCreateOrConnectWithoutVitimaInput[]
    createMany?: ProcessoCreateManyVitimaInputEnvelope
    connect?: ProcessoWhereUniqueInput | ProcessoWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutVitimasNestedInput = {
    create?: XOR<UserCreateWithoutVitimasInput, UserUncheckedCreateWithoutVitimasInput>
    connectOrCreate?: UserCreateOrConnectWithoutVitimasInput
    upsert?: UserUpsertWithoutVitimasInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutVitimasInput, UserUpdateWithoutVitimasInput>, UserUncheckedUpdateWithoutVitimasInput>
  }

  export type ProcessoUpdateManyWithoutVitimaNestedInput = {
    create?: XOR<ProcessoCreateWithoutVitimaInput, ProcessoUncheckedCreateWithoutVitimaInput> | ProcessoCreateWithoutVitimaInput[] | ProcessoUncheckedCreateWithoutVitimaInput[]
    connectOrCreate?: ProcessoCreateOrConnectWithoutVitimaInput | ProcessoCreateOrConnectWithoutVitimaInput[]
    upsert?: ProcessoUpsertWithWhereUniqueWithoutVitimaInput | ProcessoUpsertWithWhereUniqueWithoutVitimaInput[]
    createMany?: ProcessoCreateManyVitimaInputEnvelope
    set?: ProcessoWhereUniqueInput | ProcessoWhereUniqueInput[]
    disconnect?: ProcessoWhereUniqueInput | ProcessoWhereUniqueInput[]
    delete?: ProcessoWhereUniqueInput | ProcessoWhereUniqueInput[]
    connect?: ProcessoWhereUniqueInput | ProcessoWhereUniqueInput[]
    update?: ProcessoUpdateWithWhereUniqueWithoutVitimaInput | ProcessoUpdateWithWhereUniqueWithoutVitimaInput[]
    updateMany?: ProcessoUpdateManyWithWhereWithoutVitimaInput | ProcessoUpdateManyWithWhereWithoutVitimaInput[]
    deleteMany?: ProcessoScalarWhereInput | ProcessoScalarWhereInput[]
  }

  export type ProcessoUncheckedUpdateManyWithoutVitimaNestedInput = {
    create?: XOR<ProcessoCreateWithoutVitimaInput, ProcessoUncheckedCreateWithoutVitimaInput> | ProcessoCreateWithoutVitimaInput[] | ProcessoUncheckedCreateWithoutVitimaInput[]
    connectOrCreate?: ProcessoCreateOrConnectWithoutVitimaInput | ProcessoCreateOrConnectWithoutVitimaInput[]
    upsert?: ProcessoUpsertWithWhereUniqueWithoutVitimaInput | ProcessoUpsertWithWhereUniqueWithoutVitimaInput[]
    createMany?: ProcessoCreateManyVitimaInputEnvelope
    set?: ProcessoWhereUniqueInput | ProcessoWhereUniqueInput[]
    disconnect?: ProcessoWhereUniqueInput | ProcessoWhereUniqueInput[]
    delete?: ProcessoWhereUniqueInput | ProcessoWhereUniqueInput[]
    connect?: ProcessoWhereUniqueInput | ProcessoWhereUniqueInput[]
    update?: ProcessoUpdateWithWhereUniqueWithoutVitimaInput | ProcessoUpdateWithWhereUniqueWithoutVitimaInput[]
    updateMany?: ProcessoUpdateManyWithWhereWithoutVitimaInput | ProcessoUpdateManyWithWhereWithoutVitimaInput[]
    deleteMany?: ProcessoScalarWhereInput | ProcessoScalarWhereInput[]
  }

  export type TiposDeProcessoCreateNestedOneWithoutProcessoInput = {
    create?: XOR<TiposDeProcessoCreateWithoutProcessoInput, TiposDeProcessoUncheckedCreateWithoutProcessoInput>
    connectOrCreate?: TiposDeProcessoCreateOrConnectWithoutProcessoInput
    connect?: TiposDeProcessoWhereUniqueInput
  }

  export type FaseProcessoCreateNestedOneWithoutProcessoInput = {
    create?: XOR<FaseProcessoCreateWithoutProcessoInput, FaseProcessoUncheckedCreateWithoutProcessoInput>
    connectOrCreate?: FaseProcessoCreateOrConnectWithoutProcessoInput
    connect?: FaseProcessoWhereUniqueInput
  }

  export type VitimaCreateNestedOneWithoutProcessosInput = {
    create?: XOR<VitimaCreateWithoutProcessosInput, VitimaUncheckedCreateWithoutProcessosInput>
    connectOrCreate?: VitimaCreateOrConnectWithoutProcessosInput
    connect?: VitimaWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutProcessosInput = {
    create?: XOR<UserCreateWithoutProcessosInput, UserUncheckedCreateWithoutProcessosInput>
    connectOrCreate?: UserCreateOrConnectWithoutProcessosInput
    connect?: UserWhereUniqueInput
  }

  export type TiposDeProcessoUpdateOneRequiredWithoutProcessoNestedInput = {
    create?: XOR<TiposDeProcessoCreateWithoutProcessoInput, TiposDeProcessoUncheckedCreateWithoutProcessoInput>
    connectOrCreate?: TiposDeProcessoCreateOrConnectWithoutProcessoInput
    upsert?: TiposDeProcessoUpsertWithoutProcessoInput
    connect?: TiposDeProcessoWhereUniqueInput
    update?: XOR<XOR<TiposDeProcessoUpdateToOneWithWhereWithoutProcessoInput, TiposDeProcessoUpdateWithoutProcessoInput>, TiposDeProcessoUncheckedUpdateWithoutProcessoInput>
  }

  export type FaseProcessoUpdateOneRequiredWithoutProcessoNestedInput = {
    create?: XOR<FaseProcessoCreateWithoutProcessoInput, FaseProcessoUncheckedCreateWithoutProcessoInput>
    connectOrCreate?: FaseProcessoCreateOrConnectWithoutProcessoInput
    upsert?: FaseProcessoUpsertWithoutProcessoInput
    connect?: FaseProcessoWhereUniqueInput
    update?: XOR<XOR<FaseProcessoUpdateToOneWithWhereWithoutProcessoInput, FaseProcessoUpdateWithoutProcessoInput>, FaseProcessoUncheckedUpdateWithoutProcessoInput>
  }

  export type VitimaUpdateOneRequiredWithoutProcessosNestedInput = {
    create?: XOR<VitimaCreateWithoutProcessosInput, VitimaUncheckedCreateWithoutProcessosInput>
    connectOrCreate?: VitimaCreateOrConnectWithoutProcessosInput
    upsert?: VitimaUpsertWithoutProcessosInput
    connect?: VitimaWhereUniqueInput
    update?: XOR<XOR<VitimaUpdateToOneWithWhereWithoutProcessosInput, VitimaUpdateWithoutProcessosInput>, VitimaUncheckedUpdateWithoutProcessosInput>
  }

  export type UserUpdateOneRequiredWithoutProcessosNestedInput = {
    create?: XOR<UserCreateWithoutProcessosInput, UserUncheckedCreateWithoutProcessosInput>
    connectOrCreate?: UserCreateOrConnectWithoutProcessosInput
    upsert?: UserUpsertWithoutProcessosInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProcessosInput, UserUpdateWithoutProcessosInput>, UserUncheckedUpdateWithoutProcessosInput>
  }

  export type UserCreateNestedOneWithoutTiposDeProcessoInput = {
    create?: XOR<UserCreateWithoutTiposDeProcessoInput, UserUncheckedCreateWithoutTiposDeProcessoInput>
    connectOrCreate?: UserCreateOrConnectWithoutTiposDeProcessoInput
    connect?: UserWhereUniqueInput
  }

  export type ProcessoCreateNestedManyWithoutTipoProcessoInput = {
    create?: XOR<ProcessoCreateWithoutTipoProcessoInput, ProcessoUncheckedCreateWithoutTipoProcessoInput> | ProcessoCreateWithoutTipoProcessoInput[] | ProcessoUncheckedCreateWithoutTipoProcessoInput[]
    connectOrCreate?: ProcessoCreateOrConnectWithoutTipoProcessoInput | ProcessoCreateOrConnectWithoutTipoProcessoInput[]
    createMany?: ProcessoCreateManyTipoProcessoInputEnvelope
    connect?: ProcessoWhereUniqueInput | ProcessoWhereUniqueInput[]
  }

  export type ProcessoUncheckedCreateNestedManyWithoutTipoProcessoInput = {
    create?: XOR<ProcessoCreateWithoutTipoProcessoInput, ProcessoUncheckedCreateWithoutTipoProcessoInput> | ProcessoCreateWithoutTipoProcessoInput[] | ProcessoUncheckedCreateWithoutTipoProcessoInput[]
    connectOrCreate?: ProcessoCreateOrConnectWithoutTipoProcessoInput | ProcessoCreateOrConnectWithoutTipoProcessoInput[]
    createMany?: ProcessoCreateManyTipoProcessoInputEnvelope
    connect?: ProcessoWhereUniqueInput | ProcessoWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutTiposDeProcessoNestedInput = {
    create?: XOR<UserCreateWithoutTiposDeProcessoInput, UserUncheckedCreateWithoutTiposDeProcessoInput>
    connectOrCreate?: UserCreateOrConnectWithoutTiposDeProcessoInput
    upsert?: UserUpsertWithoutTiposDeProcessoInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTiposDeProcessoInput, UserUpdateWithoutTiposDeProcessoInput>, UserUncheckedUpdateWithoutTiposDeProcessoInput>
  }

  export type ProcessoUpdateManyWithoutTipoProcessoNestedInput = {
    create?: XOR<ProcessoCreateWithoutTipoProcessoInput, ProcessoUncheckedCreateWithoutTipoProcessoInput> | ProcessoCreateWithoutTipoProcessoInput[] | ProcessoUncheckedCreateWithoutTipoProcessoInput[]
    connectOrCreate?: ProcessoCreateOrConnectWithoutTipoProcessoInput | ProcessoCreateOrConnectWithoutTipoProcessoInput[]
    upsert?: ProcessoUpsertWithWhereUniqueWithoutTipoProcessoInput | ProcessoUpsertWithWhereUniqueWithoutTipoProcessoInput[]
    createMany?: ProcessoCreateManyTipoProcessoInputEnvelope
    set?: ProcessoWhereUniqueInput | ProcessoWhereUniqueInput[]
    disconnect?: ProcessoWhereUniqueInput | ProcessoWhereUniqueInput[]
    delete?: ProcessoWhereUniqueInput | ProcessoWhereUniqueInput[]
    connect?: ProcessoWhereUniqueInput | ProcessoWhereUniqueInput[]
    update?: ProcessoUpdateWithWhereUniqueWithoutTipoProcessoInput | ProcessoUpdateWithWhereUniqueWithoutTipoProcessoInput[]
    updateMany?: ProcessoUpdateManyWithWhereWithoutTipoProcessoInput | ProcessoUpdateManyWithWhereWithoutTipoProcessoInput[]
    deleteMany?: ProcessoScalarWhereInput | ProcessoScalarWhereInput[]
  }

  export type ProcessoUncheckedUpdateManyWithoutTipoProcessoNestedInput = {
    create?: XOR<ProcessoCreateWithoutTipoProcessoInput, ProcessoUncheckedCreateWithoutTipoProcessoInput> | ProcessoCreateWithoutTipoProcessoInput[] | ProcessoUncheckedCreateWithoutTipoProcessoInput[]
    connectOrCreate?: ProcessoCreateOrConnectWithoutTipoProcessoInput | ProcessoCreateOrConnectWithoutTipoProcessoInput[]
    upsert?: ProcessoUpsertWithWhereUniqueWithoutTipoProcessoInput | ProcessoUpsertWithWhereUniqueWithoutTipoProcessoInput[]
    createMany?: ProcessoCreateManyTipoProcessoInputEnvelope
    set?: ProcessoWhereUniqueInput | ProcessoWhereUniqueInput[]
    disconnect?: ProcessoWhereUniqueInput | ProcessoWhereUniqueInput[]
    delete?: ProcessoWhereUniqueInput | ProcessoWhereUniqueInput[]
    connect?: ProcessoWhereUniqueInput | ProcessoWhereUniqueInput[]
    update?: ProcessoUpdateWithWhereUniqueWithoutTipoProcessoInput | ProcessoUpdateWithWhereUniqueWithoutTipoProcessoInput[]
    updateMany?: ProcessoUpdateManyWithWhereWithoutTipoProcessoInput | ProcessoUpdateManyWithWhereWithoutTipoProcessoInput[]
    deleteMany?: ProcessoScalarWhereInput | ProcessoScalarWhereInput[]
  }

  export type ClienteCreateNestedOneWithoutDocumentoInput = {
    create?: XOR<ClienteCreateWithoutDocumentoInput, ClienteUncheckedCreateWithoutDocumentoInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutDocumentoInput
    connect?: ClienteWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutDocumentoInput = {
    create?: XOR<UserCreateWithoutDocumentoInput, UserUncheckedCreateWithoutDocumentoInput>
    connectOrCreate?: UserCreateOrConnectWithoutDocumentoInput
    connect?: UserWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type ClienteUpdateOneRequiredWithoutDocumentoNestedInput = {
    create?: XOR<ClienteCreateWithoutDocumentoInput, ClienteUncheckedCreateWithoutDocumentoInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutDocumentoInput
    upsert?: ClienteUpsertWithoutDocumentoInput
    connect?: ClienteWhereUniqueInput
    update?: XOR<XOR<ClienteUpdateToOneWithWhereWithoutDocumentoInput, ClienteUpdateWithoutDocumentoInput>, ClienteUncheckedUpdateWithoutDocumentoInput>
  }

  export type UserUpdateOneRequiredWithoutDocumentoNestedInput = {
    create?: XOR<UserCreateWithoutDocumentoInput, UserUncheckedCreateWithoutDocumentoInput>
    connectOrCreate?: UserCreateOrConnectWithoutDocumentoInput
    upsert?: UserUpsertWithoutDocumentoInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDocumentoInput, UserUpdateWithoutDocumentoInput>, UserUncheckedUpdateWithoutDocumentoInput>
  }

  export type UserCreateNestedOneWithoutFasesProcessoInput = {
    create?: XOR<UserCreateWithoutFasesProcessoInput, UserUncheckedCreateWithoutFasesProcessoInput>
    connectOrCreate?: UserCreateOrConnectWithoutFasesProcessoInput
    connect?: UserWhereUniqueInput
  }

  export type ProcessoCreateNestedManyWithoutFaseProcessoInput = {
    create?: XOR<ProcessoCreateWithoutFaseProcessoInput, ProcessoUncheckedCreateWithoutFaseProcessoInput> | ProcessoCreateWithoutFaseProcessoInput[] | ProcessoUncheckedCreateWithoutFaseProcessoInput[]
    connectOrCreate?: ProcessoCreateOrConnectWithoutFaseProcessoInput | ProcessoCreateOrConnectWithoutFaseProcessoInput[]
    createMany?: ProcessoCreateManyFaseProcessoInputEnvelope
    connect?: ProcessoWhereUniqueInput | ProcessoWhereUniqueInput[]
  }

  export type ProcessoUncheckedCreateNestedManyWithoutFaseProcessoInput = {
    create?: XOR<ProcessoCreateWithoutFaseProcessoInput, ProcessoUncheckedCreateWithoutFaseProcessoInput> | ProcessoCreateWithoutFaseProcessoInput[] | ProcessoUncheckedCreateWithoutFaseProcessoInput[]
    connectOrCreate?: ProcessoCreateOrConnectWithoutFaseProcessoInput | ProcessoCreateOrConnectWithoutFaseProcessoInput[]
    createMany?: ProcessoCreateManyFaseProcessoInputEnvelope
    connect?: ProcessoWhereUniqueInput | ProcessoWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutFasesProcessoNestedInput = {
    create?: XOR<UserCreateWithoutFasesProcessoInput, UserUncheckedCreateWithoutFasesProcessoInput>
    connectOrCreate?: UserCreateOrConnectWithoutFasesProcessoInput
    upsert?: UserUpsertWithoutFasesProcessoInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFasesProcessoInput, UserUpdateWithoutFasesProcessoInput>, UserUncheckedUpdateWithoutFasesProcessoInput>
  }

  export type ProcessoUpdateManyWithoutFaseProcessoNestedInput = {
    create?: XOR<ProcessoCreateWithoutFaseProcessoInput, ProcessoUncheckedCreateWithoutFaseProcessoInput> | ProcessoCreateWithoutFaseProcessoInput[] | ProcessoUncheckedCreateWithoutFaseProcessoInput[]
    connectOrCreate?: ProcessoCreateOrConnectWithoutFaseProcessoInput | ProcessoCreateOrConnectWithoutFaseProcessoInput[]
    upsert?: ProcessoUpsertWithWhereUniqueWithoutFaseProcessoInput | ProcessoUpsertWithWhereUniqueWithoutFaseProcessoInput[]
    createMany?: ProcessoCreateManyFaseProcessoInputEnvelope
    set?: ProcessoWhereUniqueInput | ProcessoWhereUniqueInput[]
    disconnect?: ProcessoWhereUniqueInput | ProcessoWhereUniqueInput[]
    delete?: ProcessoWhereUniqueInput | ProcessoWhereUniqueInput[]
    connect?: ProcessoWhereUniqueInput | ProcessoWhereUniqueInput[]
    update?: ProcessoUpdateWithWhereUniqueWithoutFaseProcessoInput | ProcessoUpdateWithWhereUniqueWithoutFaseProcessoInput[]
    updateMany?: ProcessoUpdateManyWithWhereWithoutFaseProcessoInput | ProcessoUpdateManyWithWhereWithoutFaseProcessoInput[]
    deleteMany?: ProcessoScalarWhereInput | ProcessoScalarWhereInput[]
  }

  export type ProcessoUncheckedUpdateManyWithoutFaseProcessoNestedInput = {
    create?: XOR<ProcessoCreateWithoutFaseProcessoInput, ProcessoUncheckedCreateWithoutFaseProcessoInput> | ProcessoCreateWithoutFaseProcessoInput[] | ProcessoUncheckedCreateWithoutFaseProcessoInput[]
    connectOrCreate?: ProcessoCreateOrConnectWithoutFaseProcessoInput | ProcessoCreateOrConnectWithoutFaseProcessoInput[]
    upsert?: ProcessoUpsertWithWhereUniqueWithoutFaseProcessoInput | ProcessoUpsertWithWhereUniqueWithoutFaseProcessoInput[]
    createMany?: ProcessoCreateManyFaseProcessoInputEnvelope
    set?: ProcessoWhereUniqueInput | ProcessoWhereUniqueInput[]
    disconnect?: ProcessoWhereUniqueInput | ProcessoWhereUniqueInput[]
    delete?: ProcessoWhereUniqueInput | ProcessoWhereUniqueInput[]
    connect?: ProcessoWhereUniqueInput | ProcessoWhereUniqueInput[]
    update?: ProcessoUpdateWithWhereUniqueWithoutFaseProcessoInput | ProcessoUpdateWithWhereUniqueWithoutFaseProcessoInput[]
    updateMany?: ProcessoUpdateManyWithWhereWithoutFaseProcessoInput | ProcessoUpdateManyWithWhereWithoutFaseProcessoInput[]
    deleteMany?: ProcessoScalarWhereInput | ProcessoScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutPrioridadesInput = {
    create?: XOR<UserCreateWithoutPrioridadesInput, UserUncheckedCreateWithoutPrioridadesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPrioridadesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPrioridadesNestedInput = {
    create?: XOR<UserCreateWithoutPrioridadesInput, UserUncheckedCreateWithoutPrioridadesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPrioridadesInput
    upsert?: UserUpsertWithoutPrioridadesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPrioridadesInput, UserUpdateWithoutPrioridadesInput>, UserUncheckedUpdateWithoutPrioridadesInput>
  }

  export type UserCreateNestedOneWithoutParceiroInput = {
    create?: XOR<UserCreateWithoutParceiroInput, UserUncheckedCreateWithoutParceiroInput>
    connectOrCreate?: UserCreateOrConnectWithoutParceiroInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutParceiroNestedInput = {
    create?: XOR<UserCreateWithoutParceiroInput, UserUncheckedCreateWithoutParceiroInput>
    connectOrCreate?: UserCreateOrConnectWithoutParceiroInput
    upsert?: UserUpsertWithoutParceiroInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutParceiroInput, UserUpdateWithoutParceiroInput>, UserUncheckedUpdateWithoutParceiroInput>
  }

  export type DocumentoCreateNestedManyWithoutClienteInput = {
    create?: XOR<DocumentoCreateWithoutClienteInput, DocumentoUncheckedCreateWithoutClienteInput> | DocumentoCreateWithoutClienteInput[] | DocumentoUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: DocumentoCreateOrConnectWithoutClienteInput | DocumentoCreateOrConnectWithoutClienteInput[]
    createMany?: DocumentoCreateManyClienteInputEnvelope
    connect?: DocumentoWhereUniqueInput | DocumentoWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutClienteInput = {
    create?: XOR<UserCreateWithoutClienteInput, UserUncheckedCreateWithoutClienteInput>
    connectOrCreate?: UserCreateOrConnectWithoutClienteInput
    connect?: UserWhereUniqueInput
  }

  export type DocumentoUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<DocumentoCreateWithoutClienteInput, DocumentoUncheckedCreateWithoutClienteInput> | DocumentoCreateWithoutClienteInput[] | DocumentoUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: DocumentoCreateOrConnectWithoutClienteInput | DocumentoCreateOrConnectWithoutClienteInput[]
    createMany?: DocumentoCreateManyClienteInputEnvelope
    connect?: DocumentoWhereUniqueInput | DocumentoWhereUniqueInput[]
  }

  export type DocumentoUpdateManyWithoutClienteNestedInput = {
    create?: XOR<DocumentoCreateWithoutClienteInput, DocumentoUncheckedCreateWithoutClienteInput> | DocumentoCreateWithoutClienteInput[] | DocumentoUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: DocumentoCreateOrConnectWithoutClienteInput | DocumentoCreateOrConnectWithoutClienteInput[]
    upsert?: DocumentoUpsertWithWhereUniqueWithoutClienteInput | DocumentoUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: DocumentoCreateManyClienteInputEnvelope
    set?: DocumentoWhereUniqueInput | DocumentoWhereUniqueInput[]
    disconnect?: DocumentoWhereUniqueInput | DocumentoWhereUniqueInput[]
    delete?: DocumentoWhereUniqueInput | DocumentoWhereUniqueInput[]
    connect?: DocumentoWhereUniqueInput | DocumentoWhereUniqueInput[]
    update?: DocumentoUpdateWithWhereUniqueWithoutClienteInput | DocumentoUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: DocumentoUpdateManyWithWhereWithoutClienteInput | DocumentoUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: DocumentoScalarWhereInput | DocumentoScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutClienteNestedInput = {
    create?: XOR<UserCreateWithoutClienteInput, UserUncheckedCreateWithoutClienteInput>
    connectOrCreate?: UserCreateOrConnectWithoutClienteInput
    upsert?: UserUpsertWithoutClienteInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutClienteInput, UserUpdateWithoutClienteInput>, UserUncheckedUpdateWithoutClienteInput>
  }

  export type DocumentoUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<DocumentoCreateWithoutClienteInput, DocumentoUncheckedCreateWithoutClienteInput> | DocumentoCreateWithoutClienteInput[] | DocumentoUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: DocumentoCreateOrConnectWithoutClienteInput | DocumentoCreateOrConnectWithoutClienteInput[]
    upsert?: DocumentoUpsertWithWhereUniqueWithoutClienteInput | DocumentoUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: DocumentoCreateManyClienteInputEnvelope
    set?: DocumentoWhereUniqueInput | DocumentoWhereUniqueInput[]
    disconnect?: DocumentoWhereUniqueInput | DocumentoWhereUniqueInput[]
    delete?: DocumentoWhereUniqueInput | DocumentoWhereUniqueInput[]
    connect?: DocumentoWhereUniqueInput | DocumentoWhereUniqueInput[]
    update?: DocumentoUpdateWithWhereUniqueWithoutClienteInput | DocumentoUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: DocumentoUpdateManyWithWhereWithoutClienteInput | DocumentoUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: DocumentoScalarWhereInput | DocumentoScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutBancoInput = {
    create?: XOR<UserCreateWithoutBancoInput, UserUncheckedCreateWithoutBancoInput>
    connectOrCreate?: UserCreateOrConnectWithoutBancoInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutBancoNestedInput = {
    create?: XOR<UserCreateWithoutBancoInput, UserUncheckedCreateWithoutBancoInput>
    connectOrCreate?: UserCreateOrConnectWithoutBancoInput
    upsert?: UserUpsertWithoutBancoInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBancoInput, UserUpdateWithoutBancoInput>, UserUncheckedUpdateWithoutBancoInput>
  }

  export type UserCreateNestedOneWithoutSeguradoraInput = {
    create?: XOR<UserCreateWithoutSeguradoraInput, UserUncheckedCreateWithoutSeguradoraInput>
    connectOrCreate?: UserCreateOrConnectWithoutSeguradoraInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSeguradoraNestedInput = {
    create?: XOR<UserCreateWithoutSeguradoraInput, UserUncheckedCreateWithoutSeguradoraInput>
    connectOrCreate?: UserCreateOrConnectWithoutSeguradoraInput
    upsert?: UserUpsertWithoutSeguradoraInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSeguradoraInput, UserUpdateWithoutSeguradoraInput>, UserUncheckedUpdateWithoutSeguradoraInput>
  }

  export type UserCreateNestedOneWithoutTipoDeVeiculoInput = {
    create?: XOR<UserCreateWithoutTipoDeVeiculoInput, UserUncheckedCreateWithoutTipoDeVeiculoInput>
    connectOrCreate?: UserCreateOrConnectWithoutTipoDeVeiculoInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutTipoDeVeiculoNestedInput = {
    create?: XOR<UserCreateWithoutTipoDeVeiculoInput, UserUncheckedCreateWithoutTipoDeVeiculoInput>
    connectOrCreate?: UserCreateOrConnectWithoutTipoDeVeiculoInput
    upsert?: UserUpsertWithoutTipoDeVeiculoInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTipoDeVeiculoInput, UserUpdateWithoutTipoDeVeiculoInput>, UserUncheckedUpdateWithoutTipoDeVeiculoInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type VitimaCreateWithoutUserInput = {
    nome: string
    cpf: number
    rg: number
    data_nascimento: Date | string
    data_emissao: Date | string
    orgao_expedidor: string
    activo: boolean
    profissao: string
    renda_mensal: number
    cep: number
    uf: string
    endereco: string
    numero: number
    sexo: string
    complemento: string
    bairro: string
    cidade: string
    email: string
    telefone01: number
    telefone02: number
    processos?: ProcessoCreateNestedManyWithoutVitimaInput
  }

  export type VitimaUncheckedCreateWithoutUserInput = {
    id?: number
    nome: string
    cpf: number
    rg: number
    data_nascimento: Date | string
    data_emissao: Date | string
    orgao_expedidor: string
    activo: boolean
    profissao: string
    renda_mensal: number
    cep: number
    uf: string
    endereco: string
    numero: number
    sexo: string
    complemento: string
    bairro: string
    cidade: string
    email: string
    telefone01: number
    telefone02: number
    processos?: ProcessoUncheckedCreateNestedManyWithoutVitimaInput
  }

  export type VitimaCreateOrConnectWithoutUserInput = {
    where: VitimaWhereUniqueInput
    create: XOR<VitimaCreateWithoutUserInput, VitimaUncheckedCreateWithoutUserInput>
  }

  export type VitimaCreateManyUserInputEnvelope = {
    data: VitimaCreateManyUserInput | VitimaCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ProcessoCreateWithoutUserInput = {
    numero: string
    status: string
    criado_em?: Date | string
    atualizado_em?: Date | string
    tipoProcesso: TiposDeProcessoCreateNestedOneWithoutProcessoInput
    faseProcesso: FaseProcessoCreateNestedOneWithoutProcessoInput
    vitima: VitimaCreateNestedOneWithoutProcessosInput
  }

  export type ProcessoUncheckedCreateWithoutUserInput = {
    id?: number
    numero: string
    tipoProcessoId: number
    faseProcessoId: number
    vitimaId: number
    status: string
    criado_em?: Date | string
    atualizado_em?: Date | string
  }

  export type ProcessoCreateOrConnectWithoutUserInput = {
    where: ProcessoWhereUniqueInput
    create: XOR<ProcessoCreateWithoutUserInput, ProcessoUncheckedCreateWithoutUserInput>
  }

  export type ProcessoCreateManyUserInputEnvelope = {
    data: ProcessoCreateManyUserInput | ProcessoCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FaseProcessoCreateWithoutUserInput = {
    nome: string
    cor_fundo: string
    cor_fonte: string
    pendencia: boolean
    muda_fase: boolean
    activo: boolean
    criado_em?: Date | string
    atualizado_em?: Date | string
    processo?: ProcessoCreateNestedManyWithoutFaseProcessoInput
  }

  export type FaseProcessoUncheckedCreateWithoutUserInput = {
    id?: number
    nome: string
    cor_fundo: string
    cor_fonte: string
    pendencia: boolean
    muda_fase: boolean
    activo: boolean
    criado_em?: Date | string
    atualizado_em?: Date | string
    processo?: ProcessoUncheckedCreateNestedManyWithoutFaseProcessoInput
  }

  export type FaseProcessoCreateOrConnectWithoutUserInput = {
    where: FaseProcessoWhereUniqueInput
    create: XOR<FaseProcessoCreateWithoutUserInput, FaseProcessoUncheckedCreateWithoutUserInput>
  }

  export type FaseProcessoCreateManyUserInputEnvelope = {
    data: FaseProcessoCreateManyUserInput | FaseProcessoCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TiposDeProcessoCreateWithoutUserInput = {
    nome: string
    activo: boolean
    processo?: ProcessoCreateNestedManyWithoutTipoProcessoInput
  }

  export type TiposDeProcessoUncheckedCreateWithoutUserInput = {
    id?: number
    nome: string
    activo: boolean
    processo?: ProcessoUncheckedCreateNestedManyWithoutTipoProcessoInput
  }

  export type TiposDeProcessoCreateOrConnectWithoutUserInput = {
    where: TiposDeProcessoWhereUniqueInput
    create: XOR<TiposDeProcessoCreateWithoutUserInput, TiposDeProcessoUncheckedCreateWithoutUserInput>
  }

  export type TiposDeProcessoCreateManyUserInputEnvelope = {
    data: TiposDeProcessoCreateManyUserInput | TiposDeProcessoCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PrioridadesCreateWithoutUserInput = {
    nome: string
    cor_fundo: string
    cor_fonte: string
    activo: boolean
  }

  export type PrioridadesUncheckedCreateWithoutUserInput = {
    id?: number
    nome: string
    cor_fundo: string
    cor_fonte: string
    activo: boolean
  }

  export type PrioridadesCreateOrConnectWithoutUserInput = {
    where: PrioridadesWhereUniqueInput
    create: XOR<PrioridadesCreateWithoutUserInput, PrioridadesUncheckedCreateWithoutUserInput>
  }

  export type PrioridadesCreateManyUserInputEnvelope = {
    data: PrioridadesCreateManyUserInput | PrioridadesCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ParceiroCreateWithoutUserInput = {
    nome: string
    uf: string
    cidade: string
  }

  export type ParceiroUncheckedCreateWithoutUserInput = {
    id?: number
    nome: string
    uf: string
    cidade: string
  }

  export type ParceiroCreateOrConnectWithoutUserInput = {
    where: ParceiroWhereUniqueInput
    create: XOR<ParceiroCreateWithoutUserInput, ParceiroUncheckedCreateWithoutUserInput>
  }

  export type ParceiroCreateManyUserInputEnvelope = {
    data: ParceiroCreateManyUserInput | ParceiroCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ClienteCreateWithoutUserInput = {
    nome: string
    cpf: string
    rg: string
    documento?: DocumentoCreateNestedManyWithoutClienteInput
  }

  export type ClienteUncheckedCreateWithoutUserInput = {
    id?: number
    nome: string
    cpf: string
    rg: string
    documento?: DocumentoUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteCreateOrConnectWithoutUserInput = {
    where: ClienteWhereUniqueInput
    create: XOR<ClienteCreateWithoutUserInput, ClienteUncheckedCreateWithoutUserInput>
  }

  export type ClienteCreateManyUserInputEnvelope = {
    data: ClienteCreateManyUserInput | ClienteCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BancoCreateWithoutUserInput = {
    nome: string
    agencia: string
    conta: string
  }

  export type BancoUncheckedCreateWithoutUserInput = {
    id?: number
    nome: string
    agencia: string
    conta: string
  }

  export type BancoCreateOrConnectWithoutUserInput = {
    where: BancoWhereUniqueInput
    create: XOR<BancoCreateWithoutUserInput, BancoUncheckedCreateWithoutUserInput>
  }

  export type BancoCreateManyUserInputEnvelope = {
    data: BancoCreateManyUserInput | BancoCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SeguradoraCreateWithoutUserInput = {
    nome: string
  }

  export type SeguradoraUncheckedCreateWithoutUserInput = {
    id?: number
    nome: string
  }

  export type SeguradoraCreateOrConnectWithoutUserInput = {
    where: SeguradoraWhereUniqueInput
    create: XOR<SeguradoraCreateWithoutUserInput, SeguradoraUncheckedCreateWithoutUserInput>
  }

  export type SeguradoraCreateManyUserInputEnvelope = {
    data: SeguradoraCreateManyUserInput | SeguradoraCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TipoDeVeiculoCreateWithoutUserInput = {
    nome: string
    placa: string
    marca: string
    modelo: string
  }

  export type TipoDeVeiculoUncheckedCreateWithoutUserInput = {
    id?: number
    nome: string
    placa: string
    marca: string
    modelo: string
  }

  export type TipoDeVeiculoCreateOrConnectWithoutUserInput = {
    where: TipoDeVeiculoWhereUniqueInput
    create: XOR<TipoDeVeiculoCreateWithoutUserInput, TipoDeVeiculoUncheckedCreateWithoutUserInput>
  }

  export type TipoDeVeiculoCreateManyUserInputEnvelope = {
    data: TipoDeVeiculoCreateManyUserInput | TipoDeVeiculoCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type DocumentoCreateWithoutUserInput = {
    tipo: string
    descricao?: string | null
    arquivoUrl: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    criadoEm?: Date | string
    cliente: ClienteCreateNestedOneWithoutDocumentoInput
  }

  export type DocumentoUncheckedCreateWithoutUserInput = {
    id?: number
    tipo: string
    descricao?: string | null
    arquivoUrl: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    clienteId: number
    criadoEm?: Date | string
  }

  export type DocumentoCreateOrConnectWithoutUserInput = {
    where: DocumentoWhereUniqueInput
    create: XOR<DocumentoCreateWithoutUserInput, DocumentoUncheckedCreateWithoutUserInput>
  }

  export type DocumentoCreateManyUserInputEnvelope = {
    data: DocumentoCreateManyUserInput | DocumentoCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type VitimaUpsertWithWhereUniqueWithoutUserInput = {
    where: VitimaWhereUniqueInput
    update: XOR<VitimaUpdateWithoutUserInput, VitimaUncheckedUpdateWithoutUserInput>
    create: XOR<VitimaCreateWithoutUserInput, VitimaUncheckedCreateWithoutUserInput>
  }

  export type VitimaUpdateWithWhereUniqueWithoutUserInput = {
    where: VitimaWhereUniqueInput
    data: XOR<VitimaUpdateWithoutUserInput, VitimaUncheckedUpdateWithoutUserInput>
  }

  export type VitimaUpdateManyWithWhereWithoutUserInput = {
    where: VitimaScalarWhereInput
    data: XOR<VitimaUpdateManyMutationInput, VitimaUncheckedUpdateManyWithoutUserInput>
  }

  export type VitimaScalarWhereInput = {
    AND?: VitimaScalarWhereInput | VitimaScalarWhereInput[]
    OR?: VitimaScalarWhereInput[]
    NOT?: VitimaScalarWhereInput | VitimaScalarWhereInput[]
    id?: IntFilter<"Vitima"> | number
    nome?: StringFilter<"Vitima"> | string
    cpf?: IntFilter<"Vitima"> | number
    rg?: IntFilter<"Vitima"> | number
    data_nascimento?: DateTimeFilter<"Vitima"> | Date | string
    data_emissao?: DateTimeFilter<"Vitima"> | Date | string
    orgao_expedidor?: StringFilter<"Vitima"> | string
    activo?: BoolFilter<"Vitima"> | boolean
    profissao?: StringFilter<"Vitima"> | string
    renda_mensal?: IntFilter<"Vitima"> | number
    cep?: IntFilter<"Vitima"> | number
    uf?: StringFilter<"Vitima"> | string
    endereco?: StringFilter<"Vitima"> | string
    numero?: IntFilter<"Vitima"> | number
    sexo?: StringFilter<"Vitima"> | string
    complemento?: StringFilter<"Vitima"> | string
    bairro?: StringFilter<"Vitima"> | string
    cidade?: StringFilter<"Vitima"> | string
    email?: StringFilter<"Vitima"> | string
    telefone01?: IntFilter<"Vitima"> | number
    telefone02?: IntFilter<"Vitima"> | number
    userId?: StringFilter<"Vitima"> | string
  }

  export type ProcessoUpsertWithWhereUniqueWithoutUserInput = {
    where: ProcessoWhereUniqueInput
    update: XOR<ProcessoUpdateWithoutUserInput, ProcessoUncheckedUpdateWithoutUserInput>
    create: XOR<ProcessoCreateWithoutUserInput, ProcessoUncheckedCreateWithoutUserInput>
  }

  export type ProcessoUpdateWithWhereUniqueWithoutUserInput = {
    where: ProcessoWhereUniqueInput
    data: XOR<ProcessoUpdateWithoutUserInput, ProcessoUncheckedUpdateWithoutUserInput>
  }

  export type ProcessoUpdateManyWithWhereWithoutUserInput = {
    where: ProcessoScalarWhereInput
    data: XOR<ProcessoUpdateManyMutationInput, ProcessoUncheckedUpdateManyWithoutUserInput>
  }

  export type ProcessoScalarWhereInput = {
    AND?: ProcessoScalarWhereInput | ProcessoScalarWhereInput[]
    OR?: ProcessoScalarWhereInput[]
    NOT?: ProcessoScalarWhereInput | ProcessoScalarWhereInput[]
    id?: IntFilter<"Processo"> | number
    numero?: StringFilter<"Processo"> | string
    tipoProcessoId?: IntFilter<"Processo"> | number
    faseProcessoId?: IntFilter<"Processo"> | number
    vitimaId?: IntFilter<"Processo"> | number
    userId?: StringFilter<"Processo"> | string
    status?: StringFilter<"Processo"> | string
    criado_em?: DateTimeFilter<"Processo"> | Date | string
    atualizado_em?: DateTimeFilter<"Processo"> | Date | string
  }

  export type FaseProcessoUpsertWithWhereUniqueWithoutUserInput = {
    where: FaseProcessoWhereUniqueInput
    update: XOR<FaseProcessoUpdateWithoutUserInput, FaseProcessoUncheckedUpdateWithoutUserInput>
    create: XOR<FaseProcessoCreateWithoutUserInput, FaseProcessoUncheckedCreateWithoutUserInput>
  }

  export type FaseProcessoUpdateWithWhereUniqueWithoutUserInput = {
    where: FaseProcessoWhereUniqueInput
    data: XOR<FaseProcessoUpdateWithoutUserInput, FaseProcessoUncheckedUpdateWithoutUserInput>
  }

  export type FaseProcessoUpdateManyWithWhereWithoutUserInput = {
    where: FaseProcessoScalarWhereInput
    data: XOR<FaseProcessoUpdateManyMutationInput, FaseProcessoUncheckedUpdateManyWithoutUserInput>
  }

  export type FaseProcessoScalarWhereInput = {
    AND?: FaseProcessoScalarWhereInput | FaseProcessoScalarWhereInput[]
    OR?: FaseProcessoScalarWhereInput[]
    NOT?: FaseProcessoScalarWhereInput | FaseProcessoScalarWhereInput[]
    id?: IntFilter<"FaseProcesso"> | number
    nome?: StringFilter<"FaseProcesso"> | string
    cor_fundo?: StringFilter<"FaseProcesso"> | string
    cor_fonte?: StringFilter<"FaseProcesso"> | string
    pendencia?: BoolFilter<"FaseProcesso"> | boolean
    muda_fase?: BoolFilter<"FaseProcesso"> | boolean
    activo?: BoolFilter<"FaseProcesso"> | boolean
    criado_em?: DateTimeFilter<"FaseProcesso"> | Date | string
    atualizado_em?: DateTimeFilter<"FaseProcesso"> | Date | string
    userId?: StringFilter<"FaseProcesso"> | string
  }

  export type TiposDeProcessoUpsertWithWhereUniqueWithoutUserInput = {
    where: TiposDeProcessoWhereUniqueInput
    update: XOR<TiposDeProcessoUpdateWithoutUserInput, TiposDeProcessoUncheckedUpdateWithoutUserInput>
    create: XOR<TiposDeProcessoCreateWithoutUserInput, TiposDeProcessoUncheckedCreateWithoutUserInput>
  }

  export type TiposDeProcessoUpdateWithWhereUniqueWithoutUserInput = {
    where: TiposDeProcessoWhereUniqueInput
    data: XOR<TiposDeProcessoUpdateWithoutUserInput, TiposDeProcessoUncheckedUpdateWithoutUserInput>
  }

  export type TiposDeProcessoUpdateManyWithWhereWithoutUserInput = {
    where: TiposDeProcessoScalarWhereInput
    data: XOR<TiposDeProcessoUpdateManyMutationInput, TiposDeProcessoUncheckedUpdateManyWithoutUserInput>
  }

  export type TiposDeProcessoScalarWhereInput = {
    AND?: TiposDeProcessoScalarWhereInput | TiposDeProcessoScalarWhereInput[]
    OR?: TiposDeProcessoScalarWhereInput[]
    NOT?: TiposDeProcessoScalarWhereInput | TiposDeProcessoScalarWhereInput[]
    id?: IntFilter<"TiposDeProcesso"> | number
    nome?: StringFilter<"TiposDeProcesso"> | string
    activo?: BoolFilter<"TiposDeProcesso"> | boolean
    userId?: StringFilter<"TiposDeProcesso"> | string
  }

  export type PrioridadesUpsertWithWhereUniqueWithoutUserInput = {
    where: PrioridadesWhereUniqueInput
    update: XOR<PrioridadesUpdateWithoutUserInput, PrioridadesUncheckedUpdateWithoutUserInput>
    create: XOR<PrioridadesCreateWithoutUserInput, PrioridadesUncheckedCreateWithoutUserInput>
  }

  export type PrioridadesUpdateWithWhereUniqueWithoutUserInput = {
    where: PrioridadesWhereUniqueInput
    data: XOR<PrioridadesUpdateWithoutUserInput, PrioridadesUncheckedUpdateWithoutUserInput>
  }

  export type PrioridadesUpdateManyWithWhereWithoutUserInput = {
    where: PrioridadesScalarWhereInput
    data: XOR<PrioridadesUpdateManyMutationInput, PrioridadesUncheckedUpdateManyWithoutUserInput>
  }

  export type PrioridadesScalarWhereInput = {
    AND?: PrioridadesScalarWhereInput | PrioridadesScalarWhereInput[]
    OR?: PrioridadesScalarWhereInput[]
    NOT?: PrioridadesScalarWhereInput | PrioridadesScalarWhereInput[]
    id?: IntFilter<"Prioridades"> | number
    nome?: StringFilter<"Prioridades"> | string
    cor_fundo?: StringFilter<"Prioridades"> | string
    cor_fonte?: StringFilter<"Prioridades"> | string
    activo?: BoolFilter<"Prioridades"> | boolean
    userId?: StringFilter<"Prioridades"> | string
  }

  export type ParceiroUpsertWithWhereUniqueWithoutUserInput = {
    where: ParceiroWhereUniqueInput
    update: XOR<ParceiroUpdateWithoutUserInput, ParceiroUncheckedUpdateWithoutUserInput>
    create: XOR<ParceiroCreateWithoutUserInput, ParceiroUncheckedCreateWithoutUserInput>
  }

  export type ParceiroUpdateWithWhereUniqueWithoutUserInput = {
    where: ParceiroWhereUniqueInput
    data: XOR<ParceiroUpdateWithoutUserInput, ParceiroUncheckedUpdateWithoutUserInput>
  }

  export type ParceiroUpdateManyWithWhereWithoutUserInput = {
    where: ParceiroScalarWhereInput
    data: XOR<ParceiroUpdateManyMutationInput, ParceiroUncheckedUpdateManyWithoutUserInput>
  }

  export type ParceiroScalarWhereInput = {
    AND?: ParceiroScalarWhereInput | ParceiroScalarWhereInput[]
    OR?: ParceiroScalarWhereInput[]
    NOT?: ParceiroScalarWhereInput | ParceiroScalarWhereInput[]
    id?: IntFilter<"Parceiro"> | number
    nome?: StringFilter<"Parceiro"> | string
    uf?: StringFilter<"Parceiro"> | string
    cidade?: StringFilter<"Parceiro"> | string
    userId?: StringFilter<"Parceiro"> | string
  }

  export type ClienteUpsertWithWhereUniqueWithoutUserInput = {
    where: ClienteWhereUniqueInput
    update: XOR<ClienteUpdateWithoutUserInput, ClienteUncheckedUpdateWithoutUserInput>
    create: XOR<ClienteCreateWithoutUserInput, ClienteUncheckedCreateWithoutUserInput>
  }

  export type ClienteUpdateWithWhereUniqueWithoutUserInput = {
    where: ClienteWhereUniqueInput
    data: XOR<ClienteUpdateWithoutUserInput, ClienteUncheckedUpdateWithoutUserInput>
  }

  export type ClienteUpdateManyWithWhereWithoutUserInput = {
    where: ClienteScalarWhereInput
    data: XOR<ClienteUpdateManyMutationInput, ClienteUncheckedUpdateManyWithoutUserInput>
  }

  export type ClienteScalarWhereInput = {
    AND?: ClienteScalarWhereInput | ClienteScalarWhereInput[]
    OR?: ClienteScalarWhereInput[]
    NOT?: ClienteScalarWhereInput | ClienteScalarWhereInput[]
    id?: IntFilter<"Cliente"> | number
    nome?: StringFilter<"Cliente"> | string
    cpf?: StringFilter<"Cliente"> | string
    rg?: StringFilter<"Cliente"> | string
    userId?: StringFilter<"Cliente"> | string
  }

  export type BancoUpsertWithWhereUniqueWithoutUserInput = {
    where: BancoWhereUniqueInput
    update: XOR<BancoUpdateWithoutUserInput, BancoUncheckedUpdateWithoutUserInput>
    create: XOR<BancoCreateWithoutUserInput, BancoUncheckedCreateWithoutUserInput>
  }

  export type BancoUpdateWithWhereUniqueWithoutUserInput = {
    where: BancoWhereUniqueInput
    data: XOR<BancoUpdateWithoutUserInput, BancoUncheckedUpdateWithoutUserInput>
  }

  export type BancoUpdateManyWithWhereWithoutUserInput = {
    where: BancoScalarWhereInput
    data: XOR<BancoUpdateManyMutationInput, BancoUncheckedUpdateManyWithoutUserInput>
  }

  export type BancoScalarWhereInput = {
    AND?: BancoScalarWhereInput | BancoScalarWhereInput[]
    OR?: BancoScalarWhereInput[]
    NOT?: BancoScalarWhereInput | BancoScalarWhereInput[]
    id?: IntFilter<"Banco"> | number
    nome?: StringFilter<"Banco"> | string
    agencia?: StringFilter<"Banco"> | string
    conta?: StringFilter<"Banco"> | string
    userId?: StringFilter<"Banco"> | string
  }

  export type SeguradoraUpsertWithWhereUniqueWithoutUserInput = {
    where: SeguradoraWhereUniqueInput
    update: XOR<SeguradoraUpdateWithoutUserInput, SeguradoraUncheckedUpdateWithoutUserInput>
    create: XOR<SeguradoraCreateWithoutUserInput, SeguradoraUncheckedCreateWithoutUserInput>
  }

  export type SeguradoraUpdateWithWhereUniqueWithoutUserInput = {
    where: SeguradoraWhereUniqueInput
    data: XOR<SeguradoraUpdateWithoutUserInput, SeguradoraUncheckedUpdateWithoutUserInput>
  }

  export type SeguradoraUpdateManyWithWhereWithoutUserInput = {
    where: SeguradoraScalarWhereInput
    data: XOR<SeguradoraUpdateManyMutationInput, SeguradoraUncheckedUpdateManyWithoutUserInput>
  }

  export type SeguradoraScalarWhereInput = {
    AND?: SeguradoraScalarWhereInput | SeguradoraScalarWhereInput[]
    OR?: SeguradoraScalarWhereInput[]
    NOT?: SeguradoraScalarWhereInput | SeguradoraScalarWhereInput[]
    id?: IntFilter<"Seguradora"> | number
    nome?: StringFilter<"Seguradora"> | string
    userId?: StringFilter<"Seguradora"> | string
  }

  export type TipoDeVeiculoUpsertWithWhereUniqueWithoutUserInput = {
    where: TipoDeVeiculoWhereUniqueInput
    update: XOR<TipoDeVeiculoUpdateWithoutUserInput, TipoDeVeiculoUncheckedUpdateWithoutUserInput>
    create: XOR<TipoDeVeiculoCreateWithoutUserInput, TipoDeVeiculoUncheckedCreateWithoutUserInput>
  }

  export type TipoDeVeiculoUpdateWithWhereUniqueWithoutUserInput = {
    where: TipoDeVeiculoWhereUniqueInput
    data: XOR<TipoDeVeiculoUpdateWithoutUserInput, TipoDeVeiculoUncheckedUpdateWithoutUserInput>
  }

  export type TipoDeVeiculoUpdateManyWithWhereWithoutUserInput = {
    where: TipoDeVeiculoScalarWhereInput
    data: XOR<TipoDeVeiculoUpdateManyMutationInput, TipoDeVeiculoUncheckedUpdateManyWithoutUserInput>
  }

  export type TipoDeVeiculoScalarWhereInput = {
    AND?: TipoDeVeiculoScalarWhereInput | TipoDeVeiculoScalarWhereInput[]
    OR?: TipoDeVeiculoScalarWhereInput[]
    NOT?: TipoDeVeiculoScalarWhereInput | TipoDeVeiculoScalarWhereInput[]
    id?: IntFilter<"TipoDeVeiculo"> | number
    nome?: StringFilter<"TipoDeVeiculo"> | string
    placa?: StringFilter<"TipoDeVeiculo"> | string
    marca?: StringFilter<"TipoDeVeiculo"> | string
    modelo?: StringFilter<"TipoDeVeiculo"> | string
    userId?: StringFilter<"TipoDeVeiculo"> | string
  }

  export type DocumentoUpsertWithWhereUniqueWithoutUserInput = {
    where: DocumentoWhereUniqueInput
    update: XOR<DocumentoUpdateWithoutUserInput, DocumentoUncheckedUpdateWithoutUserInput>
    create: XOR<DocumentoCreateWithoutUserInput, DocumentoUncheckedCreateWithoutUserInput>
  }

  export type DocumentoUpdateWithWhereUniqueWithoutUserInput = {
    where: DocumentoWhereUniqueInput
    data: XOR<DocumentoUpdateWithoutUserInput, DocumentoUncheckedUpdateWithoutUserInput>
  }

  export type DocumentoUpdateManyWithWhereWithoutUserInput = {
    where: DocumentoScalarWhereInput
    data: XOR<DocumentoUpdateManyMutationInput, DocumentoUncheckedUpdateManyWithoutUserInput>
  }

  export type DocumentoScalarWhereInput = {
    AND?: DocumentoScalarWhereInput | DocumentoScalarWhereInput[]
    OR?: DocumentoScalarWhereInput[]
    NOT?: DocumentoScalarWhereInput | DocumentoScalarWhereInput[]
    id?: IntFilter<"Documento"> | number
    tipo?: StringFilter<"Documento"> | string
    descricao?: StringNullableFilter<"Documento"> | string | null
    arquivoUrl?: StringFilter<"Documento"> | string
    metadata?: JsonNullableFilter<"Documento">
    clienteId?: IntFilter<"Documento"> | number
    userId?: StringFilter<"Documento"> | string
    criadoEm?: DateTimeFilter<"Documento"> | Date | string
  }

  export type UserCreateWithoutVitimasInput = {
    id?: string
    username: string
    email: string
    password: string
    processos?: ProcessoCreateNestedManyWithoutUserInput
    fasesProcesso?: FaseProcessoCreateNestedManyWithoutUserInput
    tiposDeProcesso?: TiposDeProcessoCreateNestedManyWithoutUserInput
    prioridades?: PrioridadesCreateNestedManyWithoutUserInput
    parceiro?: ParceiroCreateNestedManyWithoutUserInput
    cliente?: ClienteCreateNestedManyWithoutUserInput
    banco?: BancoCreateNestedManyWithoutUserInput
    seguradora?: SeguradoraCreateNestedManyWithoutUserInput
    tipoDeVeiculo?: TipoDeVeiculoCreateNestedManyWithoutUserInput
    documento?: DocumentoCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutVitimasInput = {
    id?: string
    username: string
    email: string
    password: string
    processos?: ProcessoUncheckedCreateNestedManyWithoutUserInput
    fasesProcesso?: FaseProcessoUncheckedCreateNestedManyWithoutUserInput
    tiposDeProcesso?: TiposDeProcessoUncheckedCreateNestedManyWithoutUserInput
    prioridades?: PrioridadesUncheckedCreateNestedManyWithoutUserInput
    parceiro?: ParceiroUncheckedCreateNestedManyWithoutUserInput
    cliente?: ClienteUncheckedCreateNestedManyWithoutUserInput
    banco?: BancoUncheckedCreateNestedManyWithoutUserInput
    seguradora?: SeguradoraUncheckedCreateNestedManyWithoutUserInput
    tipoDeVeiculo?: TipoDeVeiculoUncheckedCreateNestedManyWithoutUserInput
    documento?: DocumentoUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutVitimasInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutVitimasInput, UserUncheckedCreateWithoutVitimasInput>
  }

  export type ProcessoCreateWithoutVitimaInput = {
    numero: string
    status: string
    criado_em?: Date | string
    atualizado_em?: Date | string
    tipoProcesso: TiposDeProcessoCreateNestedOneWithoutProcessoInput
    faseProcesso: FaseProcessoCreateNestedOneWithoutProcessoInput
    user: UserCreateNestedOneWithoutProcessosInput
  }

  export type ProcessoUncheckedCreateWithoutVitimaInput = {
    id?: number
    numero: string
    tipoProcessoId: number
    faseProcessoId: number
    userId: string
    status: string
    criado_em?: Date | string
    atualizado_em?: Date | string
  }

  export type ProcessoCreateOrConnectWithoutVitimaInput = {
    where: ProcessoWhereUniqueInput
    create: XOR<ProcessoCreateWithoutVitimaInput, ProcessoUncheckedCreateWithoutVitimaInput>
  }

  export type ProcessoCreateManyVitimaInputEnvelope = {
    data: ProcessoCreateManyVitimaInput | ProcessoCreateManyVitimaInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutVitimasInput = {
    update: XOR<UserUpdateWithoutVitimasInput, UserUncheckedUpdateWithoutVitimasInput>
    create: XOR<UserCreateWithoutVitimasInput, UserUncheckedCreateWithoutVitimasInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutVitimasInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutVitimasInput, UserUncheckedUpdateWithoutVitimasInput>
  }

  export type UserUpdateWithoutVitimasInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    processos?: ProcessoUpdateManyWithoutUserNestedInput
    fasesProcesso?: FaseProcessoUpdateManyWithoutUserNestedInput
    tiposDeProcesso?: TiposDeProcessoUpdateManyWithoutUserNestedInput
    prioridades?: PrioridadesUpdateManyWithoutUserNestedInput
    parceiro?: ParceiroUpdateManyWithoutUserNestedInput
    cliente?: ClienteUpdateManyWithoutUserNestedInput
    banco?: BancoUpdateManyWithoutUserNestedInput
    seguradora?: SeguradoraUpdateManyWithoutUserNestedInput
    tipoDeVeiculo?: TipoDeVeiculoUpdateManyWithoutUserNestedInput
    documento?: DocumentoUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutVitimasInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    processos?: ProcessoUncheckedUpdateManyWithoutUserNestedInput
    fasesProcesso?: FaseProcessoUncheckedUpdateManyWithoutUserNestedInput
    tiposDeProcesso?: TiposDeProcessoUncheckedUpdateManyWithoutUserNestedInput
    prioridades?: PrioridadesUncheckedUpdateManyWithoutUserNestedInput
    parceiro?: ParceiroUncheckedUpdateManyWithoutUserNestedInput
    cliente?: ClienteUncheckedUpdateManyWithoutUserNestedInput
    banco?: BancoUncheckedUpdateManyWithoutUserNestedInput
    seguradora?: SeguradoraUncheckedUpdateManyWithoutUserNestedInput
    tipoDeVeiculo?: TipoDeVeiculoUncheckedUpdateManyWithoutUserNestedInput
    documento?: DocumentoUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProcessoUpsertWithWhereUniqueWithoutVitimaInput = {
    where: ProcessoWhereUniqueInput
    update: XOR<ProcessoUpdateWithoutVitimaInput, ProcessoUncheckedUpdateWithoutVitimaInput>
    create: XOR<ProcessoCreateWithoutVitimaInput, ProcessoUncheckedCreateWithoutVitimaInput>
  }

  export type ProcessoUpdateWithWhereUniqueWithoutVitimaInput = {
    where: ProcessoWhereUniqueInput
    data: XOR<ProcessoUpdateWithoutVitimaInput, ProcessoUncheckedUpdateWithoutVitimaInput>
  }

  export type ProcessoUpdateManyWithWhereWithoutVitimaInput = {
    where: ProcessoScalarWhereInput
    data: XOR<ProcessoUpdateManyMutationInput, ProcessoUncheckedUpdateManyWithoutVitimaInput>
  }

  export type TiposDeProcessoCreateWithoutProcessoInput = {
    nome: string
    activo: boolean
    user: UserCreateNestedOneWithoutTiposDeProcessoInput
  }

  export type TiposDeProcessoUncheckedCreateWithoutProcessoInput = {
    id?: number
    nome: string
    activo: boolean
    userId: string
  }

  export type TiposDeProcessoCreateOrConnectWithoutProcessoInput = {
    where: TiposDeProcessoWhereUniqueInput
    create: XOR<TiposDeProcessoCreateWithoutProcessoInput, TiposDeProcessoUncheckedCreateWithoutProcessoInput>
  }

  export type FaseProcessoCreateWithoutProcessoInput = {
    nome: string
    cor_fundo: string
    cor_fonte: string
    pendencia: boolean
    muda_fase: boolean
    activo: boolean
    criado_em?: Date | string
    atualizado_em?: Date | string
    user: UserCreateNestedOneWithoutFasesProcessoInput
  }

  export type FaseProcessoUncheckedCreateWithoutProcessoInput = {
    id?: number
    nome: string
    cor_fundo: string
    cor_fonte: string
    pendencia: boolean
    muda_fase: boolean
    activo: boolean
    criado_em?: Date | string
    atualizado_em?: Date | string
    userId: string
  }

  export type FaseProcessoCreateOrConnectWithoutProcessoInput = {
    where: FaseProcessoWhereUniqueInput
    create: XOR<FaseProcessoCreateWithoutProcessoInput, FaseProcessoUncheckedCreateWithoutProcessoInput>
  }

  export type VitimaCreateWithoutProcessosInput = {
    nome: string
    cpf: number
    rg: number
    data_nascimento: Date | string
    data_emissao: Date | string
    orgao_expedidor: string
    activo: boolean
    profissao: string
    renda_mensal: number
    cep: number
    uf: string
    endereco: string
    numero: number
    sexo: string
    complemento: string
    bairro: string
    cidade: string
    email: string
    telefone01: number
    telefone02: number
    user: UserCreateNestedOneWithoutVitimasInput
  }

  export type VitimaUncheckedCreateWithoutProcessosInput = {
    id?: number
    nome: string
    cpf: number
    rg: number
    data_nascimento: Date | string
    data_emissao: Date | string
    orgao_expedidor: string
    activo: boolean
    profissao: string
    renda_mensal: number
    cep: number
    uf: string
    endereco: string
    numero: number
    sexo: string
    complemento: string
    bairro: string
    cidade: string
    email: string
    telefone01: number
    telefone02: number
    userId: string
  }

  export type VitimaCreateOrConnectWithoutProcessosInput = {
    where: VitimaWhereUniqueInput
    create: XOR<VitimaCreateWithoutProcessosInput, VitimaUncheckedCreateWithoutProcessosInput>
  }

  export type UserCreateWithoutProcessosInput = {
    id?: string
    username: string
    email: string
    password: string
    vitimas?: VitimaCreateNestedManyWithoutUserInput
    fasesProcesso?: FaseProcessoCreateNestedManyWithoutUserInput
    tiposDeProcesso?: TiposDeProcessoCreateNestedManyWithoutUserInput
    prioridades?: PrioridadesCreateNestedManyWithoutUserInput
    parceiro?: ParceiroCreateNestedManyWithoutUserInput
    cliente?: ClienteCreateNestedManyWithoutUserInput
    banco?: BancoCreateNestedManyWithoutUserInput
    seguradora?: SeguradoraCreateNestedManyWithoutUserInput
    tipoDeVeiculo?: TipoDeVeiculoCreateNestedManyWithoutUserInput
    documento?: DocumentoCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProcessosInput = {
    id?: string
    username: string
    email: string
    password: string
    vitimas?: VitimaUncheckedCreateNestedManyWithoutUserInput
    fasesProcesso?: FaseProcessoUncheckedCreateNestedManyWithoutUserInput
    tiposDeProcesso?: TiposDeProcessoUncheckedCreateNestedManyWithoutUserInput
    prioridades?: PrioridadesUncheckedCreateNestedManyWithoutUserInput
    parceiro?: ParceiroUncheckedCreateNestedManyWithoutUserInput
    cliente?: ClienteUncheckedCreateNestedManyWithoutUserInput
    banco?: BancoUncheckedCreateNestedManyWithoutUserInput
    seguradora?: SeguradoraUncheckedCreateNestedManyWithoutUserInput
    tipoDeVeiculo?: TipoDeVeiculoUncheckedCreateNestedManyWithoutUserInput
    documento?: DocumentoUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProcessosInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProcessosInput, UserUncheckedCreateWithoutProcessosInput>
  }

  export type TiposDeProcessoUpsertWithoutProcessoInput = {
    update: XOR<TiposDeProcessoUpdateWithoutProcessoInput, TiposDeProcessoUncheckedUpdateWithoutProcessoInput>
    create: XOR<TiposDeProcessoCreateWithoutProcessoInput, TiposDeProcessoUncheckedCreateWithoutProcessoInput>
    where?: TiposDeProcessoWhereInput
  }

  export type TiposDeProcessoUpdateToOneWithWhereWithoutProcessoInput = {
    where?: TiposDeProcessoWhereInput
    data: XOR<TiposDeProcessoUpdateWithoutProcessoInput, TiposDeProcessoUncheckedUpdateWithoutProcessoInput>
  }

  export type TiposDeProcessoUpdateWithoutProcessoInput = {
    nome?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutTiposDeProcessoNestedInput
  }

  export type TiposDeProcessoUncheckedUpdateWithoutProcessoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type FaseProcessoUpsertWithoutProcessoInput = {
    update: XOR<FaseProcessoUpdateWithoutProcessoInput, FaseProcessoUncheckedUpdateWithoutProcessoInput>
    create: XOR<FaseProcessoCreateWithoutProcessoInput, FaseProcessoUncheckedCreateWithoutProcessoInput>
    where?: FaseProcessoWhereInput
  }

  export type FaseProcessoUpdateToOneWithWhereWithoutProcessoInput = {
    where?: FaseProcessoWhereInput
    data: XOR<FaseProcessoUpdateWithoutProcessoInput, FaseProcessoUncheckedUpdateWithoutProcessoInput>
  }

  export type FaseProcessoUpdateWithoutProcessoInput = {
    nome?: StringFieldUpdateOperationsInput | string
    cor_fundo?: StringFieldUpdateOperationsInput | string
    cor_fonte?: StringFieldUpdateOperationsInput | string
    pendencia?: BoolFieldUpdateOperationsInput | boolean
    muda_fase?: BoolFieldUpdateOperationsInput | boolean
    activo?: BoolFieldUpdateOperationsInput | boolean
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFasesProcessoNestedInput
  }

  export type FaseProcessoUncheckedUpdateWithoutProcessoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    cor_fundo?: StringFieldUpdateOperationsInput | string
    cor_fonte?: StringFieldUpdateOperationsInput | string
    pendencia?: BoolFieldUpdateOperationsInput | boolean
    muda_fase?: BoolFieldUpdateOperationsInput | boolean
    activo?: BoolFieldUpdateOperationsInput | boolean
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type VitimaUpsertWithoutProcessosInput = {
    update: XOR<VitimaUpdateWithoutProcessosInput, VitimaUncheckedUpdateWithoutProcessosInput>
    create: XOR<VitimaCreateWithoutProcessosInput, VitimaUncheckedCreateWithoutProcessosInput>
    where?: VitimaWhereInput
  }

  export type VitimaUpdateToOneWithWhereWithoutProcessosInput = {
    where?: VitimaWhereInput
    data: XOR<VitimaUpdateWithoutProcessosInput, VitimaUncheckedUpdateWithoutProcessosInput>
  }

  export type VitimaUpdateWithoutProcessosInput = {
    nome?: StringFieldUpdateOperationsInput | string
    cpf?: IntFieldUpdateOperationsInput | number
    rg?: IntFieldUpdateOperationsInput | number
    data_nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    data_emissao?: DateTimeFieldUpdateOperationsInput | Date | string
    orgao_expedidor?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    profissao?: StringFieldUpdateOperationsInput | string
    renda_mensal?: IntFieldUpdateOperationsInput | number
    cep?: IntFieldUpdateOperationsInput | number
    uf?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    sexo?: StringFieldUpdateOperationsInput | string
    complemento?: StringFieldUpdateOperationsInput | string
    bairro?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone01?: IntFieldUpdateOperationsInput | number
    telefone02?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutVitimasNestedInput
  }

  export type VitimaUncheckedUpdateWithoutProcessosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    cpf?: IntFieldUpdateOperationsInput | number
    rg?: IntFieldUpdateOperationsInput | number
    data_nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    data_emissao?: DateTimeFieldUpdateOperationsInput | Date | string
    orgao_expedidor?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    profissao?: StringFieldUpdateOperationsInput | string
    renda_mensal?: IntFieldUpdateOperationsInput | number
    cep?: IntFieldUpdateOperationsInput | number
    uf?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    sexo?: StringFieldUpdateOperationsInput | string
    complemento?: StringFieldUpdateOperationsInput | string
    bairro?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone01?: IntFieldUpdateOperationsInput | number
    telefone02?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpsertWithoutProcessosInput = {
    update: XOR<UserUpdateWithoutProcessosInput, UserUncheckedUpdateWithoutProcessosInput>
    create: XOR<UserCreateWithoutProcessosInput, UserUncheckedCreateWithoutProcessosInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProcessosInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProcessosInput, UserUncheckedUpdateWithoutProcessosInput>
  }

  export type UserUpdateWithoutProcessosInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    vitimas?: VitimaUpdateManyWithoutUserNestedInput
    fasesProcesso?: FaseProcessoUpdateManyWithoutUserNestedInput
    tiposDeProcesso?: TiposDeProcessoUpdateManyWithoutUserNestedInput
    prioridades?: PrioridadesUpdateManyWithoutUserNestedInput
    parceiro?: ParceiroUpdateManyWithoutUserNestedInput
    cliente?: ClienteUpdateManyWithoutUserNestedInput
    banco?: BancoUpdateManyWithoutUserNestedInput
    seguradora?: SeguradoraUpdateManyWithoutUserNestedInput
    tipoDeVeiculo?: TipoDeVeiculoUpdateManyWithoutUserNestedInput
    documento?: DocumentoUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProcessosInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    vitimas?: VitimaUncheckedUpdateManyWithoutUserNestedInput
    fasesProcesso?: FaseProcessoUncheckedUpdateManyWithoutUserNestedInput
    tiposDeProcesso?: TiposDeProcessoUncheckedUpdateManyWithoutUserNestedInput
    prioridades?: PrioridadesUncheckedUpdateManyWithoutUserNestedInput
    parceiro?: ParceiroUncheckedUpdateManyWithoutUserNestedInput
    cliente?: ClienteUncheckedUpdateManyWithoutUserNestedInput
    banco?: BancoUncheckedUpdateManyWithoutUserNestedInput
    seguradora?: SeguradoraUncheckedUpdateManyWithoutUserNestedInput
    tipoDeVeiculo?: TipoDeVeiculoUncheckedUpdateManyWithoutUserNestedInput
    documento?: DocumentoUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutTiposDeProcessoInput = {
    id?: string
    username: string
    email: string
    password: string
    vitimas?: VitimaCreateNestedManyWithoutUserInput
    processos?: ProcessoCreateNestedManyWithoutUserInput
    fasesProcesso?: FaseProcessoCreateNestedManyWithoutUserInput
    prioridades?: PrioridadesCreateNestedManyWithoutUserInput
    parceiro?: ParceiroCreateNestedManyWithoutUserInput
    cliente?: ClienteCreateNestedManyWithoutUserInput
    banco?: BancoCreateNestedManyWithoutUserInput
    seguradora?: SeguradoraCreateNestedManyWithoutUserInput
    tipoDeVeiculo?: TipoDeVeiculoCreateNestedManyWithoutUserInput
    documento?: DocumentoCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTiposDeProcessoInput = {
    id?: string
    username: string
    email: string
    password: string
    vitimas?: VitimaUncheckedCreateNestedManyWithoutUserInput
    processos?: ProcessoUncheckedCreateNestedManyWithoutUserInput
    fasesProcesso?: FaseProcessoUncheckedCreateNestedManyWithoutUserInput
    prioridades?: PrioridadesUncheckedCreateNestedManyWithoutUserInput
    parceiro?: ParceiroUncheckedCreateNestedManyWithoutUserInput
    cliente?: ClienteUncheckedCreateNestedManyWithoutUserInput
    banco?: BancoUncheckedCreateNestedManyWithoutUserInput
    seguradora?: SeguradoraUncheckedCreateNestedManyWithoutUserInput
    tipoDeVeiculo?: TipoDeVeiculoUncheckedCreateNestedManyWithoutUserInput
    documento?: DocumentoUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTiposDeProcessoInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTiposDeProcessoInput, UserUncheckedCreateWithoutTiposDeProcessoInput>
  }

  export type ProcessoCreateWithoutTipoProcessoInput = {
    numero: string
    status: string
    criado_em?: Date | string
    atualizado_em?: Date | string
    faseProcesso: FaseProcessoCreateNestedOneWithoutProcessoInput
    vitima: VitimaCreateNestedOneWithoutProcessosInput
    user: UserCreateNestedOneWithoutProcessosInput
  }

  export type ProcessoUncheckedCreateWithoutTipoProcessoInput = {
    id?: number
    numero: string
    faseProcessoId: number
    vitimaId: number
    userId: string
    status: string
    criado_em?: Date | string
    atualizado_em?: Date | string
  }

  export type ProcessoCreateOrConnectWithoutTipoProcessoInput = {
    where: ProcessoWhereUniqueInput
    create: XOR<ProcessoCreateWithoutTipoProcessoInput, ProcessoUncheckedCreateWithoutTipoProcessoInput>
  }

  export type ProcessoCreateManyTipoProcessoInputEnvelope = {
    data: ProcessoCreateManyTipoProcessoInput | ProcessoCreateManyTipoProcessoInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutTiposDeProcessoInput = {
    update: XOR<UserUpdateWithoutTiposDeProcessoInput, UserUncheckedUpdateWithoutTiposDeProcessoInput>
    create: XOR<UserCreateWithoutTiposDeProcessoInput, UserUncheckedCreateWithoutTiposDeProcessoInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTiposDeProcessoInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTiposDeProcessoInput, UserUncheckedUpdateWithoutTiposDeProcessoInput>
  }

  export type UserUpdateWithoutTiposDeProcessoInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    vitimas?: VitimaUpdateManyWithoutUserNestedInput
    processos?: ProcessoUpdateManyWithoutUserNestedInput
    fasesProcesso?: FaseProcessoUpdateManyWithoutUserNestedInput
    prioridades?: PrioridadesUpdateManyWithoutUserNestedInput
    parceiro?: ParceiroUpdateManyWithoutUserNestedInput
    cliente?: ClienteUpdateManyWithoutUserNestedInput
    banco?: BancoUpdateManyWithoutUserNestedInput
    seguradora?: SeguradoraUpdateManyWithoutUserNestedInput
    tipoDeVeiculo?: TipoDeVeiculoUpdateManyWithoutUserNestedInput
    documento?: DocumentoUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTiposDeProcessoInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    vitimas?: VitimaUncheckedUpdateManyWithoutUserNestedInput
    processos?: ProcessoUncheckedUpdateManyWithoutUserNestedInput
    fasesProcesso?: FaseProcessoUncheckedUpdateManyWithoutUserNestedInput
    prioridades?: PrioridadesUncheckedUpdateManyWithoutUserNestedInput
    parceiro?: ParceiroUncheckedUpdateManyWithoutUserNestedInput
    cliente?: ClienteUncheckedUpdateManyWithoutUserNestedInput
    banco?: BancoUncheckedUpdateManyWithoutUserNestedInput
    seguradora?: SeguradoraUncheckedUpdateManyWithoutUserNestedInput
    tipoDeVeiculo?: TipoDeVeiculoUncheckedUpdateManyWithoutUserNestedInput
    documento?: DocumentoUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProcessoUpsertWithWhereUniqueWithoutTipoProcessoInput = {
    where: ProcessoWhereUniqueInput
    update: XOR<ProcessoUpdateWithoutTipoProcessoInput, ProcessoUncheckedUpdateWithoutTipoProcessoInput>
    create: XOR<ProcessoCreateWithoutTipoProcessoInput, ProcessoUncheckedCreateWithoutTipoProcessoInput>
  }

  export type ProcessoUpdateWithWhereUniqueWithoutTipoProcessoInput = {
    where: ProcessoWhereUniqueInput
    data: XOR<ProcessoUpdateWithoutTipoProcessoInput, ProcessoUncheckedUpdateWithoutTipoProcessoInput>
  }

  export type ProcessoUpdateManyWithWhereWithoutTipoProcessoInput = {
    where: ProcessoScalarWhereInput
    data: XOR<ProcessoUpdateManyMutationInput, ProcessoUncheckedUpdateManyWithoutTipoProcessoInput>
  }

  export type ClienteCreateWithoutDocumentoInput = {
    nome: string
    cpf: string
    rg: string
    user: UserCreateNestedOneWithoutClienteInput
  }

  export type ClienteUncheckedCreateWithoutDocumentoInput = {
    id?: number
    nome: string
    cpf: string
    rg: string
    userId: string
  }

  export type ClienteCreateOrConnectWithoutDocumentoInput = {
    where: ClienteWhereUniqueInput
    create: XOR<ClienteCreateWithoutDocumentoInput, ClienteUncheckedCreateWithoutDocumentoInput>
  }

  export type UserCreateWithoutDocumentoInput = {
    id?: string
    username: string
    email: string
    password: string
    vitimas?: VitimaCreateNestedManyWithoutUserInput
    processos?: ProcessoCreateNestedManyWithoutUserInput
    fasesProcesso?: FaseProcessoCreateNestedManyWithoutUserInput
    tiposDeProcesso?: TiposDeProcessoCreateNestedManyWithoutUserInput
    prioridades?: PrioridadesCreateNestedManyWithoutUserInput
    parceiro?: ParceiroCreateNestedManyWithoutUserInput
    cliente?: ClienteCreateNestedManyWithoutUserInput
    banco?: BancoCreateNestedManyWithoutUserInput
    seguradora?: SeguradoraCreateNestedManyWithoutUserInput
    tipoDeVeiculo?: TipoDeVeiculoCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDocumentoInput = {
    id?: string
    username: string
    email: string
    password: string
    vitimas?: VitimaUncheckedCreateNestedManyWithoutUserInput
    processos?: ProcessoUncheckedCreateNestedManyWithoutUserInput
    fasesProcesso?: FaseProcessoUncheckedCreateNestedManyWithoutUserInput
    tiposDeProcesso?: TiposDeProcessoUncheckedCreateNestedManyWithoutUserInput
    prioridades?: PrioridadesUncheckedCreateNestedManyWithoutUserInput
    parceiro?: ParceiroUncheckedCreateNestedManyWithoutUserInput
    cliente?: ClienteUncheckedCreateNestedManyWithoutUserInput
    banco?: BancoUncheckedCreateNestedManyWithoutUserInput
    seguradora?: SeguradoraUncheckedCreateNestedManyWithoutUserInput
    tipoDeVeiculo?: TipoDeVeiculoUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDocumentoInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDocumentoInput, UserUncheckedCreateWithoutDocumentoInput>
  }

  export type ClienteUpsertWithoutDocumentoInput = {
    update: XOR<ClienteUpdateWithoutDocumentoInput, ClienteUncheckedUpdateWithoutDocumentoInput>
    create: XOR<ClienteCreateWithoutDocumentoInput, ClienteUncheckedCreateWithoutDocumentoInput>
    where?: ClienteWhereInput
  }

  export type ClienteUpdateToOneWithWhereWithoutDocumentoInput = {
    where?: ClienteWhereInput
    data: XOR<ClienteUpdateWithoutDocumentoInput, ClienteUncheckedUpdateWithoutDocumentoInput>
  }

  export type ClienteUpdateWithoutDocumentoInput = {
    nome?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateWithoutDocumentoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpsertWithoutDocumentoInput = {
    update: XOR<UserUpdateWithoutDocumentoInput, UserUncheckedUpdateWithoutDocumentoInput>
    create: XOR<UserCreateWithoutDocumentoInput, UserUncheckedCreateWithoutDocumentoInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDocumentoInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDocumentoInput, UserUncheckedUpdateWithoutDocumentoInput>
  }

  export type UserUpdateWithoutDocumentoInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    vitimas?: VitimaUpdateManyWithoutUserNestedInput
    processos?: ProcessoUpdateManyWithoutUserNestedInput
    fasesProcesso?: FaseProcessoUpdateManyWithoutUserNestedInput
    tiposDeProcesso?: TiposDeProcessoUpdateManyWithoutUserNestedInput
    prioridades?: PrioridadesUpdateManyWithoutUserNestedInput
    parceiro?: ParceiroUpdateManyWithoutUserNestedInput
    cliente?: ClienteUpdateManyWithoutUserNestedInput
    banco?: BancoUpdateManyWithoutUserNestedInput
    seguradora?: SeguradoraUpdateManyWithoutUserNestedInput
    tipoDeVeiculo?: TipoDeVeiculoUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDocumentoInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    vitimas?: VitimaUncheckedUpdateManyWithoutUserNestedInput
    processos?: ProcessoUncheckedUpdateManyWithoutUserNestedInput
    fasesProcesso?: FaseProcessoUncheckedUpdateManyWithoutUserNestedInput
    tiposDeProcesso?: TiposDeProcessoUncheckedUpdateManyWithoutUserNestedInput
    prioridades?: PrioridadesUncheckedUpdateManyWithoutUserNestedInput
    parceiro?: ParceiroUncheckedUpdateManyWithoutUserNestedInput
    cliente?: ClienteUncheckedUpdateManyWithoutUserNestedInput
    banco?: BancoUncheckedUpdateManyWithoutUserNestedInput
    seguradora?: SeguradoraUncheckedUpdateManyWithoutUserNestedInput
    tipoDeVeiculo?: TipoDeVeiculoUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutFasesProcessoInput = {
    id?: string
    username: string
    email: string
    password: string
    vitimas?: VitimaCreateNestedManyWithoutUserInput
    processos?: ProcessoCreateNestedManyWithoutUserInput
    tiposDeProcesso?: TiposDeProcessoCreateNestedManyWithoutUserInput
    prioridades?: PrioridadesCreateNestedManyWithoutUserInput
    parceiro?: ParceiroCreateNestedManyWithoutUserInput
    cliente?: ClienteCreateNestedManyWithoutUserInput
    banco?: BancoCreateNestedManyWithoutUserInput
    seguradora?: SeguradoraCreateNestedManyWithoutUserInput
    tipoDeVeiculo?: TipoDeVeiculoCreateNestedManyWithoutUserInput
    documento?: DocumentoCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFasesProcessoInput = {
    id?: string
    username: string
    email: string
    password: string
    vitimas?: VitimaUncheckedCreateNestedManyWithoutUserInput
    processos?: ProcessoUncheckedCreateNestedManyWithoutUserInput
    tiposDeProcesso?: TiposDeProcessoUncheckedCreateNestedManyWithoutUserInput
    prioridades?: PrioridadesUncheckedCreateNestedManyWithoutUserInput
    parceiro?: ParceiroUncheckedCreateNestedManyWithoutUserInput
    cliente?: ClienteUncheckedCreateNestedManyWithoutUserInput
    banco?: BancoUncheckedCreateNestedManyWithoutUserInput
    seguradora?: SeguradoraUncheckedCreateNestedManyWithoutUserInput
    tipoDeVeiculo?: TipoDeVeiculoUncheckedCreateNestedManyWithoutUserInput
    documento?: DocumentoUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFasesProcessoInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFasesProcessoInput, UserUncheckedCreateWithoutFasesProcessoInput>
  }

  export type ProcessoCreateWithoutFaseProcessoInput = {
    numero: string
    status: string
    criado_em?: Date | string
    atualizado_em?: Date | string
    tipoProcesso: TiposDeProcessoCreateNestedOneWithoutProcessoInput
    vitima: VitimaCreateNestedOneWithoutProcessosInput
    user: UserCreateNestedOneWithoutProcessosInput
  }

  export type ProcessoUncheckedCreateWithoutFaseProcessoInput = {
    id?: number
    numero: string
    tipoProcessoId: number
    vitimaId: number
    userId: string
    status: string
    criado_em?: Date | string
    atualizado_em?: Date | string
  }

  export type ProcessoCreateOrConnectWithoutFaseProcessoInput = {
    where: ProcessoWhereUniqueInput
    create: XOR<ProcessoCreateWithoutFaseProcessoInput, ProcessoUncheckedCreateWithoutFaseProcessoInput>
  }

  export type ProcessoCreateManyFaseProcessoInputEnvelope = {
    data: ProcessoCreateManyFaseProcessoInput | ProcessoCreateManyFaseProcessoInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutFasesProcessoInput = {
    update: XOR<UserUpdateWithoutFasesProcessoInput, UserUncheckedUpdateWithoutFasesProcessoInput>
    create: XOR<UserCreateWithoutFasesProcessoInput, UserUncheckedCreateWithoutFasesProcessoInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFasesProcessoInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFasesProcessoInput, UserUncheckedUpdateWithoutFasesProcessoInput>
  }

  export type UserUpdateWithoutFasesProcessoInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    vitimas?: VitimaUpdateManyWithoutUserNestedInput
    processos?: ProcessoUpdateManyWithoutUserNestedInput
    tiposDeProcesso?: TiposDeProcessoUpdateManyWithoutUserNestedInput
    prioridades?: PrioridadesUpdateManyWithoutUserNestedInput
    parceiro?: ParceiroUpdateManyWithoutUserNestedInput
    cliente?: ClienteUpdateManyWithoutUserNestedInput
    banco?: BancoUpdateManyWithoutUserNestedInput
    seguradora?: SeguradoraUpdateManyWithoutUserNestedInput
    tipoDeVeiculo?: TipoDeVeiculoUpdateManyWithoutUserNestedInput
    documento?: DocumentoUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFasesProcessoInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    vitimas?: VitimaUncheckedUpdateManyWithoutUserNestedInput
    processos?: ProcessoUncheckedUpdateManyWithoutUserNestedInput
    tiposDeProcesso?: TiposDeProcessoUncheckedUpdateManyWithoutUserNestedInput
    prioridades?: PrioridadesUncheckedUpdateManyWithoutUserNestedInput
    parceiro?: ParceiroUncheckedUpdateManyWithoutUserNestedInput
    cliente?: ClienteUncheckedUpdateManyWithoutUserNestedInput
    banco?: BancoUncheckedUpdateManyWithoutUserNestedInput
    seguradora?: SeguradoraUncheckedUpdateManyWithoutUserNestedInput
    tipoDeVeiculo?: TipoDeVeiculoUncheckedUpdateManyWithoutUserNestedInput
    documento?: DocumentoUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProcessoUpsertWithWhereUniqueWithoutFaseProcessoInput = {
    where: ProcessoWhereUniqueInput
    update: XOR<ProcessoUpdateWithoutFaseProcessoInput, ProcessoUncheckedUpdateWithoutFaseProcessoInput>
    create: XOR<ProcessoCreateWithoutFaseProcessoInput, ProcessoUncheckedCreateWithoutFaseProcessoInput>
  }

  export type ProcessoUpdateWithWhereUniqueWithoutFaseProcessoInput = {
    where: ProcessoWhereUniqueInput
    data: XOR<ProcessoUpdateWithoutFaseProcessoInput, ProcessoUncheckedUpdateWithoutFaseProcessoInput>
  }

  export type ProcessoUpdateManyWithWhereWithoutFaseProcessoInput = {
    where: ProcessoScalarWhereInput
    data: XOR<ProcessoUpdateManyMutationInput, ProcessoUncheckedUpdateManyWithoutFaseProcessoInput>
  }

  export type UserCreateWithoutPrioridadesInput = {
    id?: string
    username: string
    email: string
    password: string
    vitimas?: VitimaCreateNestedManyWithoutUserInput
    processos?: ProcessoCreateNestedManyWithoutUserInput
    fasesProcesso?: FaseProcessoCreateNestedManyWithoutUserInput
    tiposDeProcesso?: TiposDeProcessoCreateNestedManyWithoutUserInput
    parceiro?: ParceiroCreateNestedManyWithoutUserInput
    cliente?: ClienteCreateNestedManyWithoutUserInput
    banco?: BancoCreateNestedManyWithoutUserInput
    seguradora?: SeguradoraCreateNestedManyWithoutUserInput
    tipoDeVeiculo?: TipoDeVeiculoCreateNestedManyWithoutUserInput
    documento?: DocumentoCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPrioridadesInput = {
    id?: string
    username: string
    email: string
    password: string
    vitimas?: VitimaUncheckedCreateNestedManyWithoutUserInput
    processos?: ProcessoUncheckedCreateNestedManyWithoutUserInput
    fasesProcesso?: FaseProcessoUncheckedCreateNestedManyWithoutUserInput
    tiposDeProcesso?: TiposDeProcessoUncheckedCreateNestedManyWithoutUserInput
    parceiro?: ParceiroUncheckedCreateNestedManyWithoutUserInput
    cliente?: ClienteUncheckedCreateNestedManyWithoutUserInput
    banco?: BancoUncheckedCreateNestedManyWithoutUserInput
    seguradora?: SeguradoraUncheckedCreateNestedManyWithoutUserInput
    tipoDeVeiculo?: TipoDeVeiculoUncheckedCreateNestedManyWithoutUserInput
    documento?: DocumentoUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPrioridadesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPrioridadesInput, UserUncheckedCreateWithoutPrioridadesInput>
  }

  export type UserUpsertWithoutPrioridadesInput = {
    update: XOR<UserUpdateWithoutPrioridadesInput, UserUncheckedUpdateWithoutPrioridadesInput>
    create: XOR<UserCreateWithoutPrioridadesInput, UserUncheckedCreateWithoutPrioridadesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPrioridadesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPrioridadesInput, UserUncheckedUpdateWithoutPrioridadesInput>
  }

  export type UserUpdateWithoutPrioridadesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    vitimas?: VitimaUpdateManyWithoutUserNestedInput
    processos?: ProcessoUpdateManyWithoutUserNestedInput
    fasesProcesso?: FaseProcessoUpdateManyWithoutUserNestedInput
    tiposDeProcesso?: TiposDeProcessoUpdateManyWithoutUserNestedInput
    parceiro?: ParceiroUpdateManyWithoutUserNestedInput
    cliente?: ClienteUpdateManyWithoutUserNestedInput
    banco?: BancoUpdateManyWithoutUserNestedInput
    seguradora?: SeguradoraUpdateManyWithoutUserNestedInput
    tipoDeVeiculo?: TipoDeVeiculoUpdateManyWithoutUserNestedInput
    documento?: DocumentoUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPrioridadesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    vitimas?: VitimaUncheckedUpdateManyWithoutUserNestedInput
    processos?: ProcessoUncheckedUpdateManyWithoutUserNestedInput
    fasesProcesso?: FaseProcessoUncheckedUpdateManyWithoutUserNestedInput
    tiposDeProcesso?: TiposDeProcessoUncheckedUpdateManyWithoutUserNestedInput
    parceiro?: ParceiroUncheckedUpdateManyWithoutUserNestedInput
    cliente?: ClienteUncheckedUpdateManyWithoutUserNestedInput
    banco?: BancoUncheckedUpdateManyWithoutUserNestedInput
    seguradora?: SeguradoraUncheckedUpdateManyWithoutUserNestedInput
    tipoDeVeiculo?: TipoDeVeiculoUncheckedUpdateManyWithoutUserNestedInput
    documento?: DocumentoUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutParceiroInput = {
    id?: string
    username: string
    email: string
    password: string
    vitimas?: VitimaCreateNestedManyWithoutUserInput
    processos?: ProcessoCreateNestedManyWithoutUserInput
    fasesProcesso?: FaseProcessoCreateNestedManyWithoutUserInput
    tiposDeProcesso?: TiposDeProcessoCreateNestedManyWithoutUserInput
    prioridades?: PrioridadesCreateNestedManyWithoutUserInput
    cliente?: ClienteCreateNestedManyWithoutUserInput
    banco?: BancoCreateNestedManyWithoutUserInput
    seguradora?: SeguradoraCreateNestedManyWithoutUserInput
    tipoDeVeiculo?: TipoDeVeiculoCreateNestedManyWithoutUserInput
    documento?: DocumentoCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutParceiroInput = {
    id?: string
    username: string
    email: string
    password: string
    vitimas?: VitimaUncheckedCreateNestedManyWithoutUserInput
    processos?: ProcessoUncheckedCreateNestedManyWithoutUserInput
    fasesProcesso?: FaseProcessoUncheckedCreateNestedManyWithoutUserInput
    tiposDeProcesso?: TiposDeProcessoUncheckedCreateNestedManyWithoutUserInput
    prioridades?: PrioridadesUncheckedCreateNestedManyWithoutUserInput
    cliente?: ClienteUncheckedCreateNestedManyWithoutUserInput
    banco?: BancoUncheckedCreateNestedManyWithoutUserInput
    seguradora?: SeguradoraUncheckedCreateNestedManyWithoutUserInput
    tipoDeVeiculo?: TipoDeVeiculoUncheckedCreateNestedManyWithoutUserInput
    documento?: DocumentoUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutParceiroInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutParceiroInput, UserUncheckedCreateWithoutParceiroInput>
  }

  export type UserUpsertWithoutParceiroInput = {
    update: XOR<UserUpdateWithoutParceiroInput, UserUncheckedUpdateWithoutParceiroInput>
    create: XOR<UserCreateWithoutParceiroInput, UserUncheckedCreateWithoutParceiroInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutParceiroInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutParceiroInput, UserUncheckedUpdateWithoutParceiroInput>
  }

  export type UserUpdateWithoutParceiroInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    vitimas?: VitimaUpdateManyWithoutUserNestedInput
    processos?: ProcessoUpdateManyWithoutUserNestedInput
    fasesProcesso?: FaseProcessoUpdateManyWithoutUserNestedInput
    tiposDeProcesso?: TiposDeProcessoUpdateManyWithoutUserNestedInput
    prioridades?: PrioridadesUpdateManyWithoutUserNestedInput
    cliente?: ClienteUpdateManyWithoutUserNestedInput
    banco?: BancoUpdateManyWithoutUserNestedInput
    seguradora?: SeguradoraUpdateManyWithoutUserNestedInput
    tipoDeVeiculo?: TipoDeVeiculoUpdateManyWithoutUserNestedInput
    documento?: DocumentoUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutParceiroInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    vitimas?: VitimaUncheckedUpdateManyWithoutUserNestedInput
    processos?: ProcessoUncheckedUpdateManyWithoutUserNestedInput
    fasesProcesso?: FaseProcessoUncheckedUpdateManyWithoutUserNestedInput
    tiposDeProcesso?: TiposDeProcessoUncheckedUpdateManyWithoutUserNestedInput
    prioridades?: PrioridadesUncheckedUpdateManyWithoutUserNestedInput
    cliente?: ClienteUncheckedUpdateManyWithoutUserNestedInput
    banco?: BancoUncheckedUpdateManyWithoutUserNestedInput
    seguradora?: SeguradoraUncheckedUpdateManyWithoutUserNestedInput
    tipoDeVeiculo?: TipoDeVeiculoUncheckedUpdateManyWithoutUserNestedInput
    documento?: DocumentoUncheckedUpdateManyWithoutUserNestedInput
  }

  export type DocumentoCreateWithoutClienteInput = {
    tipo: string
    descricao?: string | null
    arquivoUrl: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    criadoEm?: Date | string
    user: UserCreateNestedOneWithoutDocumentoInput
  }

  export type DocumentoUncheckedCreateWithoutClienteInput = {
    id?: number
    tipo: string
    descricao?: string | null
    arquivoUrl: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    userId: string
    criadoEm?: Date | string
  }

  export type DocumentoCreateOrConnectWithoutClienteInput = {
    where: DocumentoWhereUniqueInput
    create: XOR<DocumentoCreateWithoutClienteInput, DocumentoUncheckedCreateWithoutClienteInput>
  }

  export type DocumentoCreateManyClienteInputEnvelope = {
    data: DocumentoCreateManyClienteInput | DocumentoCreateManyClienteInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutClienteInput = {
    id?: string
    username: string
    email: string
    password: string
    vitimas?: VitimaCreateNestedManyWithoutUserInput
    processos?: ProcessoCreateNestedManyWithoutUserInput
    fasesProcesso?: FaseProcessoCreateNestedManyWithoutUserInput
    tiposDeProcesso?: TiposDeProcessoCreateNestedManyWithoutUserInput
    prioridades?: PrioridadesCreateNestedManyWithoutUserInput
    parceiro?: ParceiroCreateNestedManyWithoutUserInput
    banco?: BancoCreateNestedManyWithoutUserInput
    seguradora?: SeguradoraCreateNestedManyWithoutUserInput
    tipoDeVeiculo?: TipoDeVeiculoCreateNestedManyWithoutUserInput
    documento?: DocumentoCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutClienteInput = {
    id?: string
    username: string
    email: string
    password: string
    vitimas?: VitimaUncheckedCreateNestedManyWithoutUserInput
    processos?: ProcessoUncheckedCreateNestedManyWithoutUserInput
    fasesProcesso?: FaseProcessoUncheckedCreateNestedManyWithoutUserInput
    tiposDeProcesso?: TiposDeProcessoUncheckedCreateNestedManyWithoutUserInput
    prioridades?: PrioridadesUncheckedCreateNestedManyWithoutUserInput
    parceiro?: ParceiroUncheckedCreateNestedManyWithoutUserInput
    banco?: BancoUncheckedCreateNestedManyWithoutUserInput
    seguradora?: SeguradoraUncheckedCreateNestedManyWithoutUserInput
    tipoDeVeiculo?: TipoDeVeiculoUncheckedCreateNestedManyWithoutUserInput
    documento?: DocumentoUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutClienteInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutClienteInput, UserUncheckedCreateWithoutClienteInput>
  }

  export type DocumentoUpsertWithWhereUniqueWithoutClienteInput = {
    where: DocumentoWhereUniqueInput
    update: XOR<DocumentoUpdateWithoutClienteInput, DocumentoUncheckedUpdateWithoutClienteInput>
    create: XOR<DocumentoCreateWithoutClienteInput, DocumentoUncheckedCreateWithoutClienteInput>
  }

  export type DocumentoUpdateWithWhereUniqueWithoutClienteInput = {
    where: DocumentoWhereUniqueInput
    data: XOR<DocumentoUpdateWithoutClienteInput, DocumentoUncheckedUpdateWithoutClienteInput>
  }

  export type DocumentoUpdateManyWithWhereWithoutClienteInput = {
    where: DocumentoScalarWhereInput
    data: XOR<DocumentoUpdateManyMutationInput, DocumentoUncheckedUpdateManyWithoutClienteInput>
  }

  export type UserUpsertWithoutClienteInput = {
    update: XOR<UserUpdateWithoutClienteInput, UserUncheckedUpdateWithoutClienteInput>
    create: XOR<UserCreateWithoutClienteInput, UserUncheckedCreateWithoutClienteInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutClienteInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutClienteInput, UserUncheckedUpdateWithoutClienteInput>
  }

  export type UserUpdateWithoutClienteInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    vitimas?: VitimaUpdateManyWithoutUserNestedInput
    processos?: ProcessoUpdateManyWithoutUserNestedInput
    fasesProcesso?: FaseProcessoUpdateManyWithoutUserNestedInput
    tiposDeProcesso?: TiposDeProcessoUpdateManyWithoutUserNestedInput
    prioridades?: PrioridadesUpdateManyWithoutUserNestedInput
    parceiro?: ParceiroUpdateManyWithoutUserNestedInput
    banco?: BancoUpdateManyWithoutUserNestedInput
    seguradora?: SeguradoraUpdateManyWithoutUserNestedInput
    tipoDeVeiculo?: TipoDeVeiculoUpdateManyWithoutUserNestedInput
    documento?: DocumentoUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutClienteInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    vitimas?: VitimaUncheckedUpdateManyWithoutUserNestedInput
    processos?: ProcessoUncheckedUpdateManyWithoutUserNestedInput
    fasesProcesso?: FaseProcessoUncheckedUpdateManyWithoutUserNestedInput
    tiposDeProcesso?: TiposDeProcessoUncheckedUpdateManyWithoutUserNestedInput
    prioridades?: PrioridadesUncheckedUpdateManyWithoutUserNestedInput
    parceiro?: ParceiroUncheckedUpdateManyWithoutUserNestedInput
    banco?: BancoUncheckedUpdateManyWithoutUserNestedInput
    seguradora?: SeguradoraUncheckedUpdateManyWithoutUserNestedInput
    tipoDeVeiculo?: TipoDeVeiculoUncheckedUpdateManyWithoutUserNestedInput
    documento?: DocumentoUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutBancoInput = {
    id?: string
    username: string
    email: string
    password: string
    vitimas?: VitimaCreateNestedManyWithoutUserInput
    processos?: ProcessoCreateNestedManyWithoutUserInput
    fasesProcesso?: FaseProcessoCreateNestedManyWithoutUserInput
    tiposDeProcesso?: TiposDeProcessoCreateNestedManyWithoutUserInput
    prioridades?: PrioridadesCreateNestedManyWithoutUserInput
    parceiro?: ParceiroCreateNestedManyWithoutUserInput
    cliente?: ClienteCreateNestedManyWithoutUserInput
    seguradora?: SeguradoraCreateNestedManyWithoutUserInput
    tipoDeVeiculo?: TipoDeVeiculoCreateNestedManyWithoutUserInput
    documento?: DocumentoCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBancoInput = {
    id?: string
    username: string
    email: string
    password: string
    vitimas?: VitimaUncheckedCreateNestedManyWithoutUserInput
    processos?: ProcessoUncheckedCreateNestedManyWithoutUserInput
    fasesProcesso?: FaseProcessoUncheckedCreateNestedManyWithoutUserInput
    tiposDeProcesso?: TiposDeProcessoUncheckedCreateNestedManyWithoutUserInput
    prioridades?: PrioridadesUncheckedCreateNestedManyWithoutUserInput
    parceiro?: ParceiroUncheckedCreateNestedManyWithoutUserInput
    cliente?: ClienteUncheckedCreateNestedManyWithoutUserInput
    seguradora?: SeguradoraUncheckedCreateNestedManyWithoutUserInput
    tipoDeVeiculo?: TipoDeVeiculoUncheckedCreateNestedManyWithoutUserInput
    documento?: DocumentoUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBancoInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBancoInput, UserUncheckedCreateWithoutBancoInput>
  }

  export type UserUpsertWithoutBancoInput = {
    update: XOR<UserUpdateWithoutBancoInput, UserUncheckedUpdateWithoutBancoInput>
    create: XOR<UserCreateWithoutBancoInput, UserUncheckedCreateWithoutBancoInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBancoInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBancoInput, UserUncheckedUpdateWithoutBancoInput>
  }

  export type UserUpdateWithoutBancoInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    vitimas?: VitimaUpdateManyWithoutUserNestedInput
    processos?: ProcessoUpdateManyWithoutUserNestedInput
    fasesProcesso?: FaseProcessoUpdateManyWithoutUserNestedInput
    tiposDeProcesso?: TiposDeProcessoUpdateManyWithoutUserNestedInput
    prioridades?: PrioridadesUpdateManyWithoutUserNestedInput
    parceiro?: ParceiroUpdateManyWithoutUserNestedInput
    cliente?: ClienteUpdateManyWithoutUserNestedInput
    seguradora?: SeguradoraUpdateManyWithoutUserNestedInput
    tipoDeVeiculo?: TipoDeVeiculoUpdateManyWithoutUserNestedInput
    documento?: DocumentoUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBancoInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    vitimas?: VitimaUncheckedUpdateManyWithoutUserNestedInput
    processos?: ProcessoUncheckedUpdateManyWithoutUserNestedInput
    fasesProcesso?: FaseProcessoUncheckedUpdateManyWithoutUserNestedInput
    tiposDeProcesso?: TiposDeProcessoUncheckedUpdateManyWithoutUserNestedInput
    prioridades?: PrioridadesUncheckedUpdateManyWithoutUserNestedInput
    parceiro?: ParceiroUncheckedUpdateManyWithoutUserNestedInput
    cliente?: ClienteUncheckedUpdateManyWithoutUserNestedInput
    seguradora?: SeguradoraUncheckedUpdateManyWithoutUserNestedInput
    tipoDeVeiculo?: TipoDeVeiculoUncheckedUpdateManyWithoutUserNestedInput
    documento?: DocumentoUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSeguradoraInput = {
    id?: string
    username: string
    email: string
    password: string
    vitimas?: VitimaCreateNestedManyWithoutUserInput
    processos?: ProcessoCreateNestedManyWithoutUserInput
    fasesProcesso?: FaseProcessoCreateNestedManyWithoutUserInput
    tiposDeProcesso?: TiposDeProcessoCreateNestedManyWithoutUserInput
    prioridades?: PrioridadesCreateNestedManyWithoutUserInput
    parceiro?: ParceiroCreateNestedManyWithoutUserInput
    cliente?: ClienteCreateNestedManyWithoutUserInput
    banco?: BancoCreateNestedManyWithoutUserInput
    tipoDeVeiculo?: TipoDeVeiculoCreateNestedManyWithoutUserInput
    documento?: DocumentoCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSeguradoraInput = {
    id?: string
    username: string
    email: string
    password: string
    vitimas?: VitimaUncheckedCreateNestedManyWithoutUserInput
    processos?: ProcessoUncheckedCreateNestedManyWithoutUserInput
    fasesProcesso?: FaseProcessoUncheckedCreateNestedManyWithoutUserInput
    tiposDeProcesso?: TiposDeProcessoUncheckedCreateNestedManyWithoutUserInput
    prioridades?: PrioridadesUncheckedCreateNestedManyWithoutUserInput
    parceiro?: ParceiroUncheckedCreateNestedManyWithoutUserInput
    cliente?: ClienteUncheckedCreateNestedManyWithoutUserInput
    banco?: BancoUncheckedCreateNestedManyWithoutUserInput
    tipoDeVeiculo?: TipoDeVeiculoUncheckedCreateNestedManyWithoutUserInput
    documento?: DocumentoUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSeguradoraInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSeguradoraInput, UserUncheckedCreateWithoutSeguradoraInput>
  }

  export type UserUpsertWithoutSeguradoraInput = {
    update: XOR<UserUpdateWithoutSeguradoraInput, UserUncheckedUpdateWithoutSeguradoraInput>
    create: XOR<UserCreateWithoutSeguradoraInput, UserUncheckedCreateWithoutSeguradoraInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSeguradoraInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSeguradoraInput, UserUncheckedUpdateWithoutSeguradoraInput>
  }

  export type UserUpdateWithoutSeguradoraInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    vitimas?: VitimaUpdateManyWithoutUserNestedInput
    processos?: ProcessoUpdateManyWithoutUserNestedInput
    fasesProcesso?: FaseProcessoUpdateManyWithoutUserNestedInput
    tiposDeProcesso?: TiposDeProcessoUpdateManyWithoutUserNestedInput
    prioridades?: PrioridadesUpdateManyWithoutUserNestedInput
    parceiro?: ParceiroUpdateManyWithoutUserNestedInput
    cliente?: ClienteUpdateManyWithoutUserNestedInput
    banco?: BancoUpdateManyWithoutUserNestedInput
    tipoDeVeiculo?: TipoDeVeiculoUpdateManyWithoutUserNestedInput
    documento?: DocumentoUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSeguradoraInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    vitimas?: VitimaUncheckedUpdateManyWithoutUserNestedInput
    processos?: ProcessoUncheckedUpdateManyWithoutUserNestedInput
    fasesProcesso?: FaseProcessoUncheckedUpdateManyWithoutUserNestedInput
    tiposDeProcesso?: TiposDeProcessoUncheckedUpdateManyWithoutUserNestedInput
    prioridades?: PrioridadesUncheckedUpdateManyWithoutUserNestedInput
    parceiro?: ParceiroUncheckedUpdateManyWithoutUserNestedInput
    cliente?: ClienteUncheckedUpdateManyWithoutUserNestedInput
    banco?: BancoUncheckedUpdateManyWithoutUserNestedInput
    tipoDeVeiculo?: TipoDeVeiculoUncheckedUpdateManyWithoutUserNestedInput
    documento?: DocumentoUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutTipoDeVeiculoInput = {
    id?: string
    username: string
    email: string
    password: string
    vitimas?: VitimaCreateNestedManyWithoutUserInput
    processos?: ProcessoCreateNestedManyWithoutUserInput
    fasesProcesso?: FaseProcessoCreateNestedManyWithoutUserInput
    tiposDeProcesso?: TiposDeProcessoCreateNestedManyWithoutUserInput
    prioridades?: PrioridadesCreateNestedManyWithoutUserInput
    parceiro?: ParceiroCreateNestedManyWithoutUserInput
    cliente?: ClienteCreateNestedManyWithoutUserInput
    banco?: BancoCreateNestedManyWithoutUserInput
    seguradora?: SeguradoraCreateNestedManyWithoutUserInput
    documento?: DocumentoCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTipoDeVeiculoInput = {
    id?: string
    username: string
    email: string
    password: string
    vitimas?: VitimaUncheckedCreateNestedManyWithoutUserInput
    processos?: ProcessoUncheckedCreateNestedManyWithoutUserInput
    fasesProcesso?: FaseProcessoUncheckedCreateNestedManyWithoutUserInput
    tiposDeProcesso?: TiposDeProcessoUncheckedCreateNestedManyWithoutUserInput
    prioridades?: PrioridadesUncheckedCreateNestedManyWithoutUserInput
    parceiro?: ParceiroUncheckedCreateNestedManyWithoutUserInput
    cliente?: ClienteUncheckedCreateNestedManyWithoutUserInput
    banco?: BancoUncheckedCreateNestedManyWithoutUserInput
    seguradora?: SeguradoraUncheckedCreateNestedManyWithoutUserInput
    documento?: DocumentoUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTipoDeVeiculoInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTipoDeVeiculoInput, UserUncheckedCreateWithoutTipoDeVeiculoInput>
  }

  export type UserUpsertWithoutTipoDeVeiculoInput = {
    update: XOR<UserUpdateWithoutTipoDeVeiculoInput, UserUncheckedUpdateWithoutTipoDeVeiculoInput>
    create: XOR<UserCreateWithoutTipoDeVeiculoInput, UserUncheckedCreateWithoutTipoDeVeiculoInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTipoDeVeiculoInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTipoDeVeiculoInput, UserUncheckedUpdateWithoutTipoDeVeiculoInput>
  }

  export type UserUpdateWithoutTipoDeVeiculoInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    vitimas?: VitimaUpdateManyWithoutUserNestedInput
    processos?: ProcessoUpdateManyWithoutUserNestedInput
    fasesProcesso?: FaseProcessoUpdateManyWithoutUserNestedInput
    tiposDeProcesso?: TiposDeProcessoUpdateManyWithoutUserNestedInput
    prioridades?: PrioridadesUpdateManyWithoutUserNestedInput
    parceiro?: ParceiroUpdateManyWithoutUserNestedInput
    cliente?: ClienteUpdateManyWithoutUserNestedInput
    banco?: BancoUpdateManyWithoutUserNestedInput
    seguradora?: SeguradoraUpdateManyWithoutUserNestedInput
    documento?: DocumentoUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTipoDeVeiculoInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    vitimas?: VitimaUncheckedUpdateManyWithoutUserNestedInput
    processos?: ProcessoUncheckedUpdateManyWithoutUserNestedInput
    fasesProcesso?: FaseProcessoUncheckedUpdateManyWithoutUserNestedInput
    tiposDeProcesso?: TiposDeProcessoUncheckedUpdateManyWithoutUserNestedInput
    prioridades?: PrioridadesUncheckedUpdateManyWithoutUserNestedInput
    parceiro?: ParceiroUncheckedUpdateManyWithoutUserNestedInput
    cliente?: ClienteUncheckedUpdateManyWithoutUserNestedInput
    banco?: BancoUncheckedUpdateManyWithoutUserNestedInput
    seguradora?: SeguradoraUncheckedUpdateManyWithoutUserNestedInput
    documento?: DocumentoUncheckedUpdateManyWithoutUserNestedInput
  }

  export type VitimaCreateManyUserInput = {
    id?: number
    nome: string
    cpf: number
    rg: number
    data_nascimento: Date | string
    data_emissao: Date | string
    orgao_expedidor: string
    activo: boolean
    profissao: string
    renda_mensal: number
    cep: number
    uf: string
    endereco: string
    numero: number
    sexo: string
    complemento: string
    bairro: string
    cidade: string
    email: string
    telefone01: number
    telefone02: number
  }

  export type ProcessoCreateManyUserInput = {
    id?: number
    numero: string
    tipoProcessoId: number
    faseProcessoId: number
    vitimaId: number
    status: string
    criado_em?: Date | string
    atualizado_em?: Date | string
  }

  export type FaseProcessoCreateManyUserInput = {
    id?: number
    nome: string
    cor_fundo: string
    cor_fonte: string
    pendencia: boolean
    muda_fase: boolean
    activo: boolean
    criado_em?: Date | string
    atualizado_em?: Date | string
  }

  export type TiposDeProcessoCreateManyUserInput = {
    id?: number
    nome: string
    activo: boolean
  }

  export type PrioridadesCreateManyUserInput = {
    id?: number
    nome: string
    cor_fundo: string
    cor_fonte: string
    activo: boolean
  }

  export type ParceiroCreateManyUserInput = {
    id?: number
    nome: string
    uf: string
    cidade: string
  }

  export type ClienteCreateManyUserInput = {
    id?: number
    nome: string
    cpf: string
    rg: string
  }

  export type BancoCreateManyUserInput = {
    id?: number
    nome: string
    agencia: string
    conta: string
  }

  export type SeguradoraCreateManyUserInput = {
    id?: number
    nome: string
  }

  export type TipoDeVeiculoCreateManyUserInput = {
    id?: number
    nome: string
    placa: string
    marca: string
    modelo: string
  }

  export type DocumentoCreateManyUserInput = {
    id?: number
    tipo: string
    descricao?: string | null
    arquivoUrl: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    clienteId: number
    criadoEm?: Date | string
  }

  export type VitimaUpdateWithoutUserInput = {
    nome?: StringFieldUpdateOperationsInput | string
    cpf?: IntFieldUpdateOperationsInput | number
    rg?: IntFieldUpdateOperationsInput | number
    data_nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    data_emissao?: DateTimeFieldUpdateOperationsInput | Date | string
    orgao_expedidor?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    profissao?: StringFieldUpdateOperationsInput | string
    renda_mensal?: IntFieldUpdateOperationsInput | number
    cep?: IntFieldUpdateOperationsInput | number
    uf?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    sexo?: StringFieldUpdateOperationsInput | string
    complemento?: StringFieldUpdateOperationsInput | string
    bairro?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone01?: IntFieldUpdateOperationsInput | number
    telefone02?: IntFieldUpdateOperationsInput | number
    processos?: ProcessoUpdateManyWithoutVitimaNestedInput
  }

  export type VitimaUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    cpf?: IntFieldUpdateOperationsInput | number
    rg?: IntFieldUpdateOperationsInput | number
    data_nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    data_emissao?: DateTimeFieldUpdateOperationsInput | Date | string
    orgao_expedidor?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    profissao?: StringFieldUpdateOperationsInput | string
    renda_mensal?: IntFieldUpdateOperationsInput | number
    cep?: IntFieldUpdateOperationsInput | number
    uf?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    sexo?: StringFieldUpdateOperationsInput | string
    complemento?: StringFieldUpdateOperationsInput | string
    bairro?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone01?: IntFieldUpdateOperationsInput | number
    telefone02?: IntFieldUpdateOperationsInput | number
    processos?: ProcessoUncheckedUpdateManyWithoutVitimaNestedInput
  }

  export type VitimaUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    cpf?: IntFieldUpdateOperationsInput | number
    rg?: IntFieldUpdateOperationsInput | number
    data_nascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    data_emissao?: DateTimeFieldUpdateOperationsInput | Date | string
    orgao_expedidor?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    profissao?: StringFieldUpdateOperationsInput | string
    renda_mensal?: IntFieldUpdateOperationsInput | number
    cep?: IntFieldUpdateOperationsInput | number
    uf?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    sexo?: StringFieldUpdateOperationsInput | string
    complemento?: StringFieldUpdateOperationsInput | string
    bairro?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone01?: IntFieldUpdateOperationsInput | number
    telefone02?: IntFieldUpdateOperationsInput | number
  }

  export type ProcessoUpdateWithoutUserInput = {
    numero?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoProcesso?: TiposDeProcessoUpdateOneRequiredWithoutProcessoNestedInput
    faseProcesso?: FaseProcessoUpdateOneRequiredWithoutProcessoNestedInput
    vitima?: VitimaUpdateOneRequiredWithoutProcessosNestedInput
  }

  export type ProcessoUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero?: StringFieldUpdateOperationsInput | string
    tipoProcessoId?: IntFieldUpdateOperationsInput | number
    faseProcessoId?: IntFieldUpdateOperationsInput | number
    vitimaId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProcessoUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero?: StringFieldUpdateOperationsInput | string
    tipoProcessoId?: IntFieldUpdateOperationsInput | number
    faseProcessoId?: IntFieldUpdateOperationsInput | number
    vitimaId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FaseProcessoUpdateWithoutUserInput = {
    nome?: StringFieldUpdateOperationsInput | string
    cor_fundo?: StringFieldUpdateOperationsInput | string
    cor_fonte?: StringFieldUpdateOperationsInput | string
    pendencia?: BoolFieldUpdateOperationsInput | boolean
    muda_fase?: BoolFieldUpdateOperationsInput | boolean
    activo?: BoolFieldUpdateOperationsInput | boolean
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    processo?: ProcessoUpdateManyWithoutFaseProcessoNestedInput
  }

  export type FaseProcessoUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    cor_fundo?: StringFieldUpdateOperationsInput | string
    cor_fonte?: StringFieldUpdateOperationsInput | string
    pendencia?: BoolFieldUpdateOperationsInput | boolean
    muda_fase?: BoolFieldUpdateOperationsInput | boolean
    activo?: BoolFieldUpdateOperationsInput | boolean
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    processo?: ProcessoUncheckedUpdateManyWithoutFaseProcessoNestedInput
  }

  export type FaseProcessoUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    cor_fundo?: StringFieldUpdateOperationsInput | string
    cor_fonte?: StringFieldUpdateOperationsInput | string
    pendencia?: BoolFieldUpdateOperationsInput | boolean
    muda_fase?: BoolFieldUpdateOperationsInput | boolean
    activo?: BoolFieldUpdateOperationsInput | boolean
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TiposDeProcessoUpdateWithoutUserInput = {
    nome?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    processo?: ProcessoUpdateManyWithoutTipoProcessoNestedInput
  }

  export type TiposDeProcessoUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    processo?: ProcessoUncheckedUpdateManyWithoutTipoProcessoNestedInput
  }

  export type TiposDeProcessoUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PrioridadesUpdateWithoutUserInput = {
    nome?: StringFieldUpdateOperationsInput | string
    cor_fundo?: StringFieldUpdateOperationsInput | string
    cor_fonte?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PrioridadesUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    cor_fundo?: StringFieldUpdateOperationsInput | string
    cor_fonte?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PrioridadesUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    cor_fundo?: StringFieldUpdateOperationsInput | string
    cor_fonte?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ParceiroUpdateWithoutUserInput = {
    nome?: StringFieldUpdateOperationsInput | string
    uf?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
  }

  export type ParceiroUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    uf?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
  }

  export type ParceiroUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    uf?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
  }

  export type ClienteUpdateWithoutUserInput = {
    nome?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: StringFieldUpdateOperationsInput | string
    documento?: DocumentoUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: StringFieldUpdateOperationsInput | string
    documento?: DocumentoUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: StringFieldUpdateOperationsInput | string
  }

  export type BancoUpdateWithoutUserInput = {
    nome?: StringFieldUpdateOperationsInput | string
    agencia?: StringFieldUpdateOperationsInput | string
    conta?: StringFieldUpdateOperationsInput | string
  }

  export type BancoUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    agencia?: StringFieldUpdateOperationsInput | string
    conta?: StringFieldUpdateOperationsInput | string
  }

  export type BancoUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    agencia?: StringFieldUpdateOperationsInput | string
    conta?: StringFieldUpdateOperationsInput | string
  }

  export type SeguradoraUpdateWithoutUserInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type SeguradoraUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type SeguradoraUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type TipoDeVeiculoUpdateWithoutUserInput = {
    nome?: StringFieldUpdateOperationsInput | string
    placa?: StringFieldUpdateOperationsInput | string
    marca?: StringFieldUpdateOperationsInput | string
    modelo?: StringFieldUpdateOperationsInput | string
  }

  export type TipoDeVeiculoUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    placa?: StringFieldUpdateOperationsInput | string
    marca?: StringFieldUpdateOperationsInput | string
    modelo?: StringFieldUpdateOperationsInput | string
  }

  export type TipoDeVeiculoUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    placa?: StringFieldUpdateOperationsInput | string
    marca?: StringFieldUpdateOperationsInput | string
    modelo?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentoUpdateWithoutUserInput = {
    tipo?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    arquivoUrl?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    cliente?: ClienteUpdateOneRequiredWithoutDocumentoNestedInput
  }

  export type DocumentoUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    arquivoUrl?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    clienteId?: IntFieldUpdateOperationsInput | number
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentoUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    arquivoUrl?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    clienteId?: IntFieldUpdateOperationsInput | number
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProcessoCreateManyVitimaInput = {
    id?: number
    numero: string
    tipoProcessoId: number
    faseProcessoId: number
    userId: string
    status: string
    criado_em?: Date | string
    atualizado_em?: Date | string
  }

  export type ProcessoUpdateWithoutVitimaInput = {
    numero?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoProcesso?: TiposDeProcessoUpdateOneRequiredWithoutProcessoNestedInput
    faseProcesso?: FaseProcessoUpdateOneRequiredWithoutProcessoNestedInput
    user?: UserUpdateOneRequiredWithoutProcessosNestedInput
  }

  export type ProcessoUncheckedUpdateWithoutVitimaInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero?: StringFieldUpdateOperationsInput | string
    tipoProcessoId?: IntFieldUpdateOperationsInput | number
    faseProcessoId?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProcessoUncheckedUpdateManyWithoutVitimaInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero?: StringFieldUpdateOperationsInput | string
    tipoProcessoId?: IntFieldUpdateOperationsInput | number
    faseProcessoId?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProcessoCreateManyTipoProcessoInput = {
    id?: number
    numero: string
    faseProcessoId: number
    vitimaId: number
    userId: string
    status: string
    criado_em?: Date | string
    atualizado_em?: Date | string
  }

  export type ProcessoUpdateWithoutTipoProcessoInput = {
    numero?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    faseProcesso?: FaseProcessoUpdateOneRequiredWithoutProcessoNestedInput
    vitima?: VitimaUpdateOneRequiredWithoutProcessosNestedInput
    user?: UserUpdateOneRequiredWithoutProcessosNestedInput
  }

  export type ProcessoUncheckedUpdateWithoutTipoProcessoInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero?: StringFieldUpdateOperationsInput | string
    faseProcessoId?: IntFieldUpdateOperationsInput | number
    vitimaId?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProcessoUncheckedUpdateManyWithoutTipoProcessoInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero?: StringFieldUpdateOperationsInput | string
    faseProcessoId?: IntFieldUpdateOperationsInput | number
    vitimaId?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProcessoCreateManyFaseProcessoInput = {
    id?: number
    numero: string
    tipoProcessoId: number
    vitimaId: number
    userId: string
    status: string
    criado_em?: Date | string
    atualizado_em?: Date | string
  }

  export type ProcessoUpdateWithoutFaseProcessoInput = {
    numero?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoProcesso?: TiposDeProcessoUpdateOneRequiredWithoutProcessoNestedInput
    vitima?: VitimaUpdateOneRequiredWithoutProcessosNestedInput
    user?: UserUpdateOneRequiredWithoutProcessosNestedInput
  }

  export type ProcessoUncheckedUpdateWithoutFaseProcessoInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero?: StringFieldUpdateOperationsInput | string
    tipoProcessoId?: IntFieldUpdateOperationsInput | number
    vitimaId?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProcessoUncheckedUpdateManyWithoutFaseProcessoInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero?: StringFieldUpdateOperationsInput | string
    tipoProcessoId?: IntFieldUpdateOperationsInput | number
    vitimaId?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentoCreateManyClienteInput = {
    id?: number
    tipo: string
    descricao?: string | null
    arquivoUrl: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    userId: string
    criadoEm?: Date | string
  }

  export type DocumentoUpdateWithoutClienteInput = {
    tipo?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    arquivoUrl?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDocumentoNestedInput
  }

  export type DocumentoUncheckedUpdateWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    arquivoUrl?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    userId?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentoUncheckedUpdateManyWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    arquivoUrl?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    userId?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VitimaCountOutputTypeDefaultArgs instead
     */
    export type VitimaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VitimaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TiposDeProcessoCountOutputTypeDefaultArgs instead
     */
    export type TiposDeProcessoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TiposDeProcessoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FaseProcessoCountOutputTypeDefaultArgs instead
     */
    export type FaseProcessoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FaseProcessoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClienteCountOutputTypeDefaultArgs instead
     */
    export type ClienteCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClienteCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VitimaDefaultArgs instead
     */
    export type VitimaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VitimaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProcessoDefaultArgs instead
     */
    export type ProcessoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProcessoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TiposDeProcessoDefaultArgs instead
     */
    export type TiposDeProcessoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TiposDeProcessoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DocumentoDefaultArgs instead
     */
    export type DocumentoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DocumentoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FaseProcessoDefaultArgs instead
     */
    export type FaseProcessoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FaseProcessoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PrioridadesDefaultArgs instead
     */
    export type PrioridadesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PrioridadesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ParceiroDefaultArgs instead
     */
    export type ParceiroArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ParceiroDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClienteDefaultArgs instead
     */
    export type ClienteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClienteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BancoDefaultArgs instead
     */
    export type BancoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BancoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SeguradoraDefaultArgs instead
     */
    export type SeguradoraArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SeguradoraDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TipoDeVeiculoDefaultArgs instead
     */
    export type TipoDeVeiculoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TipoDeVeiculoDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}